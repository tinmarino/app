// Do not edit this file - Generated by Perlito6 9.0
// lib/Perlito6/JavaScript/Runtime.js
//
// Runtime for "Perlito6" Perl6-in-JavaScript
//
// AUTHORS
//
// Flavio Soibelmann Glock  fglock@gmail.com
// The Pugs Team  perl6-compiler@perl.org
//
// SEE ALSO
//
// The Perl 6 homepage at http://dev.perl.org/perl6
// The Pugs homepage at http://pugscode.org/
//
// COPYRIGHT
//
// Copyright 2009, 2010, 2011, 2012 by Flavio Soibelmann Glock and others.
// 
// This program is free software; you can redistribute it and/or modify it
// under the same terms as Perl itself.
// 
// See http://www.perl.com/perl/misc/Artistic.html

if (typeof arguments === 'object') {
    List_ARGS = arguments;
}

// class IO
if (typeof IO !== 'object') {
    IO = function() {};
    IO = new IO;
}

IO.slurp = function(filename) {
    if (typeof readFile == 'function') {
        return readFile(filename);
    }
    if (typeof read == 'function') {
        // v8
        return read(filename);
    }
    die("IO.slurp() not implemented");
};

// class Main
if (typeof Main !== 'object') {
    Main = function() {};
    Main = new Main;
}

(function() {
    Main._dump = function(o) {
        var out = [];
        for (var i in o) {
            if (i.match(/^v_/)) {
                out.push(i.substr(2) + " => " + perl(o[i]));
            }
            // else if (i.match(/^/)) {
            // } else {
            //    out.push(i + " => " + perl(o[i]));
            // }
        }
        return out.join(", ");
    };
})();

if (typeof Perlito6$Match !== 'object') {
    Perlito6$Match = function() {};
    Perlito6$Match = new Perlito6$Match;
    Perlito6$Match.isa = function(s) {
        return s == 'Perlito6::Match';
    };
    Perlito6$Match.perl = function() {
        return 'Perlito6::Match.new(' + Main._dump(this) + ')';
    };
}

v_MATCH = {};
v_MATCH.__proto__ = Perlito6$Match;

Perlito6$Match.hash = function() {
    return this;
};

if (typeof f_print !== 'function') {
    var buf = "";
    f_print = function() {
        var i;
        for (i = 0; i < f_print.arguments.length; i++) {
            var s = string(f_print.arguments[i]);
            if (s.substr(s.length - 2, 2) == "\n") {
                print(buf + s.substr(0, s.length - 2));
                buf = "";
            }
            else if (s.substr(s.length - 1, 1) == "\n") {
                print(buf + s.substr(0, s.length - 1));
                buf = "";
            }
            else {
                buf = buf + s;
            }
        }
        return true;
    };
}

if (typeof say !== 'function') {
    say = function() {
        var i;
        for (i = 0; i < say.arguments.length; i++) {
            f_print(say.arguments[i]);
        }
        return f_print("\n");
    };
}

if (typeof die !== 'function') {
    die = function() {
        var i;
        var s = '';
        for (i = 0; i < die.arguments.length; i++) {
            s = s + die.arguments[i];
        }
        f_print("Died: " + s + "\n");
    };
}

if (typeof warn !== 'function') {
    warn = function() {
        var i;
        var s = '';
        for (i = 0; i < warn.arguments.length; i++) {
            s = s + warn.arguments[i];
        }
        f_print("Warning: " + s + "\n");
    };
}

chr = function(o) {
    return String.fromCharCode(num(o));
};

elems = function(o) {
    if (o == null) {
        return 1;
    };
    if (typeof o.elems === 'function') {
        return o.elems();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        return o.length;
    }
    switch (typeof o) {
        case "string": return 1;
        case "function": return 1;
        case "number": return 1;
        case "boolean": return 1;
    }
    var l = 0;
    for (var i in o) {
        l++;
    }
    return l;
};

values = function(o) {
    if (o == null) {
        return [];
    };
    if (typeof o.values === 'function') {
        return o.values();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        return o;
    }
    switch (typeof o) {
        case "string": return [o];
        case "function": return [o];
        case "number": return [o];
        case "boolean": return [o];
    }
    var out = [];
    for (var i in o) {
        out.push(o[i]);
    }
    return out;
};

keys = function(o) {
    if (o == null) {
        return [];
    }
    if (typeof o.keys === 'function') {
        return o.keys();
    }
    var out = [];
    if (typeof o === 'object' && (o instanceof Array)) {
        var count = 0;
        for (var i in o) {
            out.push(count);
            count++;
        }
        return out;
    }
    for (var i in o) {
        out.push(i);
    }
    return out;
};

pairs = function(o) {
    if (o == null) {
        return [];
    }
    if (typeof o.pairs === 'function') {
        return o.pairs();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        var count = 0;
        for (var i in o) {
            var tmp = {
                v_key: count,
                v_value: i
            };
            tmp.__proto__ = Pair;
            out.push(tmp);
            count++;
        }
        return o;
    }
    var out = [];
    for (var i in o) {
        var tmp = {
            v_key: i,
            v_value: o[i]
        };
        tmp.__proto__ = Pair;
        out.push(tmp);
    }
    return out;
};

Array.prototype.grep = function grep(f) {
    var res = new Array()
    for (var i in this) {
        if (bool(f(this[i]))) {
            res.push(this[i])
        }
    }
    return res
}

var _id = 0;
id = function(o) {
    if (o == null) {
        return '_id_' + 'Mu';
    }
    if (typeof o.id === 'function') {
        return o.id();
    }
    if (o._id) {
        return o._id;
    }
    switch (typeof o) {
        case "string": return '_id_str_' + o;
        case "number": return '_id_num_' + o;
        case "boolean": return '_id_bool_' + o;
    }
    o._id = ++_id;
    return o._id;
};

perl = function(o) {
    if (o == null) {
        return 'Mu';
    }
    if (typeof o.perl === 'function') {
        return o.perl();
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        var out = [];
        for (var i = 0; i < o.length; i++) {
            out.push(perl(o[i]));
        }
        return "[" + out.join(", ") + "]";
    }
    switch (typeof o) {
        case "string": return '"' + Main.lisp_escape_string(o) + '"';
        case "function": return "function";
        case "number": return o;
        case "boolean": return o;
    }
    var out = [];
    for (var i in o) {
        out.push(i + " => " + perl(o[i]));
    }
    return '{' + out.join(", ") + '}';
};

isa = function(o, s) {
    if (o == null) {
        if (s == 'Mu') {
            return true;
        } else {
            return false;
        }
    }
    if (typeof o.isa === 'function') {
        return o.isa(s);
    }
    switch (typeof o) {
        case "string": return (s == 'Str');
        case "number": return (s == 'Num');
    }
    if (s == 'Array' && typeof o === 'object' && (o instanceof Array)) {
        return (1);
    }
    return false;
};

scalar = function(o) {
    if (o == null) {
        return o;
    }
    if (typeof o.scalar === 'function') {
        return o.scalar();
    }
    return o;
};

string = function(o) {
    if (o == null) {
        return "";
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        var out = [];
        for (var i = 0; i < o.length; i++) {
            out.push(string(o[i]));
        }
        return out.join(" ");
    }
    if (typeof o.string === 'function') {
        return o.string();
    }
    if (typeof o !== 'string') {
        return "" + o;
    }
    return o;
};

num = function(o) {
    if (o == null) {
        return 0;
    }
    if (typeof o === 'object' && (o instanceof Array)) {
        return o.length;
    }
    if (typeof o.num === 'function') {
        return o.num();
    }
    if (typeof o !== 'number') {
        return parseFloat(string(o));
    }
    return o;
};

add = function(o1, o2) {
    return num(o1) + num(o2)
};

bool = function(o) {
    if (o == null) {
        return o;
    }
    if (typeof o === 'boolean') {
        return o;
    }
    if (typeof o === 'number') {
        return o;
    }
    if (typeof o === 'string') {
        return o != '' && o != '0';
    }
    if (typeof o.bool === 'function') {
        return o.v_bool;
    }
    if (typeof o.length === 'number') {
        return o.length;
    }
    for (var i in o) {
        return true;
    }
    return false;
};

and = function(a, fb) {
    if (bool(a)) {
        return fb();
    }
    return false;
};

or = function(a, fb) {
    if (bool(a)) {
        return a;
    }
    return fb();
};

defined_or = function(a, fb) {
    if (a == null) {
        return fb();
    }
    return a;
};

pop = function(o) {
    if (o.length == null) {
        return null;
    }
    return o.pop();
};

shift = function(o) {
    if (o.length == null) {
        return null;
    }
    return o.shift();
};

push = function(o, v) {
    return o.push(v);
};

unshift = function(o, v) {
    return o.unshift(v);
};

index = function(o, s) {
    return o.indexOf(s);
};

chars = function(o) {
    if (typeof o.string === 'function') {
        return o.string().length;
    }
    return o.length;
};

str_replicate = function(o, num) {
    return num ? Array(num + 1).join(o) : "";
};

// regex primitives
if (typeof Perlito6$Grammar !== 'object') {
    Perlito6$Grammar = function() {};
    Perlito6$Grammar = new Perlito6$Grammar;
}

Perlito6$Grammar.word = function(v_str, v_pos) {
    var tmp = {
        v_str: v_str,
        v_from: v_pos,
        v_to: v_pos + 1,
        v_bool: v_str.substr(v_pos, 1).match(/\w/) != null
    };
    tmp.__proto__ = Perlito6$Match;
    return tmp;
};

Perlito6$Grammar.digit = function(v_str, v_pos) {
    var tmp = {
        v_str: v_str,
        v_from: v_pos,
        v_to: v_pos + 1,
        v_bool: v_str.substr(v_pos, 1).match(/\d/) != null
    };
    tmp.__proto__ = Perlito6$Match;
    return tmp;
};

Perlito6$Grammar.space = function(v_str, v_pos) {
    var tmp = {
        v_str: v_str,
        v_from: v_pos,
        v_to: v_pos + 1,
        v_bool: v_str.substr(v_pos, 1).match(/\s/) != null
    };
    tmp.__proto__ = Perlito6$Match;
    return tmp;
};


// class GLOBAL
if (typeof GLOBAL !== 'object') {
  GLOBAL = function() {};
  GLOBAL = new GLOBAL;
  GLOBAL.isa = function (s) { return s == 'GLOBAL'; };
  GLOBAL.perl = function () { return 'GLOBAL.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = GLOBAL;
    // use v6
;// class Perlito6::Match
if (typeof Perlito6$Match !== 'object') {
  Perlito6$Match = function() {};
  Perlito6$Match = new Perlito6$Match;
  Perlito6$Match.isa = function (s) { return s == 'Perlito6::Match'; };
  Perlito6$Match.perl = function () { return 'Perlito6::Match.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Match;
  // accessor from
  Perlito6$Match.v_from = null;
  Perlito6$Match.from = function () { return this.v_from; };
  // accessor to
  Perlito6$Match.v_to = null;
  Perlito6$Match.to = function () { return this.v_to; };
  // accessor str
  Perlito6$Match.v_str = null;
  Perlito6$Match.str = function () { return this.v_str; };
  // accessor bool
  Perlito6$Match.v_bool = null;
  Perlito6$Match.bool = function () { return this.v_bool; };
  // accessor capture
  Perlito6$Match.v_capture = null;
  Perlito6$Match.capture = function () { return this.v_capture; };
  // method scalar
  Perlito6$Match.scalar = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_bool) ) { return (function () {
                if ( bool((v_self.v_capture != null)) ) { (function () {
                    throw(v_self.v_capture);;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((v_self.v_str || "").substr(v_self.v_from, ((v_self.v_to - v_self.v_from))));
            })(); }
            else { return (function () {
                throw('');
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Match.scalar;  // v8 bug workaround
  // method string
  Perlito6$Match.string = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_bool) ) { return (function () {
                if ( bool((v_self.v_capture != null)) ) { (function () {
                    throw(v_self.v_capture);;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((v_self.v_str || "").substr(v_self.v_from, ((v_self.v_to - v_self.v_from))));
            })(); }
            else { return (function () {
                throw('');
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Match.string;  // v8 bug workaround
})()
;// class Pair
if (typeof Pair !== 'object') {
  Pair = function() {};
  Pair = new Pair;
  Pair.isa = function (s) { return s == 'Pair'; };
  Pair.perl = function () { return 'Pair.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Pair;
  // accessor key
  Pair.v_key = null;
  Pair.key = function () { return this.v_key; };
  // accessor value
  Pair.v_value = null;
  Pair.value = function () { return this.v_value; };
  // method perl
  Pair.perl = function () {
    var v_self = this;
        try {
            throw((string(v_self.v_key) + string(' ' + String.fromCharCode(61) + '> ') + string(perl(v_self.v_value))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Pair.perl;  // v8 bug workaround
})()
;// class Main
if (typeof Main !== 'object') {
  Main = function() {};
  Main = new Main;
  Main.isa = function (s) { return s == 'Main'; };
  Main.perl = function () { return 'Main.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Main;
  // sub to_lisp_identifier
  Main.to_lisp_identifier = function (v_ident) {
        try {
            throw((string('sv-') + string(v_ident)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.to_lisp_identifier;  // v8 bug workaround
  // sub lisp_dump_object
  Main.lisp_dump_object = function (v_class_name, v_data) {
        try {
            throw((string(v_class_name) + string('( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( perl(a_[i]) ) } return out; })(v_data)).join(', ')) + string(' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.lisp_dump_object;  // v8 bug workaround
})()
;    // use v6
;    // use v6
;// class Rul
if (typeof Rul !== 'object') {
  Rul = function() {};
  Rul = new Rul;
  Rul.isa = function (s) { return s == 'Rul'; };
  Rul.perl = function () { return 'Rul.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul;
  // sub constant
  Rul.constant = function (v_str) {
        try {
            var v_len = null;

(v_len = chars(v_str));
            if ( bool((v_str == String.fromCharCode(92))) ) { (function () {
(v_str = String.fromCharCode(92) + String.fromCharCode(92));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_str == String.fromCharCode(39))) ) { (function () {
(v_str = String.fromCharCode(92) + String.fromCharCode(39));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_len)) ) { return (function () {
                return((string('( ' + String.fromCharCode(39)) + string(v_str) + string(String.fromCharCode(39) + ' eq substr( ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'MATCH.to, ') + string(v_len) + string(') ') + string(String.fromCharCode(38) + String.fromCharCode(38) + ' ( ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ') + string(v_len) + string(' + ' + String.fromCharCode(36) + 'MATCH.to )') + string(')')));
            })(); }
            else { return (function () {
                throw('1');
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul.constant;  // v8 bug workaround
})()
;// class Rul::Quantifier
if (typeof Rul$Quantifier !== 'object') {
  Rul$Quantifier = function() {};
  Rul$Quantifier = new Rul$Quantifier;
  Rul$Quantifier.isa = function (s) { return s == 'Rul::Quantifier'; };
  Rul$Quantifier.perl = function () { return 'Rul::Quantifier.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Quantifier;
  // accessor term
  Rul$Quantifier.v_term = null;
  Rul$Quantifier.term = function () { return this.v_term; };
  // accessor quant
  Rul$Quantifier.v_quant = null;
  Rul$Quantifier.quant = function () { return this.v_quant; };
  // accessor greedy
  Rul$Quantifier.v_greedy = null;
  Rul$Quantifier.greedy = function () { return this.v_greedy; };
  // accessor ws1
  Rul$Quantifier.v_ws1 = null;
  Rul$Quantifier.ws1 = function () { return this.v_ws1; };
  // accessor ws2
  Rul$Quantifier.v_ws2 = null;
  Rul$Quantifier.ws2 = function () { return this.v_ws2; };
  // accessor ws3
  Rul$Quantifier.v_ws3 = null;
  Rul$Quantifier.ws3 = function () { return this.v_ws3; };
  // method emit_perl6
  Rul$Quantifier.emit_perl6 = function () {
    var v_self = this;
        try {
            if ( bool(and(((v_self.v_quant == '')), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                throw(v_self.v_term.emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(((v_self.v_quant == '+')), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                v_self.v_term.set_captures_to_array();
                throw((string('(do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string('my ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string('my ' + String.fromCharCode(36) + 'count ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string('while ') + string(v_self.v_term.emit_perl6()) + string(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' (' + String.fromCharCode(36) + 'last_match_null < 2) ') + string(String.fromCharCode(123) + ' ') + string('if ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to() ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_match_null + 1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ' ') + string('else ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'count ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'count + 1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_pos' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'count > 0' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(((v_self.v_quant == '*')), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                v_self.v_term.set_captures_to_array();
                throw((string('(do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string('my ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string('while ') + string(v_self.v_term.emit_perl6()) + string(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' (' + String.fromCharCode(36) + 'last_match_null < 2) ') + string(String.fromCharCode(123) + ' ') + string('if ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to() ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_match_null + 1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ' ') + string('else ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'last_match_null ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_pos' + String.fromCharCode(59) + ' ') + string('1 ') + string(String.fromCharCode(125) + ')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(((v_self.v_quant == String.fromCharCode(63))), function () { return ((v_self.v_greedy == '')); })) ) { (function () {
                v_self.v_term.set_captures_to_array();
                throw((string('(do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'last_pos ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' ') + string('if ' + String.fromCharCode(33) + '(do ' + String.fromCharCode(123)) + string(v_self.v_term.emit_perl6()) + string(String.fromCharCode(125) + ') ') + string(String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'last_pos' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('1 ') + string(String.fromCharCode(125) + ')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            warn((string('Rul::Quantifier: ') + string(perl(v_self)) + string((string(' not implemented')))));
            return(v_self.v_term.emit_perl6());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Quantifier.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Quantifier.set_captures_to_array = function () {
    var v_self = this;
        try {
            return(v_self.v_term.set_captures_to_array());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Quantifier.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Or
if (typeof Rul$Or !== 'object') {
  Rul$Or = function() {};
  Rul$Or = new Rul$Or;
  Rul$Or.isa = function (s) { return s == 'Rul::Or'; };
  Rul$Or.perl = function () { return 'Rul::Or.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Or;
  // accessor or_list
  Rul$Or.v_or_list = null;
  Rul$Or.or_list = function () { return this.v_or_list; };
  // method emit_perl6
  Rul$Or.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string('(do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'pos1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH.to' + String.fromCharCode(59) + ' (do ' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl6() ) }; return out; })(v_self.v_or_list)).join(String.fromCharCode(125) + ') ' + String.fromCharCode(124) + String.fromCharCode(124) + ' (do ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'pos1' + String.fromCharCode(59) + ' ')) + string(String.fromCharCode(125) + ') ' + String.fromCharCode(125) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Or.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Or.set_captures_to_array = function () {
    var v_self = this;
        try {
            return((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].set_captures_to_array() ) }; return out; })(v_self.v_or_list));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Or.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Concat
if (typeof Rul$Concat !== 'object') {
  Rul$Concat = function() {};
  Rul$Concat = new Rul$Concat;
  Rul$Concat.isa = function (s) { return s == 'Rul::Concat'; };
  Rul$Concat.perl = function () { return 'Rul::Concat.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Concat;
  // accessor concat
  Rul$Concat.v_concat = null;
  Rul$Concat.concat = function () { return this.v_concat; };
  // method emit_perl6
  Rul$Concat.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl6() ) }; return out; })(v_self.v_concat)).join(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ')) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Concat.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Concat.set_captures_to_array = function () {
    var v_self = this;
        try {
            return((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].set_captures_to_array() ) }; return out; })(v_self.v_concat));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Concat.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Subrule
if (typeof Rul$Subrule !== 'object') {
  Rul$Subrule = function() {};
  Rul$Subrule = new Rul$Subrule;
  Rul$Subrule.isa = function (s) { return s == 'Rul::Subrule'; };
  Rul$Subrule.perl = function () { return 'Rul::Subrule.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Subrule;
  // accessor metasyntax
  Rul$Subrule.v_metasyntax = null;
  Rul$Subrule.metasyntax = function () { return this.v_metasyntax; };
  // accessor captures
  Rul$Subrule.v_captures = null;
  Rul$Subrule.captures = function () { return this.v_captures; };
  // method emit_perl6
  Rul$Subrule.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_meth = null;

            var v_code = null;

(v_meth = ( bool((add(1, index(v_self.v_metasyntax, '.')))) ? v_self.v_metasyntax : ((string(String.fromCharCode(36) + 'grammar.') + string(v_self.v_metasyntax)))));
            if ( bool((v_self.v_captures == 1)) ) { (function () {
(v_code = (string('if ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2.to' + String.fromCharCode(59) + ' ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2' + String.fromCharCode(59) + ' 1 ' + String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' False ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));;
            })(); }
            else { (function () {
                if ( bool((v_self.v_captures > 1)) ) { (function () {
(v_code = (string('if ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2.to' + String.fromCharCode(59) + ' ') + string('if exists ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + ' ' + String.fromCharCode(123) + ' ') + string('(' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + ').push( ' + String.fromCharCode(36) + 'm2 )' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ' ') + string('else ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(36) + 'MATCH' + String.fromCharCode(123) + String.fromCharCode(39)) + string(v_self.v_metasyntax) + string(String.fromCharCode(39) + String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' [ ' + String.fromCharCode(36) + 'm2 ]' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('1 ') + string(String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' False ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));;
                })(); }
                else { (function () {
(v_code = 'if ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'm2.to' + String.fromCharCode(59) + ' 1 ' + String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' False ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ');;
                })(); };;
            })(); };
            return((string('(do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'm2 ' + String.fromCharCode(61) + ' ') + string(v_meth) + string('(' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'MATCH.to)' + String.fromCharCode(59) + ' ') + string(v_code) + string(String.fromCharCode(125) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Subrule.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Subrule.set_captures_to_array = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_captures > 0)) ) { return (function () {
                return((v_self.v_captures = add(v_self.v_captures, 1)));
            })(); }
            else { return (function () {
                null;
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Subrule.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Var
if (typeof Rul$Var !== 'object') {
  Rul$Var = function() {};
  Rul$Var = new Rul$Var;
  Rul$Var.isa = function (s) { return s == 'Rul::Var'; };
  Rul$Var.perl = function () { return 'Rul::Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Var;
  // accessor sigil
  Rul$Var.v_sigil = null;
  Rul$Var.sigil = function () { return this.v_sigil; };
  // accessor twigil
  Rul$Var.v_twigil = null;
  Rul$Var.twigil = function () { return this.v_twigil; };
  // accessor name
  Rul$Var.v_name = null;
  Rul$Var.name = function () { return this.v_name; };
  // method emit_perl6
  Rul$Var.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_table = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = String.fromCharCode(36)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = String.fromCharCode(36) + 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = String.fromCharCode(36) + 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = String.fromCharCode(36) + 'Code_'); })();
    return(Hash_a);
})());
            return((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_self.v_name)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Var.emit_perl6;  // v8 bug workaround
})()
;// class Rul::Constant
if (typeof Rul$Constant !== 'object') {
  Rul$Constant = function() {};
  Rul$Constant = new Rul$Constant;
  Rul$Constant.isa = function (s) { return s == 'Rul::Constant'; };
  Rul$Constant.perl = function () { return 'Rul::Constant.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Constant;
  // accessor constant
  Rul$Constant.v_constant = null;
  Rul$Constant.constant = function () { return this.v_constant; };
  // method emit_perl6
  Rul$Constant.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_str = null;

(v_str = v_self.v_constant);
            return(Rul.constant(v_str));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Constant.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Constant.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Constant.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Dot
if (typeof Rul$Dot !== 'object') {
  Rul$Dot = function() {};
  Rul$Dot = new Rul$Dot;
  Rul$Dot.isa = function (s) { return s == 'Rul::Dot'; };
  Rul$Dot.perl = function () { return 'Rul::Dot.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Dot;
  // method emit_perl6
  Rul$Dot.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string('( ' + String.fromCharCode(39) + String.fromCharCode(39) + ' ne substr( ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'MATCH.to, 1 ) ') + string(String.fromCharCode(38) + String.fromCharCode(38) + ' (' + String.fromCharCode(36) + 'MATCH.to ' + String.fromCharCode(61) + ' 1 + ' + String.fromCharCode(36) + 'MATCH.to)') + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Dot.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Dot.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Dot.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::SpecialChar
if (typeof Rul$SpecialChar !== 'object') {
  Rul$SpecialChar = function() {};
  Rul$SpecialChar = new Rul$SpecialChar;
  Rul$SpecialChar.isa = function (s) { return s == 'Rul::SpecialChar'; };
  Rul$SpecialChar.perl = function () { return 'Rul::SpecialChar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$SpecialChar;
  // accessor char
  Rul$SpecialChar.v_char = null;
  Rul$SpecialChar.char = function () { return this.v_char; };
  // method emit_perl6
  Rul$SpecialChar.emit_perl6 = function () {
    var v_self = this;
        try {
            var v_char = null;

(v_char = v_self.v_char);
            if ( bool((v_char == 'n')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'is_newline',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 'N')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'not_newline',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 'd')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'digit',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 's')) ) { (function () {
                throw((function () { var tmp = {v_metasyntax: 'space',v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })().emit_perl6());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_char == 't')) ) { (function () {
                throw(Rul.constant(String.fromCharCode(num(9))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(Rul.constant(v_char));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$SpecialChar.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$SpecialChar.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$SpecialChar.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Block
if (typeof Rul$Block !== 'object') {
  Rul$Block = function() {};
  Rul$Block = new Rul$Block;
  Rul$Block.isa = function (s) { return s == 'Rul::Block'; };
  Rul$Block.perl = function () { return 'Rul::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Block;
  // accessor closure
  Rul$Block.v_closure = null;
  Rul$Block.closure = function () { return this.v_closure; };
  // method emit_perl6
  Rul$Block.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string('((do ' + String.fromCharCode(123) + ' ') + string(v_self.v_closure) + string(' ' + String.fromCharCode(125) + ') ' + String.fromCharCode(124) + String.fromCharCode(124) + ' 1)')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Block.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Block.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Block.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::InterpolateVar
if (typeof Rul$InterpolateVar !== 'object') {
  Rul$InterpolateVar = function() {};
  Rul$InterpolateVar = new Rul$InterpolateVar;
  Rul$InterpolateVar.isa = function (s) { return s == 'Rul::InterpolateVar'; };
  Rul$InterpolateVar.perl = function () { return 'Rul::InterpolateVar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$InterpolateVar;
  // accessor var
  Rul$InterpolateVar.v_var = null;
  Rul$InterpolateVar.var = function () { return this.v_var; };
  // method emit_perl6
  Rul$InterpolateVar.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string(String.fromCharCode(35) + ' TODO: interpolate var ') + string(v_self.v_var.emit_perl6()) + string('')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$InterpolateVar.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$InterpolateVar.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$InterpolateVar.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::NamedCapture
if (typeof Rul$NamedCapture !== 'object') {
  Rul$NamedCapture = function() {};
  Rul$NamedCapture = new Rul$NamedCapture;
  Rul$NamedCapture.isa = function (s) { return s == 'Rul::NamedCapture'; };
  Rul$NamedCapture.perl = function () { return 'Rul::NamedCapture.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$NamedCapture;
  // accessor rule_exp
  Rul$NamedCapture.v_rule_exp = null;
  Rul$NamedCapture.rule_exp = function () { return this.v_rule_exp; };
  // accessor capture_ident
  Rul$NamedCapture.v_capture_ident = null;
  Rul$NamedCapture.capture_ident = function () { return this.v_capture_ident; };
  // method emit_perl6
  Rul$NamedCapture.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string(String.fromCharCode(35) + ' TODO: named capture ') + string(v_self.v_capture_ident) + string(' ' + String.fromCharCode(61) + ' ') + string(v_self.v_rule_exp.emit_perl6()) + string('')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NamedCapture.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$NamedCapture.set_captures_to_array = function () {
    var v_self = this;
        try {
            return(say(String.fromCharCode(35) + ' TODO: named capture '));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NamedCapture.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::Before
if (typeof Rul$Before !== 'object') {
  Rul$Before = function() {};
  Rul$Before = new Rul$Before;
  Rul$Before.isa = function (s) { return s == 'Rul::Before'; };
  Rul$Before.perl = function () { return 'Rul::Before.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Before;
  // accessor rule_exp
  Rul$Before.v_rule_exp = null;
  Rul$Before.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$Before.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string('(do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'tmp ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' Perlito6::Match.new( ' + String.fromCharCode(39) + 'str' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(39) + 'from' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'to' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'bool' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> 1  )' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.bool ' + String.fromCharCode(61) + ' ') + string(v_self.v_rule_exp.emit_perl6()) + string(String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'tmp.bool ' + String.fromCharCode(61) + ' ' + String.fromCharCode(63) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(63) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Before.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$Before.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Before.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::NotBefore
if (typeof Rul$NotBefore !== 'object') {
  Rul$NotBefore = function() {};
  Rul$NotBefore = new Rul$NotBefore;
  Rul$NotBefore.isa = function (s) { return s == 'Rul::NotBefore'; };
  Rul$NotBefore.perl = function () { return 'Rul::NotBefore.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$NotBefore;
  // accessor rule_exp
  Rul$NotBefore.v_rule_exp = null;
  Rul$NotBefore.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$NotBefore.emit_perl6 = function () {
    var v_self = this;
        try {
            return((string('(do ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'tmp ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' Perlito6::Match.new( ' + String.fromCharCode(39) + 'str' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(39) + 'from' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'to' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'tmp.to, ' + String.fromCharCode(39) + 'bool' + String.fromCharCode(39) + ' ' + String.fromCharCode(61) + '> 1  )' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.bool ' + String.fromCharCode(61) + ' ') + string(v_self.v_rule_exp.emit_perl6()) + string(String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'tmp.bool ' + String.fromCharCode(61) + ' ' + String.fromCharCode(33) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(63) + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NotBefore.emit_perl6;  // v8 bug workaround
  // method set_captures_to_array
  Rul$NotBefore.set_captures_to_array = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NotBefore.set_captures_to_array;  // v8 bug workaround
})()
;// class Rul::NegateCharClass
if (typeof Rul$NegateCharClass !== 'object') {
  Rul$NegateCharClass = function() {};
  Rul$NegateCharClass = new Rul$NegateCharClass;
  Rul$NegateCharClass.isa = function (s) { return s == 'Rul::NegateCharClass'; };
  Rul$NegateCharClass.perl = function () { return 'Rul::NegateCharClass.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$NegateCharClass;
  // accessor chars
  Rul$NegateCharClass.v_chars = null;
  Rul$NegateCharClass.chars = function () { return this.v_chars; };
  // method emit_perl6
  Rul$NegateCharClass.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO NegateCharClass')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$NegateCharClass.emit_perl6;  // v8 bug workaround
})()
;// class Rul::CharClass
if (typeof Rul$CharClass !== 'object') {
  Rul$CharClass = function() {};
  Rul$CharClass = new Rul$CharClass;
  Rul$CharClass.isa = function (s) { return s == 'Rul::CharClass'; };
  Rul$CharClass.perl = function () { return 'Rul::CharClass.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$CharClass;
  // accessor chars
  Rul$CharClass.v_chars = null;
  Rul$CharClass.chars = function () { return this.v_chars; };
  // method emit_perl6
  Rul$CharClass.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO CharClass')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$CharClass.emit_perl6;  // v8 bug workaround
})()
;// class Rul::Capture
if (typeof Rul$Capture !== 'object') {
  Rul$Capture = function() {};
  Rul$Capture = new Rul$Capture;
  Rul$Capture.isa = function (s) { return s == 'Rul::Capture'; };
  Rul$Capture.perl = function () { return 'Rul::Capture.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$Capture;
  // accessor rule_exp
  Rul$Capture.v_rule_exp = null;
  Rul$Capture.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$Capture.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO RulCapture')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$Capture.emit_perl6;  // v8 bug workaround
})()
;// class Rul::CaptureResult
if (typeof Rul$CaptureResult !== 'object') {
  Rul$CaptureResult = function() {};
  Rul$CaptureResult = new Rul$CaptureResult;
  Rul$CaptureResult.isa = function (s) { return s == 'Rul::CaptureResult'; };
  Rul$CaptureResult.perl = function () { return 'Rul::CaptureResult.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$CaptureResult;
  // accessor rule_exp
  Rul$CaptureResult.v_rule_exp = null;
  Rul$CaptureResult.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$CaptureResult.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO Rul::CaptureResult')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$CaptureResult.emit_perl6;  // v8 bug workaround
})()
;// class Rul::After
if (typeof Rul$After !== 'object') {
  Rul$After = function() {};
  Rul$After = new Rul$After;
  Rul$After.isa = function (s) { return s == 'Rul::After'; };
  Rul$After.perl = function () { return 'Rul::After.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Rul$After;
  // accessor rule_exp
  Rul$After.v_rule_exp = null;
  Rul$After.rule_exp = function () { return this.v_rule_exp; };
  // method emit_perl6
  Rul$After.emit_perl6 = function () {
    var v_self = this;
        try {
            say((string('TODO Rul::After')));
            return(die());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Rul$After.emit_perl6;  // v8 bug workaround
})()
;// class Perlito6::Precedence
if (typeof Perlito6$Precedence !== 'object') {
  Perlito6$Precedence = function() {};
  Perlito6$Precedence = new Perlito6$Precedence;
  Perlito6$Precedence.isa = function (s) { return s == 'Perlito6::Precedence'; };
  Perlito6$Precedence.perl = function () { return 'Perlito6::Precedence.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Precedence;
  var v_Operator = null;
  var v_Precedence = null;
  var v_Assoc = null;
  var v_Allow_space_before = null;
  var List_Op = [];
  var v_End_token = null;
  var List_Op_chars = [];
  var v_prec = null;
  // accessor get_token
  Perlito6$Precedence.v_get_token = null;
  Perlito6$Precedence.get_token = function () { return this.v_get_token; };
  // accessor reduce
  Perlito6$Precedence.v_reduce = null;
  Perlito6$Precedence.reduce = function () { return this.v_reduce; };
  // accessor end_token
  Perlito6$Precedence.v_end_token = null;
  Perlito6$Precedence.end_token = function () { return this.v_end_token; };
  // sub is_assoc_type
  Perlito6$Precedence.is_assoc_type = function (v_assoc_type, v_op_name) {
        try {
            throw((function () { if (v_Assoc == null) { v_Assoc = {} }; if (v_Assoc[v_assoc_type] == null) { v_Assoc[v_assoc_type] = {} }; return (v_Assoc[v_assoc_type][v_op_name] ); })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Precedence.is_assoc_type;  // v8 bug workaround
  // sub is_fixity_type
  Perlito6$Precedence.is_fixity_type = function (v_fixity_type, v_op_name) {
        try {
            throw((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator[v_fixity_type] == null) { v_Operator[v_fixity_type] = {} }; return (v_Operator[v_fixity_type][v_op_name] ); })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Precedence.is_fixity_type;  // v8 bug workaround
  // sub is_term
  Perlito6$Precedence.is_term = function (v_token) {
        try {
            return(or(((v_token[0] == 'term')), function () { return ((v_token[0] == 'postfix_or_term')); }));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Precedence.is_term;  // v8 bug workaround
  // sub is_ident_middle
  Perlito6$Precedence.is_ident_middle = function (v_c) {
        try {
            return(or(or((and(((v_c >= 'a')), function () { return ((v_c <= 'z')); })), function () { return (and(((v_c >= '0')), function () { return ((v_c <= '9')); })); }), function () { return ((v_c == '_')); }));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Precedence.is_ident_middle;  // v8 bug workaround
  // method op_parse
  Perlito6$Precedence.op_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_from = null;

            var v_c01 = null;

            var v_c02 = null;

            var v_hyper_left = null;

            var v_hyper_right = null;

(v_from = v_pos);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_tok) {                 var v_l = null;

                var v_s = null;

(v_l = chars(v_tok));
(v_s = (v_str || "").substr(v_pos, v_l));
                if ( bool((v_s == v_tok)) ) { (function () {
                    var v_c1 = null;

                    var v_c2 = null;

(v_c1 = (v_str || "").substr((add(v_pos, v_l) - 1), 1));
(v_c2 = (v_str || "").substr(add(v_pos, v_l), 1));
                    if ( bool(and(v__NAMESPACE.is_ident_middle(v_c1), function () { return (or(v__NAMESPACE.is_ident_middle(v_c2), function () { return (v_c2 == '('); })); })) ) { (function () {
                        null;
                    })(); }
                    else { (function () {
                        throw((function () { var tmp = {v_str: v_str,v_from: v_from,v_to: add(v_pos, 2),v_bool: 1,v_capture: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push(v_s);
    return(List_a);
})()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((v_End_token)));
(v_c01 = (v_str || "").substr(v_pos, 1));
(v_c02 = (v_str || "").substr(v_pos, 2));
(v_hyper_left = 0);
(v_hyper_right = 0);
            if ( bool(or(((v_c01 == String.fromCharCode(171))), function () { return ((v_c01 == String.fromCharCode(187))); })) ) { (function () {
(v_hyper_left = v_c01);
(v_pos = add(v_pos, 1));
(v_c02 = (v_str || "").substr(v_pos, 2));;
            })(); }
            else { (function () {
                if ( bool(or(((v_c02 == '<<')), function () { return ((v_c02 == '>>')); })) ) { (function () {
(v_hyper_left = v_c02);
(v_pos = add(v_pos, 2));
(v_c02 = (v_str || "").substr(v_pos, 2));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_len) {                 var v_op = null;

(v_op = (v_str || "").substr(v_pos, v_len));
                if ( bool((List_Op[v_len]).hasOwnProperty(v_op)) ) { (function () {
                    var v_c1 = null;

                    var v_c2 = null;

(v_c1 = (v_str || "").substr((add(v_pos, v_len) - 1), 1));
(v_c2 = (v_str || "").substr(add(v_pos, v_len), 1));
                    if ( bool(and(v__NAMESPACE.is_ident_middle(v_c1), function () { return (or(v__NAMESPACE.is_ident_middle(v_c2), function () { return (v_c2 == '('); })); })) ) { (function () {
                        null;
                    })(); }
                    else { (function () {
                        var v_c01 = null;

                        var v_c02 = null;

(v_pos = add(v_pos, v_len));
(v_c01 = (v_str || "").substr(v_pos, 1));
(v_c02 = (v_str || "").substr(v_pos, 2));
                        if ( bool(or(((v_c01 == String.fromCharCode(171))), function () { return ((v_c01 == String.fromCharCode(187))); })) ) { (function () {
(v_hyper_right = v_c01);
(v_pos = add(v_pos, 1));;
                        })(); }
                        else { (function () {
                            if ( bool(or(((v_c02 == '<<')), function () { return ((v_c02 == '>>')); })) ) { (function () {
(v_hyper_right = v_c02);
(v_pos = add(v_pos, 2));;
                            })(); }
                            else { (function () {
                                null;
                            })(); };;
                        })(); };
                        throw((function () { var tmp = {v_str: v_str,v_from: v_from,v_to: v_pos,v_bool: 1,v_capture: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push(v_op);
List_a.push((function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_left']  = v_hyper_left); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hyper_right']  = v_hyper_right); })();
    return(Hash_a);
})());
    return(List_a);
})()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(List_Op_chars);
            throw((function () { var tmp = {v_bool: 0}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Precedence.op_parse;  // v8 bug workaround
  // sub add_op
  Perlito6$Precedence.add_op = function (v_fixity, v_name, v_precedence, v_param) {
        try {
            var v_assoc = null;

            if ( bool(( bool(((v_param != null))) ? false : true)) ) { (function () {
(v_param = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_assoc = or((function () { if (v_param == null) { v_param = {} }; return (v_param['assoc'] ); })(), function () { return 'left'; }));
(function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator[v_fixity] == null) { v_Operator[v_fixity] = {} }; return (v_Operator[v_fixity][v_name]  = 1); })();
(function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_name]  = v_precedence); })();
(function () { if (v_Assoc == null) { v_Assoc = {} }; if (v_Assoc[v_assoc] == null) { v_Assoc[v_assoc] = {} }; return (v_Assoc[v_assoc][v_name]  = 1); })();
(function () { if (v_Allow_space_before == null) { v_Allow_space_before = {} }; if (v_Allow_space_before[v_fixity] == null) { v_Allow_space_before[v_fixity] = {} }; return (v_Allow_space_before[v_fixity][v_name]  = ( bool((function () { if (v_param == null) { v_param = {} }; return (v_param['no_space_before'] ); })()) ? false : true)); })();
            return((function () { if (List_Op[chars(v_name)] == null) { List_Op[chars(v_name)] = {} }; return (List_Op[chars(v_name)][v_name]  = 1); })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Precedence.add_op;  // v8 bug workaround
  // method precedence_parse
  Perlito6$Precedence.precedence_parse = function () {
    var v_self = this;
        try {
            var v_get_token = null;

            var v_reduce = null;

            var v_last_end_token = null;

            var v_op_stack = null;

            var v_num_stack = null;

            var v_last = null;

            var v_last_has_space = null;

            var v_token = null;

(v_get_token = v_self.get_token());
(v_reduce = v_self.reduce());
(v_last_end_token = v_End_token);
(v_End_token = v_self.end_token());
(v_op_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_num_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_last = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push('*start*');
    return(List_a);
})());
(v_last_has_space = false);
(v_token = (v_get_token)());
            if ( bool(((v_token[0]) == 'space')) ) { (function () {
(v_token = (v_get_token)());;
            })(); }
            else { (function () {
                null;
            })(); };
            for ( ; bool(and(((v_token != null)), function () { return ((v_token[0] != 'end')); }));  ) { (function () {                 if ( bool(and(((v_token[1] == ',')), function () { return (or(((v_last[1] == '*start*')), function () { return ((v_last[1] == ',')); })); })) ) { (function () {
v_num_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(null);
    return(List_a);
})());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator['prefix'] == null) { v_Operator['prefix'] = {} }; return (v_Operator['prefix'][v_token[1]] ); })(), function () { return (or(((v_last[1] == '*start*')), function () { return ( bool((v__NAMESPACE.is_term(v_last))) ? false : true); })); })) ) { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'prefix'); })();
v_op_stack.unshift(v_token);;
                })(); }
                else { (function () {
                    if ( bool(and(and((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator['postfix'] == null) { v_Operator['postfix'] = {} }; return (v_Operator['postfix'][v_token[1]] ); })(), function () { return v__NAMESPACE.is_term(v_last); }), function () { return (or((function () { if (v_Allow_space_before == null) { v_Allow_space_before = {} }; if (v_Allow_space_before['postfix'] == null) { v_Allow_space_before['postfix'] = {} }; return (v_Allow_space_before['postfix'][v_token[1]] ); })(), function () { return ( bool((v_last_has_space)) ? false : true); })); })) ) { (function () {
                        var v_pr = null;

(v_pr = (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_token[1]] ); })());
                        for ( ; bool(and(elems(v_op_stack), function () { return ((v_pr <= (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[(v_op_stack[0])[1]] ); })())); }));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };
                        if ( bool(((v_token[0]) != 'postfix_or_term')) ) { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'postfix'); })();;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
v_op_stack.unshift(v_token);;
                    })(); }
                    else { (function () {
                        if ( bool(and(and(((v_token[1] == 'block')), function () { return v__NAMESPACE.is_term(v_last); }), function () { return v_last_has_space; })) ) { (function () {
                            for ( ; bool(elems(v_op_stack));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };
v_num_stack.push(v_token);
(v_End_token = v_last_end_token);
                            throw(v_num_stack);;
                        })(); }
                        else { (function () {
                            if ( bool(v__NAMESPACE.is_term(v_token)) ) { (function () {
                                if ( bool(v__NAMESPACE.is_term(v_last)) ) { (function () {
                                    say((string(String.fromCharCode(35) + '      last:  ')), perl(v_last));
                                    say((string(String.fromCharCode(35) + '      token: ')), perl(v_token));
                                    say((string(String.fromCharCode(35) + '      space: ')), v_last_has_space);
                                    die((string('Value tokens must be separated by an operator')));;
                                })(); }
                                else { (function () {
                                    null;
                                })(); };
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'term'); })();
v_num_stack.push(v_token);;
                            })(); }
                            else { (function () {
                                if ( bool((function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_token[1]] ); })()) ) { (function () {
                                    var v_pr = null;

(v_pr = (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[v_token[1]] ); })());
                                    if ( bool((function () { if (v_Assoc == null) { v_Assoc = {} }; if (v_Assoc['right'] == null) { v_Assoc['right'] = {} }; return (v_Assoc['right'][v_token[1]] ); })()) ) { (function () {
                                        for ( ; bool(and(elems(v_op_stack), function () { return ((v_pr < (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[(v_op_stack[0])[1]] ); })())); }));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };;
                                    })(); }
                                    else { (function () {
                                        for ( ; bool(and(elems(v_op_stack), function () { return ((v_pr <= (function () { if (v_Precedence == null) { v_Precedence = {} }; return (v_Precedence[(v_op_stack[0])[1]] ); })())); }));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };;
                                    })(); };
                                    if ( bool((function () { if (v_Operator == null) { v_Operator = {} }; if (v_Operator['ternary'] == null) { v_Operator['ternary'] = {} }; return (v_Operator['ternary'][v_token[1]] ); })()) ) { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'ternary'); })();;
                                    })(); }
                                    else { (function () {
(function () { if (v_token == null) { v_token = [] }; return (v_token[0]  = 'infix'); })();;
                                    })(); };
v_op_stack.unshift(v_token);;
                                })(); }
                                else { (function () {
                                    die((string('Unknown token: ' + String.fromCharCode(39))), v_token[1], (string(String.fromCharCode(39))));;
                                })(); };;
                            })(); };;
                        })(); };;
                    })(); };;
                })(); };
(v_last = v_token);
(v_token = (v_get_token)());
                if ( bool((v_token[0] == 'space')) ) { (function () {
(v_token = (v_get_token)());
(v_last_has_space = true);;
                })(); }
                else { (function () {
(v_last_has_space = false);;
                })(); };; })() };
            if ( bool(and((v_token != null), function () { return ((v_token[0] != 'end')); })) ) { (function () {
                die((string('Unexpected end token: ')), perl(v_token));;
            })(); }
            else { (function () {
                null;
            })(); };
            for ( ; bool(elems(v_op_stack));  ) { (function () { (v_reduce)(v_op_stack, v_num_stack);; })() };
(v_End_token = v_last_end_token);
            throw(v_num_stack);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Precedence.precedence_parse;  // v8 bug workaround
(v_Operator = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(v_Precedence = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(v_Assoc = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(v_Allow_space_before = (function () { 
    var Hash_a = {};

    return(Hash_a);
})());(List_Op_chars = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(3);
List_a.push(2);
List_a.push(1);
    return(List_a);
})());(v_prec = 100);        v__NAMESPACE.add_op('postfix', '.( )', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '.[ ]', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '.' + String.fromCharCode(123) + ' ' + String.fromCharCode(125), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '( )', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '[ ]', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'funcall', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'funcall_no_params', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'methcall', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'methcall_no_params', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'block', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', 'hash', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('prefix', '++', v_prec);        v__NAMESPACE.add_op('prefix', '--', v_prec);        v__NAMESPACE.add_op('postfix', '++', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('postfix', '--', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['no_space_before']  = true); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '**', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('prefix', '+', v_prec);        v__NAMESPACE.add_op('prefix', '-', v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(36), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(64), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(37), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(33), v_prec);        v__NAMESPACE.add_op('prefix', String.fromCharCode(63), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '*', v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(47), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '+', v_prec);        v__NAMESPACE.add_op('infix', '-', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', 'x', v_prec);        v__NAMESPACE.add_op('infix', 'xx', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(126), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('prefix', String.fromCharCode(126), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(38), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('prefix', String.fromCharCode(38), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(124), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('prefix', String.fromCharCode(124), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '<' + String.fromCharCode(61) + '>', v_prec);        v__NAMESPACE.add_op('infix', 'leg', v_prec);        v__NAMESPACE.add_op('infix', 'cmp', v_prec);        v__NAMESPACE.add_op('infix', 'does', v_prec);        v__NAMESPACE.add_op('infix', 'but', v_prec);        v__NAMESPACE.add_op('infix', '..', v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(94) + '..', v_prec);        v__NAMESPACE.add_op('infix', '..' + String.fromCharCode(94), v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(94) + '..' + String.fromCharCode(94), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'ne', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'eq', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'lt', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'le', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'gt', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', 'ge', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '<' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '>' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(61) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(33) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '<', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '>', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(126) + String.fromCharCode(126), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'chain'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(38) + String.fromCharCode(38), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(124) + String.fromCharCode(124), v_prec);        v__NAMESPACE.add_op('infix', String.fromCharCode(47) + String.fromCharCode(47), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('ternary', String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33), v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', ':' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(38) + String.fromCharCode(38) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(124) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(38) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(47) + String.fromCharCode(47) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '+' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '-' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', '*' + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(47) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());        v__NAMESPACE.add_op('infix', String.fromCharCode(126) + String.fromCharCode(61), v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'right'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('prefix', 'not', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', String.fromCharCode(61) + '>', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('list', ',', v_prec, (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['assoc']  = 'list'); })();
    return(Hash_a);
})());(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', 'and', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', 'or', v_prec);(v_prec = (v_prec - 1));        v__NAMESPACE.add_op('infix', '*start*', v_prec);})()
;    // use v6
;    // use v6
;// class Perlito6::Grammar::Regex
if (typeof Perlito6$Grammar$Regex !== 'object') {
  Perlito6$Grammar$Regex = function() {};
  Perlito6$Grammar$Regex = new Perlito6$Grammar$Regex;
  Perlito6$Grammar$Regex.isa = function (s) { return s == 'Perlito6::Grammar::Regex'; };
  Perlito6$Grammar$Regex.perl = function () { return 'Perlito6::Grammar::Regex.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Grammar$Regex;
  var Hash_rule_terms = {};
  // method ws
  Perlito6$Grammar$Regex.ws = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.ws;  // v8 bug workaround
  // method rule_ident
  Perlito6$Grammar$Regex.rule_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digit']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.rule_ident;  // v8 bug workaround
  // method any
  Perlito6$Grammar$Regex.any = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.any;  // v8 bug workaround
  // method literal
  Perlito6$Grammar$Regex.literal = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.literal;  // v8 bug workaround
  // method metasyntax_exp
  Perlito6$Grammar$Regex.metasyntax_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.string_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('<' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.metasyntax_exp;  // v8 bug workaround
  // method char_range
  Perlito6$Grammar$Regex.char_range = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.char_range;  // v8 bug workaround
  // method char_class
  Perlito6$Grammar$Regex.char_class = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('[' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_range(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.char_class;  // v8 bug workaround
  // method string_code
  Perlito6$Grammar$Regex.string_code = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.string_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); })));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.string_code;  // v8 bug workaround
  // method parsed_code
  Perlito6$Grammar$Regex.parsed_code = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.string_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string(v_MATCH)));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.parsed_code;  // v8 bug workaround
  // method named_capture_body
  Perlito6$Grammar$Regex.named_capture_body = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(and(and((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((')' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['capturing_group']  = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())); })();
    return(Hash_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('[' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('<' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 1}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return(die('invalid alias syntax'));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.named_capture_body;  // v8 bug workaround
  // method variables
  Perlito6$Grammar$Regex.variables = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(and((and((String.fromCharCode(36) + '<' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(36) + String.fromCharCode(47) + String.fromCharCode(123)) + string(String.fromCharCode(39)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_ident'] ); })()) + string(String.fromCharCode(39)) + string(String.fromCharCode(125)))));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.var_sigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_sigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.val_int(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_int']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_sigil'] ); })()) + string(String.fromCharCode(47) + '[') + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_int'] ); })()) + string(']'))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.var_sigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_sigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_twigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_sigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_sigil'] ); })()),v_twigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_twigil'] ); })()),v_name: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.full_ident'] ); })())}; tmp.__proto__ = Rul$Var; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.variables;  // v8 bug workaround
  // method rule_terms
  Perlito6$Grammar$Regex.rule_terms = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(or(or(or(or(or(or(or(or(or(((function () { 
    return(and(and(and((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((')' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$Capture; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('<(' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((')>' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$CaptureResult; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and((and(('<after' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$After; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and((and(('<before' == (v_str || "").substr(v_MATCH.to(), 7)), function () { return ((v_MATCH.v_to = add(7, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$Before; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and((and(('<' + String.fromCharCode(33) + 'before' == (v_str || "").substr(v_MATCH.to(), 8)), function () { return ((v_MATCH.v_to = add(8, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())}; tmp.__proto__ = Rul$NotBefore; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('<' + String.fromCharCode(33) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['negate']  = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['metasyntax']  = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })())); })();
    return(Hash_a);
})()); })();
    return(Hash_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('<+' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_class(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_chars: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class'] ); })())}; tmp.__proto__ = Rul$CharClass; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('<-' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_class(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_chars: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_class'] ); })())}; tmp.__proto__ = Rul$NegateCharClass; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal'] ); })())}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and((and(('<' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.literal(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['literal'] ); })())}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and(('<' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.variables(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_var: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables'] ); })())}; tmp.__proto__ = Rul$InterpolateVar; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 0}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.metasyntax_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_metasyntax: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['metasyntax_exp'] ); })()),v_captures: 1}; tmp.__proto__ = Rul$Subrule; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.parsed_code(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['parsed_code']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_closure: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['parsed_code'] ); })())}; tmp.__proto__ = Rul$Block; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(and(and((and(('c' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('[' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.digits'] ); })()))}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('c' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.digits'] ); })()))}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_char: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any'] ); })())}; tmp.__proto__ = Rul$SpecialChar; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {}; tmp.__proto__ = Rul$Dot; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('[' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.rule_terms;  // v8 bug workaround
  // method rule_term
  Perlito6$Grammar$Regex.rule_term = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.variables(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return (and((String.fromCharCode(61) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.named_capture_body(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['named_capture_body']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_rule_exp: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['named_capture_body'] ); })()),v_capture_ident: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables'] ); })())}; tmp.__proto__ = Rul$NamedCapture; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['variables'] ); })())));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_terms(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_terms']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_terms'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(or(or(or(or(or(((function () { 
    return(and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((')' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((':' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('*' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(124) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(38) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(47) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_constant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['any'] ); })())}; tmp.__proto__ = Rul$Constant; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.rule_term;  // v8 bug workaround
  // method quant_exp
  Perlito6$Grammar$Regex.quant_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and((and(('**' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.val_int(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_int']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_int'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_term(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('*' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})())));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.quant_exp;  // v8 bug workaround
  // method greedy_exp
  Perlito6$Grammar$Regex.greedy_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.greedy_exp;  // v8 bug workaround
  // method quantifier
  Perlito6$Grammar$Regex.quantifier = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.rule_term(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.opt_ws2(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.quant_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quant_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.greedy_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['greedy_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.opt_ws3(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_term: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term'] ); })()),v_quant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quant_exp'] ); })()),v_greedy: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['greedy_exp'] ); })()),v_ws1: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.opt_ws'] ); })()),v_ws2: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.opt_ws2'] ); })()),v_ws3: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.opt_ws3'] ); })())}; tmp.__proto__ = Rul$Quantifier; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['rule_term'] ); })())));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.quantifier;  // v8 bug workaround
  // method concat_list
  Perlito6$Grammar$Regex.concat_list = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.quantifier(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quantifier']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.concat_list(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quantifier'] ); })()));
(List_v = ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list'] ); })()))));
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['quantifier'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.concat_list;  // v8 bug workaround
  // method concat_exp
  Perlito6$Grammar$Regex.concat_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.concat_list(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_concat: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_list'] ); })())}; tmp.__proto__ = Rul$Concat; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.concat_exp;  // v8 bug workaround
  // method or_list_exp
  Perlito6$Grammar$Regex.or_list_exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.concat_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and((and((String.fromCharCode(124) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.or_list_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_exp'] ); })()));
(List_v = ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp'] ); })()))));
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['concat_exp'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.or_list_exp;  // v8 bug workaround
  // method rule
  Perlito6$Grammar$Regex.rule = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return (and((String.fromCharCode(124) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.or_list_exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_or_list: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['or_list_exp'] ); })())}; tmp.__proto__ = Rul$Or; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar$Regex.rule;  // v8 bug workaround
})()
;    // use v6
;// class Perlito6::Grammar
if (typeof Perlito6$Grammar !== 'object') {
  Perlito6$Grammar = function() {};
  Perlito6$Grammar = new Perlito6$Grammar;
  Perlito6$Grammar.isa = function (s) { return s == 'Perlito6::Grammar'; };
  Perlito6$Grammar.perl = function () { return 'Perlito6::Grammar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Grammar;
  // method unless
  Perlito6$Grammar.unless = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(and((and(('u' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('n' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'unless' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_otherwise: v_body}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.unless;  // v8 bug workaround
  // method if
  Perlito6$Grammar.if = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and((and(('i' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('f' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp2(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

    var v_otherwise = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
(v_otherwise = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp2'] ); })()))['exp'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'if' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    if ( bool(( bool(((v_otherwise != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'else' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    if ( bool(isa(v_otherwise, 'Lit::Hash')) ) { (function () {
(v_otherwise = (function () { var tmp = {v_stmts: v_otherwise.hash1()}; tmp.__proto__ = Lit$Block; return tmp; })());;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body,v_otherwise: v_otherwise}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('s' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.if(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['if']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'if' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body,v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['if'] ); })()));
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'if' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body,v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()));
})()), function () { return 1; }))));
})()); }));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.if;  // v8 bug workaround
  // method when
  Perlito6$Grammar.when = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and((and(('w' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('h' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('n' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'when' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_parameters: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body}; tmp.__proto__ = When; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.when;  // v8 bug workaround
  // method for
  Perlito6$Grammar.for = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and((and(('f' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('o' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('r' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'when' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_topic: null,v_body: v_body}; tmp.__proto__ = For; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.for;  // v8 bug workaround
  // method while
  Perlito6$Grammar.while = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and((and(('w' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('h' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('i' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { (function () {
        die((string('Missing code block in ' + String.fromCharCode(39) + 'while' + String.fromCharCode(39))));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })(),v_body: v_body}; tmp.__proto__ = While; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.while;  // v8 bug workaround
  // method loop
  Perlito6$Grammar.loop = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and((and(('l' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and(('o' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('o' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (and(('p' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_body = null;

(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['end_block'] ); })());
    if ( bool(( bool(((v_body != null))) ? false : true)) ) { return (function () {
(v_body = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp'] ); })()))['exp'] ); })());
        if ( bool(isa(v_body, 'Lit::Block')) ) { return (function () {
            return((v_MATCH.v_capture = (function () { var tmp = {v_cond: (function () { var tmp = {v_bit: 1}; tmp.__proto__ = Val$Bit; return tmp; })(),v_body: v_body}; tmp.__proto__ = While; return tmp; })()));
        })(); }
        else { return (function () {
            return(die((string('Missing code block in ' + String.fromCharCode(39) + 'loop' + String.fromCharCode(39)))));
        })(); };
    })(); }
    else { return (function () {
        return(die((string(String.fromCharCode(39) + 'loop' + String.fromCharCode(39) + ' with parameters is not implemented'))));
    })(); };
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.loop;  // v8 bug workaround
})()
;// class Perlito6::Grammar
if (typeof Perlito6$Grammar !== 'object') {
  Perlito6$Grammar = function() {};
  Perlito6$Grammar = new Perlito6$Grammar;
  Perlito6$Grammar.isa = function (s) { return s == 'Perlito6::Grammar'; };
  Perlito6$Grammar.perl = function () { return 'Perlito6::Grammar.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Grammar;
  // method is_newline
  Perlito6$Grammar.is_newline = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(10) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and((String.fromCharCode(13) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and((String.fromCharCode(13) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and((String.fromCharCode(10) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.is_newline;  // v8 bug workaround
  // method not_newline
  Perlito6$Grammar.not_newline = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.not_newline;  // v8 bug workaround
  // method ident
  Perlito6$Grammar.ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.ident;  // v8 bug workaround
  // method full_ident
  Perlito6$Grammar.full_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.full_ident;  // v8 bug workaround
  // method namespace_before_ident
  Perlito6$Grammar.namespace_before_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.namespace_before_ident;  // v8 bug workaround
  // method optional_namespace_before_ident
  Perlito6$Grammar.optional_namespace_before_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.namespace_before_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['namespace_before_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['namespace_before_ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(1, function () { return (or(((function () { 
    return((v_MATCH.v_capture = ''));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.optional_namespace_before_ident;  // v8 bug workaround
  // method pod_begin
  Perlito6$Grammar.pod_begin = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and((String.fromCharCode(61) + 'end' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.not_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.not_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.pod_begin(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.pod_begin;  // v8 bug workaround
  // method ws
  Perlito6$Grammar.ws = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((and((String.fromCharCode(35) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.not_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((and((String.fromCharCode(61) + 'begin' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.pod_begin(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and((String.fromCharCode(61) + 'for' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.pod_begin(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.space(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.ws;  // v8 bug workaround
  // method opt_ws
  Perlito6$Grammar.opt_ws = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.opt_ws;  // v8 bug workaround
  // method opt_ws2
  Perlito6$Grammar.opt_ws2 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.opt_ws2;  // v8 bug workaround
  // method opt_ws3
  Perlito6$Grammar.opt_ws3 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.opt_ws3;  // v8 bug workaround
  // method grammar
  Perlito6$Grammar.grammar = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_name: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident'] ); })()),v_body: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = CompUnit; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.grammar;  // v8 bug workaround
  // method declarator
  Perlito6$Grammar.declarator = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(('my' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('state' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('has' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.declarator;  // v8 bug workaround
  // method exp_stmts2
  Perlito6$Grammar.exp_stmts2 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.exp_stmts2;  // v8 bug workaround
  // method exp
  Perlito6$Grammar.exp = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Expression.exp_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.exp_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.exp_parse'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.exp;  // v8 bug workaround
  // method exp2
  Perlito6$Grammar.exp2 = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Expression.exp_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.exp_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.exp_parse'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.exp2;  // v8 bug workaround
  // method opt_ident
  Perlito6$Grammar.opt_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(1, function () { return (or(((function () { 
    return((v_MATCH.v_capture = 'postcircumfix:<( )>'));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.opt_ident;  // v8 bug workaround
  // method opt_type
  Perlito6$Grammar.opt_type = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(1, function () { return (or(((function () { 
    return((v_MATCH.v_capture = ''));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.opt_type;  // v8 bug workaround
  // method var_sigil
  Perlito6$Grammar.var_sigil = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(38) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.var_sigil;  // v8 bug workaround
  // method var_twigil
  Perlito6$Grammar.var_twigil = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(33) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(94) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('*' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.var_twigil;  // v8 bug workaround
  // method var_name
  Perlito6$Grammar.var_name = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(47) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digit']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.var_name;  // v8 bug workaround
  // method var_ident
  Perlito6$Grammar.var_ident = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_sigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_sigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_twigil']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.optional_namespace_before_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['optional_namespace_before_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_sigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_sigil'] ); })()),v_twigil: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_twigil'] ); })()),v_namespace: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['optional_namespace_before_ident'] ); })()),v_name: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_name'] ); })())}; tmp.__proto__ = Var; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.var_ident;  // v8 bug workaround
  // method exponent
  Perlito6$Grammar.exponent = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('E' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(('+' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('-' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})()); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.exponent;  // v8 bug workaround
  // method val_num
  Perlito6$Grammar.val_num = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exponent(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exponent(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exponent(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); })));
})()); }));
})()); })));
})()); }));
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_num: string(v_MATCH)}; tmp.__proto__ = Val$Num; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.val_num;  // v8 bug workaround
  // method char_any
  Perlito6$Grammar.char_any = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.char_any;  // v8 bug workaround
  // method char_any_single_quote
  Perlito6$Grammar.char_any_single_quote = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.char_any_single_quote;  // v8 bug workaround
  // method single_quoted_unescape
  Perlito6$Grammar.single_quoted_unescape = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and(and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(92)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(39)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(92)) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any_single_quote(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_single_quote']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_single_quote'] ); })()) + string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })()))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((1));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.single_quoted_unescape;  // v8 bug workaround
  // method char_any_double_quote
  Perlito6$Grammar.char_any_double_quote = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(((function () { 
    return(and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.char_any_double_quote;  // v8 bug workaround
  // method double_quoted_unescape
  Perlito6$Grammar.double_quoted_unescape = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(92) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and((and(('c' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and((and(('[' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits'] ); })()))));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digits(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = String.fromCharCode(num((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['digits'] ); })()))));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and(('e' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (or(((function () { 
    return((v_MATCH.v_capture = String.fromCharCode(num(27))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and(('n' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (string(String.fromCharCode(10)))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and((and(('t' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return (or(((function () { 
    return((v_MATCH.v_capture = String.fromCharCode(num(9))));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any_double_quote(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_double_quote']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any_double_quote'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.double_quoted_unescape;  // v8 bug workaround
  // method double_quoted_buf
  Perlito6$Grammar.double_quoted_buf = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(((function () { 
    return(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and((String.fromCharCode(36) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Expression.operator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.operator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.operator'] ); })()))[1]));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and((String.fromCharCode(64) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Expression.operator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.operator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('[]' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.operator'] ); })()))[1]));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and((and((String.fromCharCode(37) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_twigil(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Expression.operator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.operator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) + String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.operator'] ); })()))[1]));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.char_any(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['char_any'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_block: (function () { var tmp = {v_stmts: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = Do; return tmp; })()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.double_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_unescape'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.double_quoted_buf;  // v8 bug workaround
  // method val_buf
  Perlito6$Grammar.val_buf = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and((and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.double_quoted_buf(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('double_quoted_buf')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()); }), function () { return (and((String.fromCharCode(34) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    var v_args = null;

(v_args = (function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf'] ); })());
    if ( bool(( bool(v_args) ? false : true)) ) { return (function () {
        return((v_MATCH.v_capture = (function () { var tmp = {v_buf: ''}; tmp.__proto__ = Val$Buf; return tmp; })()));
    })(); }
    else { return (function () {
        return((v_MATCH.v_capture = (function () { var tmp = {v_namespace: '',v_code: 'list:<' + String.fromCharCode(126) + '>',v_arguments: (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].capture() ) }; return out; })(((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['double_quoted_buf'] ); })()))}; tmp.__proto__ = Apply; return tmp; })()));
    })(); };
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.single_quoted_unescape(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(39) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_buf: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['single_quoted_unescape'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.val_buf;  // v8 bug workaround
  // method digits
  Perlito6$Grammar.digits = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.digits;  // v8 bug workaround
  // method val_int
  Perlito6$Grammar.val_int = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

    var v_count = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
(v_count = 0);
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.digit(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());
(v_count = add(v_count, 1));; })() };
(v_MATCH.v_to = v_last_pos);
    return((v_count > 0));
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_int: string(v_MATCH)}; tmp.__proto__ = Val$Int; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.val_int;  // v8 bug workaround
  // method exp_stmts
  Perlito6$Grammar.exp_stmts = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_match_null = null;

    var v_last_pos = null;

(v_last_match_null = 0);
(v_last_pos = v_MATCH.to());
    for ( ; bool(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Expression.delimited_statement(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('Perlito6::Expression.delimited_statement')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.delimited_statement'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.delimited_statement']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((v_last_match_null < 2)); }));  ) { (function () {         if ( bool((v_last_pos == v_MATCH.to())) ) { (function () {
(v_last_match_null = add(v_last_match_null, 1));;
        })(); }
        else { (function () {
(v_last_match_null = 0);;
        })(); };
(v_last_pos = v_MATCH.to());; })() };
(v_MATCH.v_to = v_last_pos);
    return(1);
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].capture() ) }; return out; })((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.delimited_statement'] ); })())));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.exp_stmts;  // v8 bug workaround
  // method opt_name
  Perlito6$Grammar.opt_name = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('ident')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ident']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.opt_name;  // v8 bug workaround
  // method var_invocant
  Perlito6$Grammar.var_invocant = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and((':' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_ident'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_sigil: String.fromCharCode(36),v_twigil: '',v_name: 'self'}; tmp.__proto__ = Var; return tmp; })()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.var_invocant;  // v8 bug workaround
  // method args_sig
  Perlito6$Grammar.args_sig = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.var_invocant(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_invocant']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Expression.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_invocant: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['var_invocant'] ); })()),v_positional: Perlito6$Expression.expand_list((function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.list_parse'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.list_parse'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Expression.list_parse'] ); })()))['exp'] ); })()),v_named: (function () { 
    var Hash_a = {};

    return(Hash_a);
})()}; tmp.__proto__ = Sig; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.args_sig;  // v8 bug workaround
  // method method_sig
  Perlito6$Grammar.method_sig = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.args_sig(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['args_sig']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((')' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['args_sig'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_invocant: (function () { var tmp = {v_sigil: String.fromCharCode(36),v_twigil: '',v_name: 'self'}; tmp.__proto__ = Var; return tmp; })(),v_positional: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_named: (function () { 
    var Hash_a = {};

    return(Hash_a);
})()}; tmp.__proto__ = Sig; return tmp; })()));
})()), function () { return 1; }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.method_sig;  // v8 bug workaround
  // method method_def
  Perlito6$Grammar.method_def = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.method_sig(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return(die('Syntax Error in method ' + String.fromCharCode(39) + '.', scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['name'] ); })()), String.fromCharCode(39) + ' near pos' + String.fromCharCode(61), v_MATCH.to()));
})()), function () { return 1; }))));
})()); }));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_name: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name'] ); })()),v_sig: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig'] ); })()),v_block: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = Method; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.method_def;  // v8 bug workaround
  // method sub_def
  Perlito6$Grammar.sub_def = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.method_sig(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return(die('Syntax Error in sub ' + String.fromCharCode(39), scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['name'] ); })()), String.fromCharCode(39)));
})()), function () { return 1; }))));
})()); }));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { var tmp = {v_name: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name'] ); })()),v_sig: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['method_sig'] ); })()),v_block: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['exp_stmts'] ); })())}; tmp.__proto__ = Sub; return tmp; })()));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.sub_def;  // v8 bug workaround
  // method token
  Perlito6$Grammar.token = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar$Regex.rule(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar::Regex.rule']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    var v_source = null;

    var v_ast = null;

(v_source = (string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['opt_name'] ); })()) + string(' ( ' + String.fromCharCode(36) + 'grammar: ' + String.fromCharCode(36) + 'str, ' + String.fromCharCode(36) + 'pos ) ' + String.fromCharCode(123) + ' ') + string('my ' + String.fromCharCode(36) + 'MATCH' + String.fromCharCode(59) + ' ' + String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(61) + ' Perlito6::Match.new( str ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'str, from ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'pos, to ' + String.fromCharCode(61) + '> ' + String.fromCharCode(36) + 'pos, bool ' + String.fromCharCode(61) + '> 1 )' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH.bool ' + String.fromCharCode(61) + ' ( ') + string((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar::Regex.rule'] ); })())).emit_perl6()) + string(')' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(36) + 'MATCH ' + String.fromCharCode(125))));
(v_ast = Perlito6$Grammar.method_def(v_source, 0));
    return((v_MATCH.v_capture = scalar(v_ast)));
})()), function () { return 1; })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Grammar.token;  // v8 bug workaround
        // use Perlito6::Expression
;        // use Perlito6::Grammar::Regex
;        // use Perlito6::Grammar::Control
;})()
;    // use v6
;    // use v6
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor name
  CompUnit.v_name = null;
  CompUnit.name = function () { return this.v_name; };
  // accessor body
  CompUnit.v_body = null;
  CompUnit.body = function () { return this.v_body; };
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // accessor int
  Val$Int.v_int = null;
  Val$Int.int = function () { return this.v_int; };
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // accessor bit
  Val$Bit.v_bit = null;
  Val$Bit.bit = function () { return this.v_bit; };
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // accessor num
  Val$Num.v_num = null;
  Val$Num.num = function () { return this.v_num; };
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // accessor buf
  Val$Buf.v_buf = null;
  Val$Buf.buf = function () { return this.v_buf; };
})()
;// class Lit::Block
if (typeof Lit$Block !== 'object') {
  Lit$Block = function() {};
  Lit$Block = new Lit$Block;
  Lit$Block.isa = function (s) { return s == 'Lit::Block'; };
  Lit$Block.perl = function () { return 'Lit::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Block;
  // accessor sig
  Lit$Block.v_sig = null;
  Lit$Block.sig = function () { return this.v_sig; };
  // accessor stmts
  Lit$Block.v_stmts = null;
  Lit$Block.stmts = function () { return this.v_stmts; };
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // accessor array1
  Lit$Array.v_array1 = null;
  Lit$Array.array1 = function () { return this.v_array1; };
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // accessor hash1
  Lit$Hash.v_hash1 = null;
  Lit$Hash.hash1 = function () { return this.v_hash1; };
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // accessor obj
  Index.v_obj = null;
  Index.obj = function () { return this.v_obj; };
  // accessor index_exp
  Index.v_index_exp = null;
  Index.index_exp = function () { return this.v_index_exp; };
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // accessor obj
  Lookup.v_obj = null;
  Lookup.obj = function () { return this.v_obj; };
  // accessor index_exp
  Lookup.v_index_exp = null;
  Lookup.index_exp = function () { return this.v_index_exp; };
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // accessor sigil
  Var.v_sigil = null;
  Var.sigil = function () { return this.v_sigil; };
  // accessor twigil
  Var.v_twigil = null;
  Var.twigil = function () { return this.v_twigil; };
  // accessor namespace
  Var.v_namespace = null;
  Var.namespace = function () { return this.v_namespace; };
  // accessor name
  Var.v_name = null;
  Var.name = function () { return this.v_name; };
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // accessor name
  Proto.v_name = null;
  Proto.name = function () { return this.v_name; };
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // accessor invocant
  Call.v_invocant = null;
  Call.invocant = function () { return this.v_invocant; };
  // accessor hyper
  Call.v_hyper = null;
  Call.hyper = function () { return this.v_hyper; };
  // accessor method
  Call.v_method = null;
  Call.method = function () { return this.v_method; };
  // accessor arguments
  Call.v_arguments = null;
  Call.arguments = function () { return this.v_arguments; };
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // accessor code
  Apply.v_code = null;
  Apply.code = function () { return this.v_code; };
  // accessor arguments
  Apply.v_arguments = null;
  Apply.arguments = function () { return this.v_arguments; };
  // accessor namespace
  Apply.v_namespace = null;
  Apply.namespace = function () { return this.v_namespace; };
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // accessor cond
  If.v_cond = null;
  If.cond = function () { return this.v_cond; };
  // accessor body
  If.v_body = null;
  If.body = function () { return this.v_body; };
  // accessor otherwise
  If.v_otherwise = null;
  If.otherwise = function () { return this.v_otherwise; };
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // accessor init
  While.v_init = null;
  While.init = function () { return this.v_init; };
  // accessor cond
  While.v_cond = null;
  While.cond = function () { return this.v_cond; };
  // accessor continue
  While.v_continue = null;
  While.continue = function () { return this.v_continue; };
  // accessor body
  While.v_body = null;
  While.body = function () { return this.v_body; };
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // accessor cond
  For.v_cond = null;
  For.cond = function () { return this.v_cond; };
  // accessor body
  For.v_body = null;
  For.body = function () { return this.v_body; };
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // accessor decl
  Decl.v_decl = null;
  Decl.decl = function () { return this.v_decl; };
  // accessor type
  Decl.v_type = null;
  Decl.type = function () { return this.v_type; };
  // accessor var
  Decl.v_var = null;
  Decl.var = function () { return this.v_var; };
})()
;// class Sig
if (typeof Sig !== 'object') {
  Sig = function() {};
  Sig = new Sig;
  Sig.isa = function (s) { return s == 'Sig'; };
  Sig.perl = function () { return 'Sig.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sig;
  // accessor invocant
  Sig.v_invocant = null;
  Sig.invocant = function () { return this.v_invocant; };
  // accessor positional
  Sig.v_positional = null;
  Sig.positional = function () { return this.v_positional; };
  // accessor named
  Sig.v_named = null;
  Sig.named = function () { return this.v_named; };
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // accessor name
  Method.v_name = null;
  Method.name = function () { return this.v_name; };
  // accessor sig
  Method.v_sig = null;
  Method.sig = function () { return this.v_sig; };
  // accessor block
  Method.v_block = null;
  Method.block = function () { return this.v_block; };
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // accessor name
  Sub.v_name = null;
  Sub.name = function () { return this.v_name; };
  // accessor sig
  Sub.v_sig = null;
  Sub.sig = function () { return this.v_sig; };
  // accessor block
  Sub.v_block = null;
  Sub.block = function () { return this.v_block; };
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // accessor block
  Do.v_block = null;
  Do.block = function () { return this.v_block; };
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // accessor mod
  Use.v_mod = null;
  Use.mod = function () { return this.v_mod; };
})()
;    // use Perlito6::AST
;// class Perl5
if (typeof Perl5 !== 'object') {
  Perl5 = function() {};
  Perl5 = new Perl5;
  Perl5.isa = function (s) { return s == 'Perl5'; };
  Perl5.perl = function () { return 'Perl5.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perl5;
  var Hash_safe_char = {};
  // sub tab
  Perl5.tab = function (v_level) {
        try {
            return(str_replicate((string('    ')), v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perl5.tab;  // v8 bug workaround
  // sub escape_string
  Perl5.escape_string = function (v_s) {
        try {
            var List_out = [];

            var v_tmp = null;

(v_tmp = '');
            if ( bool((v_s == '')) ) { (function () {
                throw((string(String.fromCharCode(39) + String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_i) {                 var v_c = null;

(v_c = (v_s || "").substr(v_i, 1));
                if ( bool(or(or(or((and(((v_c >= 'a')), function () { return ((v_c <= 'z')); })), function () { return (and(((v_c >= 'A')), function () { return ((v_c <= 'Z')); })); }), function () { return (and(((v_c >= '0')), function () { return ((v_c <= '9')); })); }), function () { return (Hash_safe_char).hasOwnProperty(v_c); })) ) { (function () {
(v_tmp = (string(v_tmp) + string(v_c)));;
                })(); }
                else { (function () {
                    if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
List_out.push((string('chr(') + string((function () { 
    return((v_c).charCodeAt(0));
})()) + string(')')));
(v_tmp = '');;
                })(); };; })(a_[i_]) } })((function (a) { for (var i=0, l=(chars(v_s) - 1); i<=l; ++i){ a.push(i) }; return a })([]));
            if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(List_out.join(' . '));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perl5.escape_string;  // v8 bug workaround
(Hash_safe_char = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['_']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[',']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['.']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[':']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['-']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['+']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['*']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[' ']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['(']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[')']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['<']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['>']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['[']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[']']  = 1); })();
    return(Hash_a);
})());})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // method emit_perl5
  CompUnit.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  CompUnit.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var List_body = [];

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v__) {                 if ( bool((v__ != null)) ) { (function () {
                    push(List_body, v__);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            return((string(Perl5.tab(v_level)) + string((string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string('package ') + string(v_self.v_name) + string((string(String.fromCharCode(59)))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(add(v_level, 1))) + string('sub new ' + String.fromCharCode(123) + ' shift' + String.fromCharCode(59) + ' bless ' + String.fromCharCode(123) + ' ' + String.fromCharCode(64) + '_ ' + String.fromCharCode(125) + ', ' + String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34) + ' ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(List_body)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125)) + string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_perl5_indented;  // v8 bug workaround
  // sub emit_perl5_program
  CompUnit.emit_perl5_program = function (v_comp_units) {
        try {
            var v_str = null;

(v_str = (string('') + string((string('use v5' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use utf8' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use strict' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use warnings' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('no warnings (' + String.fromCharCode(39) + 'redefine' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'once' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'void' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'uninitialized' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'misc' + String.fromCharCode(39) + ', ' + String.fromCharCode(39) + 'recursion' + String.fromCharCode(39) + ')' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use Perlito6::Perl5::Runtime' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('use Perlito6::Perl5::Prelude' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('our ') + string(String.fromCharCode(36)) + string('MATCH ' + String.fromCharCode(61) + ' Perlito6::Match->new()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string(v_comp_unit.emit_perl5_indented(0))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string('1' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_perl5_program;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_perl5
  Val$Int.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Int.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_int)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_perl5_indented;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_perl5
  Val$Bit.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Bit.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_bit)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_perl5_indented;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_perl5
  Val$Num.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Num.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_num)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_perl5_indented;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_perl5
  Val$Buf.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Val$Buf.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(Perl5.escape_string(v_self.v_buf))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lit::Block
if (typeof Lit$Block !== 'object') {
  Lit$Block = function() {};
  Lit$Block = new Lit$Block;
  Lit$Block.isa = function (s) { return s == 'Lit::Block'; };
  Lit$Block.perl = function () { return 'Lit::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Block;
  // method emit_perl5
  Lit$Block.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lit$Block.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string((string('sub ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_stmts).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_perl5
  Lit$Array.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lit$Array.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_perl5_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_perl5
  Lit$Hash.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lit$Hash.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_perl5_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_perl5_indented;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_perl5
  Index.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Index.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(v_self.v_obj.emit_perl5_indented(v_level)) + string('->[') + string(v_self.v_index_exp.emit_perl5()) + string(']')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_perl5_indented;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_perl5
  Lookup.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Lookup.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(v_self.v_obj.emit_perl5_indented(v_level)) + string('->' + String.fromCharCode(123)) + string(v_self.v_index_exp.emit_perl5()) + string(String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_perl5_indented;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // method emit_perl5
  Var.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Var.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_table = null;

            var v_ns = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = String.fromCharCode(36)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = String.fromCharCode(36) + 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = String.fromCharCode(36) + 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = String.fromCharCode(36) + 'Code_'); })();
    return(Hash_a);
})());
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(v_self.v_namespace) + string('::')));;
            })(); }
            else { (function () {
                if ( bool(and(and(((v_self.v_sigil == String.fromCharCode(64))), function () { return ((v_self.v_twigil == '*')); }), function () { return ((v_self.v_name == 'ARGS')); })) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string('(' + String.fromCharCode(92) + String.fromCharCode(64) + 'ARGV)')));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_self.v_twigil == '.')) ) { (function () {
                    if ( bool((v_self.v_sigil == String.fromCharCode(37))) ) { (function () {
                        throw((string(Perl5.tab(v_level)) + string('(') + string('defined ' + String.fromCharCode(36) + 'self->' + String.fromCharCode(123)) + string(v_self.v_name) + string(String.fromCharCode(125) + ' ') + string(String.fromCharCode(63) + ' ' + String.fromCharCode(36) + 'self->' + String.fromCharCode(123)) + string(v_self.v_name) + string(String.fromCharCode(125) + ' ') + string(': (' + String.fromCharCode(36) + 'self->' + String.fromCharCode(123)) + string(v_self.v_name) + string((string(String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' bless(') + string(String.fromCharCode(123)) + string(String.fromCharCode(125) + ', ' + String.fromCharCode(39) + 'HASH' + String.fromCharCode(39) + ')))')))));;
                    })(); }
                    else { (function () {
                        if ( bool((v_self.v_sigil == String.fromCharCode(64))) ) { (function () {
                            throw((string(Perl5.tab(v_level)) + string('(') + string('defined ' + String.fromCharCode(36) + 'self->' + String.fromCharCode(123)) + string(v_self.v_name) + string(String.fromCharCode(125) + ' ') + string(String.fromCharCode(63) + ' ' + String.fromCharCode(36) + 'self->' + String.fromCharCode(123)) + string(v_self.v_name) + string(String.fromCharCode(125) + ' ') + string(': (' + String.fromCharCode(36) + 'self->' + String.fromCharCode(123)) + string(v_self.v_name) + string((string(String.fromCharCode(125) + ' ' + String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(61) + ' bless([], ' + String.fromCharCode(39) + 'ARRAY' + String.fromCharCode(39) + ')))')))));;
                        })(); }
                        else { (function () {
                            throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(36) + 'self->' + String.fromCharCode(123)) + string(v_self.v_name) + string(String.fromCharCode(125))));;
                        })(); };;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_self.v_name == String.fromCharCode(47))) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            throw((string(Perl5.tab(v_level)) + string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_ns) + string(v_self.v_name)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_perl5_indented;  // v8 bug workaround
  // method plain_name
  Var.plain_name = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(v_self.v_namespace) + string('::') + string(v_self.v_name)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_self.v_name);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.plain_name;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_perl5
  Proto.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Proto.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perl5.tab(v_level)) + string(v_self.v_name)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_perl5_indented;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  var Hash_method_perl5 = {};
  // method emit_perl5
  Call.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Call.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

            var v_call = null;

(v_invocant = v_self.v_invocant.emit_perl5());
            if ( bool((v_invocant == 'self')) ) { (function () {
(v_invocant = String.fromCharCode(36) + 'self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((Hash_method_perl5).hasOwnProperty(v_self.v_method)) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string('bless [ map ' + String.fromCharCode(123) + ' ') + string((function () { if (Hash_method_perl5 == null) { Hash_method_perl5 = {} }; return (Hash_method_perl5[v_self.v_method] ); })()) + string('( ' + String.fromCharCode(36) + '_, ') + string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')') + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(64) + String.fromCharCode(123) + '( ') + string(v_invocant) + string(' )') + string(String.fromCharCode(125) + ' ], ' + String.fromCharCode(34) + 'ARRAY' + String.fromCharCode(34))));;
                })(); }
                else { (function () {
                    throw((string(Perl5.tab(v_level)) + string((function () { if (Hash_method_perl5 == null) { Hash_method_perl5 = {} }; return (Hash_method_perl5[v_self.v_method] ); })()) + string('(') + string(v_invocant) + string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'push')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('push( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'unshift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('unshift( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'pop')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('pop( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'shift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('shift( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'elems')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('scalar( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_invocant) + string(String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_meth == 'postcircumfix:<( )>')) ) { (function () {
(v_meth = '');;
            })(); }
            else { (function () {
                null;
            })(); };
(v_call = (string('->') + string(v_meth) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));
            if ( bool((v_self.v_hyper)) ) { return (function () {
                if ( bool(( bool((and(isa(v_self.v_invocant, 'Apply'), function () { return (v_self.v_invocant.code() == 'prefix:<' + String.fromCharCode(64) + '>'); }))) ? false : true)) ) { (function () {
(v_invocant = (string(String.fromCharCode(64) + String.fromCharCode(123) + '( ') + string(v_invocant) + string(' )' + String.fromCharCode(125))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string(Perl5.tab(v_level)) + string('[ map ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + '_') + string(v_call) + string(' ' + String.fromCharCode(125) + ' ') + string(v_invocant) + string(' ]')));
            })(); }
            else { return (function () {
                return((string(Perl5.tab(v_level)) + string(v_invocant) + string(v_call)));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_perl5_indented;  // v8 bug workaround
(Hash_method_perl5 = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['perl']  = 'Main::perl'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['id']  = 'Main::id'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['yaml']  = 'Main::yaml'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['say']  = 'Main::say'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['join']  = 'Main::join'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['split']  = 'Main::split'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['chars']  = 'Main::chars'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['isa']  = 'Main::isa'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['pairs']  = 'Main::pairs'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['keys']  = 'Main::keys'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['values']  = 'Main::values'); })();
    return(Hash_a);
})());})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  var Hash_op_prefix_perl5 = {};
  var Hash_op_infix_perl5 = {};
  // method emit_perl5
  Apply.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Apply.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_apply = null;

            var v_ns = null;

            var v_code = null;

(v_apply = v_self.op_assign());
            if ( bool(v_apply) ) { (function () {
                throw(v_apply.emit_perl5_indented(v_level));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(v_self.v_namespace) + string('::')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = (string(v_ns) + string(v_self.v_code)));
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string(Perl5.tab(v_level)) + string('(') + string(v_self.v_code.emit_perl5()) + string(')->(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); };
            if ( bool((Hash_op_infix_perl5).hasOwnProperty(v_code)) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join((function () { if (Hash_op_infix_perl5 == null) { Hash_op_infix_perl5 = {} }; return (Hash_op_infix_perl5[v_code] ); })())) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((Hash_op_prefix_perl5).hasOwnProperty(v_code)) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string((function () { if (Hash_op_prefix_perl5 == null) { Hash_op_prefix_perl5 = {} }; return (Hash_op_prefix_perl5[v_code] ); })()) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(36) + 'self')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Mu')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('undef()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(' + String.fromCharCode(36) + 'MATCH->' + String.fromCharCode(123) + 'capture' + String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' (') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'array')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'pop')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('pop( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'push')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('push( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string((v_self.v_arguments[0]).emit_perl5()) + string(String.fromCharCode(125) + ', ') + string((v_self.v_arguments[1]).emit_perl5()) + string(' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'shift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('shift( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'unshift')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('unshift( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(36) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(String.fromCharCode(37) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:<++>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')++')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:<-->')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')--')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<..>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(bless [') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(' .. ')) + string((string('], ' + String.fromCharCode(39) + 'ARRAY' + String.fromCharCode(39) + ')')))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(Main::id(') + string((v_self.v_arguments[0]).emit_perl5()) + string(') eq Main::id(') + string((v_self.v_arguments[1]).emit_perl5()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(') + string(v_self.v_arguments[0].emit_perl5()) + string(' ' + String.fromCharCode(63) + ' ') + string(v_self.v_arguments[1].emit_perl5()) + string(' : ') + string(v_self.v_arguments[2].emit_perl5()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'circumfix:<( )>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string(v__NAMESPACE.emit_perl5_bind(v_self.v_arguments[0], v_self.v_arguments[1]))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'return')) ) { (function () {
                if ( bool(and(v_self.v_arguments, function () { return (elems(v_self.v_arguments) == 1); })) ) { (function () {
                    throw((string(Perl5.tab(v_level)) + string('return scalar (') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string(Perl5.tab(v_level)) + string('return (') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Perl5.tab(v_level)) + string(v_code) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_perl5_indented;  // v8 bug workaround
  // sub emit_perl5_bind
  Apply.emit_perl5_bind = function (v_parameters, v_arguments) {
        try {
            if ( bool(isa(v_parameters, 'Call')) ) { (function () {
                var v_a = null;

(v_a = v_parameters);
                throw((string('((') + string((v_a.invocant()).emit_perl5()) + string(')->' + String.fromCharCode(123)) + string(v_a.method()) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_perl5()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(64)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(37)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            return((string('(') + string(v_parameters.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_perl5()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_perl5_bind;  // v8 bug workaround
(Hash_op_prefix_perl5 = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['say']  = 'Main::say'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['print']  = 'Main::print'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['map']  = 'Main::map'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['grep']  = 'Main::grep'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['sort']  = 'Main::sort'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['warn']  = 'warn'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['Int']  = '0+'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['Num']  = '0+'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['bool']  = String.fromCharCode(33) + String.fromCharCode(33)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['prefix:<' + String.fromCharCode(126) + '>']  = String.fromCharCode(34) + String.fromCharCode(34) + '.'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['prefix:<' + String.fromCharCode(33) + '>']  = String.fromCharCode(33)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['prefix:<' + String.fromCharCode(63) + '>']  = String.fromCharCode(33) + String.fromCharCode(33)); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['prefix:<++>']  = '++'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['prefix:<-->']  = '--'); })();
    return(Hash_a);
})());(Hash_op_infix_perl5 = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['list:<' + String.fromCharCode(126) + '>']  = ' . '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<+>']  = ' + '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<->']  = ' - '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<*>']  = ' * '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(47) + '>']  = ' ' + String.fromCharCode(47) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<>>']  = ' > '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<<>']  = ' < '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<>' + String.fromCharCode(61) + '>']  = ' >' + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<<' + String.fromCharCode(61) + '>']  = ' <' + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<x>']  = ' x '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>']  = ' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>']  = ' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<and>']  = ' and '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<or>']  = ' or '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(47) + String.fromCharCode(47) + '>']  = ' ' + String.fromCharCode(47) + String.fromCharCode(47) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<eq>']  = ' eq '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<ne>']  = ' ne '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<le>']  = ' le '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<ge>']  = ' ge '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>']  = ' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>']  = ' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(61) + '>>']  = ' ' + String.fromCharCode(61) + '> '); })();
    return(Hash_a);
})());})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // method emit_perl5
  If.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  If.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            throw((string(Perl5.tab(v_level)) + string('if (') + string(v_self.v_cond.emit_perl5()) + string((string(') ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((( bool(v_self.v_body) ? (string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_body.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10))))) : ''))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125)))) + string((( bool(and(v_self.v_otherwise, function () { return elems(v_self.v_otherwise.stmts()); })) ? ((string(String.fromCharCode(10)) + string(Perl5.tab(v_level)) + string((string('else ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_otherwise.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125)))))) : '')))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_perl5_indented;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // method emit_perl5
  While.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  While.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Perl5.tab(v_level)) + string('for ( ') + string((( bool(v_self.v_init) ? (string(v_self.v_init.emit_perl5()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_cond) ? (string(v_cond.emit_perl5()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_self.v_continue) ? (string(v_self.v_continue.emit_perl5()) + string(' ')) : ' '))) + string(') ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_body.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_perl5_indented;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // method emit_perl5
  For.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  For.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

            var v_sig = null;

(v_cond = v_self.v_cond);
            if ( bool(( bool((and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); }))) ? false : true)) ) { (function () {
(v_cond = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_body.sig()) ) { (function () {
(v_sig = (string('my ') + string(v_self.v_body.sig().emit_perl5()) + string(' ')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(Perl5.tab(v_level)) + string('for ') + string(v_sig) + string('( ' + String.fromCharCode(64) + String.fromCharCode(123)) + string(v_cond.emit_perl5()) + string(String.fromCharCode(125) + ' ) ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_body.stmts()).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_perl5_indented;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_perl5
  Decl.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Decl.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_decl = null;

            var v_name = null;

            var v_str = null;

(v_decl = v_self.v_decl);
(v_name = v_self.v_var.plain_name());
            if ( bool((v_decl == 'has')) ) { (function () {
                throw((string(Perl5.tab(v_level)) + string('sub ') + string(v_name) + string(' ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + '_[0]->' + String.fromCharCode(123)) + string(v_name) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = (string('(') + string(v_self.v_decl) + string(' ') + string(v_self.v_type) + string(' ') + string(v_self.v_var.emit_perl5())));
            if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
(v_str = (string(v_str) + string(' ' + String.fromCharCode(61) + ' bless ' + String.fromCharCode(123) + String.fromCharCode(125) + ', ' + String.fromCharCode(39) + 'HASH' + String.fromCharCode(39) + ')')));;
            })(); }
            else { (function () {
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
(v_str = (string(v_str) + string(' ' + String.fromCharCode(61) + ' bless [], ' + String.fromCharCode(39) + 'ARRAY' + String.fromCharCode(39) + ')')));;
                })(); }
                else { (function () {
(v_str = (string(v_str) + string(')')));;
                })(); };;
            })(); };
            throw((string(Perl5.tab(v_level)) + string(v_str)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_perl5_indented;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_perl5
  Method.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Method.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_str = null;

            var v_i = null;

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str = '');
(v_i = 1);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = (string(v_str) + string((string(Perl5.tab(add(v_level, 1))) + string('my ') + string(v_field.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + '_[') + string(v_i) + string(']' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_pos));
            return((string(Perl5.tab(v_level)) + string('sub ') + string(v_self.v_name) + string((string(' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(Perl5.tab(add(v_level, 1))) + string('my ') + string(v_invocant.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + '_[0]' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(v_str) + string(string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_block)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10)))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_perl5_indented;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_perl5
  Sub.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Sub.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_pos = null;

            var v_str = null;

            var v_i = null;

(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_str = '');
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = (string(v_str) + string((string(Perl5.tab(add(v_level, 1))) + string('my ') + string(v_field.emit_perl5()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + '_[') + string(v_i) + string(']' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_pos));
            return((string(Perl5.tab(v_level)) + string('sub ') + string(v_self.v_name) + string((string(' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(v_str) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_self.v_block)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_perl5_indented;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_perl5
  Do.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Do.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            var v_block = null;

(v_block = v_self.simplify().block());
            return((string(Perl5.tab(v_level)) + string((string('do ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_perl5_indented(add(v_level, 1)) ) }; return out; })(v_block)).join((string(String.fromCharCode(59)) + string(String.fromCharCode(10))))) + string((string(String.fromCharCode(10)))) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(125))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_perl5_indented;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_perl5
  Use.emit_perl5 = function () {
    var v_self = this;
        try {
            return(v_self.emit_perl5_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_perl5;  // v8 bug workaround
  // method emit_perl5_indented
  Use.emit_perl5_indented = function (v_level) {
    var v_self = this;
        try {
            if ( bool((v_self.v_mod == 'v6')) ) { (function () {
                throw((string(String.fromCharCode(10)) + string(Perl5.tab(v_level)) + string((string(String.fromCharCode(35) + ' use ') + string(v_self.v_mod) + string(' ') + string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Perl5.tab(v_level)) + string('use ') + string(v_self.v_mod)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_perl5_indented;  // v8 bug workaround
})()
;// class Perlito6::Expression
if (typeof Perlito6$Expression !== 'object') {
  Perlito6$Expression = function() {};
  Perlito6$Expression = new Perlito6$Expression;
  Perlito6$Expression.isa = function (s) { return s == 'Perlito6::Expression'; };
  Perlito6$Expression.perl = function () { return 'Perlito6::Expression.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Expression;
  var v_reduce_to_ast = null;
  // sub expand_list
  Perlito6$Expression.expand_list = function (v_param_list) {
        try {
            if ( bool(and((isa(v_param_list, 'Apply')), function () { return (((v_param_list.code()) == 'list:<,>')); })) ) { return (function () {
                var v_args = null;

(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_v) {                     if ( bool((v_v != null)) ) { (function () {
v_args.push(v_v);;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_param_list.arguments())));
                throw(v_args);
            })(); }
            else { return (function () {
                if ( bool((v_param_list == '*undef*')) ) { return (function () {
                    throw((function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                })(); }
                else { return (function () {
                    throw((function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_param_list);
    return(List_a);
})());
                })(); };
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.expand_list;  // v8 bug workaround
  // sub block_or_hash
  Perlito6$Expression.block_or_hash = function (v_o) {
        try {
            var v_stmts = null;

            var v_stmt = null;

            if ( bool((v_o.sig() != null)) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_stmts = v_o.stmts());
            if ( bool(or((( bool(((v_stmts != null))) ? false : true)), function () { return (((elems(v_stmts)) == 0)); })) ) { (function () {
                throw((function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(((elems(v_stmts)) != 1)) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_stmt = v_stmts[0]);
            if ( bool(( bool((isa(v_stmt, 'Apply'))) ? false : true)) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(((v_stmt.code()) == 'infix:<' + String.fromCharCode(61) + '>>')) ) { (function () {
                throw((function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_stmt);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(((v_stmt.code()) != 'list:<,>')) ) { (function () {
                throw(v_o);;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return ((v_item.code()) == 'infix:<' + String.fromCharCode(61) + '>>'); })) ) { (function () {
                    throw((function () { var tmp = {v_hash1: v__NAMESPACE.expand_list(v_stmt)}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((v_stmt.arguments())));
            throw(v_o);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.block_or_hash;  // v8 bug workaround
  // sub pop_term
  Perlito6$Expression.pop_term = function (v_num_stack) {
        try {
            var v_v = null;

(v_v = v_num_stack.pop());
            if ( bool(isa(v_v, 'Array')) ) { (function () {
                if ( bool((v_v[1] == 'methcall_no_params')) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: null,v_method: v_v[2],v_hyper: v_v[3]}; tmp.__proto__ = Call; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'funcall_no_params')) ) { (function () {
(v_v = (function () { var tmp = {v_code: v_v[3],v_namespace: v_v[2]}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'methcall')) ) { (function () {
                    var v_param_list = null;

                    if ( bool((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['end_block'] ); })()) ) { (function () {
v_num_stack.unshift((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['end_block'] ); })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_param_list = v__NAMESPACE.expand_list((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['exp'] ); })()));
(v_v = (function () { var tmp = {v_invocant: null,v_method: v_v[2],v_arguments: v_param_list,v_hyper: v_v[4]}; tmp.__proto__ = Call; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'funcall')) ) { (function () {
                    var v_param_list = null;

                    if ( bool((function () { if ((v_v[4]) == null) { (v_v[4]) = {} }; return ((v_v[4])['end_block'] ); })()) ) { (function () {
v_num_stack.unshift((function () { if ((v_v[4]) == null) { (v_v[4]) = {} }; return ((v_v[4])['end_block'] ); })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_param_list = v__NAMESPACE.expand_list((function () { if ((v_v[4]) == null) { (v_v[4]) = {} }; return ((v_v[4])['exp'] ); })()));
(v_v = (function () { var tmp = {v_code: v_v[3],v_arguments: v_param_list,v_namespace: v_v[2]}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '( )')) ) { (function () {
                    var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
(v_v = (function () { var tmp = {v_code: 'circumfix:<( )>',v_arguments: v_param_list,v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '[ ]')) ) { (function () {
                    var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
(v_v = (function () { var tmp = {v_array1: v_param_list}; tmp.__proto__ = Lit$Array; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == 'block')) ) { (function () {
(v_v = (function () { var tmp = {v_stmts: v_v[2],v_sig: v_v[3]}; tmp.__proto__ = Lit$Block; return tmp; })());
(v_v = v__NAMESPACE.block_or_hash(v_v));
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '.( )')) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: null,v_method: 'postcircumfix:<( )>',v_arguments: v_v[2],v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '.[ ]')) ) { (function () {
(v_v = (function () { var tmp = {v_obj: null,v_index_exp: v_v[2]}; tmp.__proto__ = Index; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool((v_v[1] == '.' + String.fromCharCode(123) + ' ' + String.fromCharCode(125))) ) { (function () {
(v_v = (function () { var tmp = {v_obj: null,v_index_exp: v_v[2]}; tmp.__proto__ = Lookup; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa((v_v[1]), 'Array'), function () { return (((elems((v_v[1]))) == 2)); })) ) { (function () {
(v_v = (function () { var tmp = {v_code: 'pair',v_arguments: v_v[1],v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
                    throw(v_v);;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw(v_v[1]);;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_v);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.pop_term;  // v8 bug workaround
  // sub reduce_postfix
  Perlito6$Expression.reduce_postfix = function (v_op, v_value) {
        try {
            var v_v = null;

(v_v = v_op);
            if ( bool((v_v[1] == 'methcall_no_params')) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: v_v[2],v_hyper: v_v[3]}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'funcall_no_params')) ) { (function () {
                die((string('unexpected function call')));
                push(v_v, v_value);
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'methcall')) ) { (function () {
                var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list((function () { if ((v_v[3]) == null) { (v_v[3]) = {} }; return ((v_v[3])['exp'] ); })()));
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: v_v[2],v_arguments: v_param_list,v_hyper: v_v[4]}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'funcall')) ) { (function () {
                die((string('unexpected function call')));
                push(v_v, v_value);
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '( )')) ) { (function () {
                var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
                if ( bool(and(isa(v_value, 'Apply'), function () { return ( bool(((v_value.arguments() != null))) ? false : true); })) ) { (function () {
(v_value.v_arguments = v_param_list);
                    throw(v_value);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_value, 'Call'), function () { return ( bool(((v_value.arguments() != null))) ? false : true); })) ) { (function () {
(v_value.v_arguments = v_param_list);
                    throw(v_value);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:<( )>',v_arguments: v_param_list,v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '[ ]')) ) { (function () {
(v_v = (function () { var tmp = {v_obj: v_value,v_index_exp: v_v[2]}; tmp.__proto__ = Index; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == 'block')) ) { (function () {
(v_v = (function () { var tmp = {v_obj: v_value,v_index_exp: (v_v[2])[0]}; tmp.__proto__ = Lookup; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '.( )')) ) { (function () {
                var v_param_list = null;

(v_param_list = v__NAMESPACE.expand_list(v_v[2]));
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:<( )>',v_arguments: v_param_list,v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '.[ ]')) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:<[ ]>',v_arguments: v_v[2],v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[1] == '.' + String.fromCharCode(123) + ' ' + String.fromCharCode(125))) ) { (function () {
(v_v = (function () { var tmp = {v_invocant: v_value,v_method: 'postcircumfix:<' + String.fromCharCode(123) + ' ' + String.fromCharCode(125) + '>',v_arguments: v_v[2],v_hyper: 0}; tmp.__proto__ = Call; return tmp; })());
                throw(v_v);;
            })(); }
            else { (function () {
                null;
            })(); };
            push(v_op, v_value);
            throw(v_op);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.reduce_postfix;  // v8 bug workaround
  // method capture_name
  Perlito6$Expression.capture_name = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('Perlito6::Grammar.ident')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.capture_name;  // v8 bug workaround
  // method hyper_op
  Perlito6$Expression.hyper_op = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and(('>>' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.hyper_op;  // v8 bug workaround
  // method operator
  Perlito6$Expression.operator = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(or(((function () { 
    return(and(and(and((and(('.(' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.paren_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((')' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('.( )');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('.[' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.square_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('.[ ]');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('.' + String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.curly_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['curly_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['curly_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.paren_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((')' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('( )');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('[' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.square_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((']' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('[ ]');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['square_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(('.<' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('<' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_buf: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })());
    return(List_a);
})());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('->' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    var v_block = null;

(v_block = (function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()))['end_block'] ); })());
    if ( bool(v_block.sig()) ) { (function () {
        die((string('Signature error in block')));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push(v_block.stmts());
List_a.push((function () { if ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) == null) { (scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })())) = {} }; return ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()))['exp'] ); })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and((and((String.fromCharCode(123) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.exp_stmts(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.exp_stmts']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (and((String.fromCharCode(125) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('block');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.exp_stmts'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('method' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.method_def(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.method_def']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.method_def'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('sub' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.sub_def(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.sub_def']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.sub_def'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('token' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.token(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.token']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.token'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('do' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.statement_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_block: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse'] ); })())}; tmp.__proto__ = Do; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(63) + String.fromCharCode(63) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.ternary_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ternary_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((String.fromCharCode(33) + String.fromCharCode(33) == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push(String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['ternary_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.var_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_ident'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and((String.fromCharCode(36) + '<' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.capture_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['capture_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and(('>' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_obj: (function () { var tmp = {v_sigil: String.fromCharCode(36),v_twigil: '',v_name: String.fromCharCode(47)}; tmp.__proto__ = Var; return tmp; })(),v_index_exp: (function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['capture_name'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })()}; tmp.__proto__ = Lookup; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Precedence.op_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Precedence.op_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Precedence.op_parse'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return (and((String.fromCharCode(61) + '>' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_buf: string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })())}; tmp.__proto__ = Val$Buf; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('True' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_bit: 1}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('False' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_bit: 0}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('and' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push('and');
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and((and(('not' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.word(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('op');
List_a.push('not');
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and((and(('use' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.full_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.full_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and((and(('-' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        if ( bool((v_MATCH).hasOwnProperty('Perlito6::Grammar.ident')) ) { (function () {
((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()).push(v_m2);;
        })(); }
        else { (function () {
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident']  = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_m2);
    return(List_a);
})()); })();;
        })(); };
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }));
})()));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_mod: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.full_ident'] ); })())}; tmp.__proto__ = Use; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(((function () { 
    return(and(('package' == (v_str || "").substr(v_MATCH.to(), 7)), function () { return ((v_MATCH.v_to = add(7, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('class' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('grammar' == (v_str || "").substr(v_MATCH.to(), 7)), function () { return ((v_MATCH.v_to = add(7, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('role' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); }))));
})()); }));
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.grammar(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.grammar']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.grammar'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.declarator(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.declarator']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.opt_type(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.opt_type']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.opt_ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.var_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_decl: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.declarator'] ); })()),v_type: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.opt_type'] ); })()),v_var: scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.var_ident'] ); })())}; tmp.__proto__ = Decl; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.hyper_op(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['hyper_op']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(and((and((':' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('methcall');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['hyper_op'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and((and(('(' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.paren_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (and((')' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('methcall');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
List_a.push((function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['end_block']  = null); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exp']  = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['paren_parse'] ); })())); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['terminated']  = 0); })();
    return(Hash_a);
})());
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['hyper_op'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('methcall_no_params');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['hyper_op'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.optional_namespace_before_ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.optional_namespace_before_ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.list_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('funcall');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.optional_namespace_before_ident'] ); })()));
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['list_parse'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(('.' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? true : false));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()), function () { return (or(((function () { 
    var v_namespace = null;

    var v_name = null;

(v_namespace = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.optional_namespace_before_ident'] ); })()));
(v_name = string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
    if ( bool(v_namespace) ) { (function () {
(v_name = (string(v_namespace) + string('::') + string(v_name)));;
    })(); }
    else { (function () {
        null;
    })(); };
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push((function () { var tmp = {v_name: v_name}; tmp.__proto__ = Proto; return tmp; })());
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('postfix_or_term');
List_a.push('funcall_no_params');
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.optional_namespace_before_ident'] ); })()));
List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; }))));
})()); }));
})()); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.val_num(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_num']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_num'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.val_int(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_int']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_int'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.val_buf(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_buf']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('term');
List_a.push(scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.val_buf'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('space');
List_a.push(' ');
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.operator;  // v8 bug workaround
  // method has_newline_after
  Perlito6$Expression.has_newline_after = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(((function () { 
    return(and((String.fromCharCode(35) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.is_newline(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.space(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.has_newline_after(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.has_newline_after;  // v8 bug workaround
  // method has_no_comma_or_colon_after
  Perlito6$Expression.has_no_comma_or_colon_after = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_tmp = null;

(v_tmp = v_MATCH);
(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_tmp.to(),v_to: v_tmp.to(),v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((',' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and((':' == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }))));
})()); }));
})()));
})()));
(v_tmp.v_bool = ( bool(v_MATCH) ? false : true));
(v_MATCH = v_tmp);
    return(( bool(v_MATCH) ? true : false));
})()); }), function () { return (and(('' != (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.has_no_comma_or_colon_after;  // v8 bug workaround
  // method list_parse
  Perlito6$Expression.list_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_is_first_token = null;

            var v_lexer_stack = null;

            var v_terminated = null;

            var v_last_token_was_space = null;

            var v_get_token = null;

            var v_prec = null;

            var v_res = null;

            var v_block = null;

            var v_result = null;

(v_last_pos = v_pos);
(v_is_first_token = true);
(v_lexer_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_terminated = 0);
(v_last_token_was_space = 1);
(v_get_token = function () {
    try {
        var v_v = null;

        if ( bool(elems(v_lexer_stack)) ) { (function () {
(v_v = v_lexer_stack.pop());
            if ( bool(and(and(v_is_first_token, function () { return ((v_v[0] == 'op')); }), function () { return ( bool((Perlito6$Precedence.is_fixity_type('prefix', v_v[1]))) ? false : true); })) ) { (function () {
(function () { if (v_v == null) { v_v = [] }; return (v_v[0]  = 'end'); })();;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); }
        else { (function () {
            var v_m = null;

(v_m = v_self.operator(v_str, v_last_pos));
            if ( bool(( bool(v_m) ? false : true)) ) { (function () {
                throw((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_v = scalar(v_m));
            if ( bool(and(and(v_is_first_token, function () { return ((v_v[0] == 'op')); }), function () { return ( bool((Perlito6$Precedence.is_fixity_type('prefix', v_v[1]))) ? false : true); })) ) { (function () {
(function () { if (v_v == null) { v_v = [] }; return (v_v[0]  = 'end'); })();;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_v[0] != 'end')) ) { (function () {
(v_last_pos = v_m.to());;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); };
        if ( bool(and(and((((v_v[0]) == 'postfix_or_term')), function () { return (((v_v[1]) == 'block')); }), function () { return v_last_token_was_space; })) ) { (function () {
            if ( bool(v_self.has_newline_after(v_str, v_last_pos)) ) { (function () {
(v_terminated = 1);
v_lexer_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                if ( bool(v_self.has_no_comma_or_colon_after(v_str, v_last_pos)) ) { (function () {
(v_terminated = 1);
v_lexer_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };;
        })(); }
        else { (function () {
            null;
        })(); };
(v_last_token_was_space = ((v_v[0] == 'space')));
(v_is_first_token = false);
        throw(v_v);;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});
(v_prec = (function () { var tmp = {v_get_token: v_get_token,v_reduce: v_reduce_to_ast,v_end_token: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('and');
List_a.push('or');
List_a.push(String.fromCharCode(33) + String.fromCharCode(33));
List_a.push(']');
List_a.push(')');
List_a.push(String.fromCharCode(125));
List_a.push(String.fromCharCode(59));
List_a.push('if');
List_a.push('else');
List_a.push('elsif');
List_a.push('unless');
List_a.push('when');
List_a.push('for');
List_a.push('while');
List_a.push('loop');
    return(List_a);
})()}; tmp.__proto__ = Perlito6$Precedence; return tmp; })());
(v_res = v_prec.precedence_parse());
            if ( bool((elems(v_res) == 0)) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exp']  = '*undef*'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['end_block']  = null); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['terminated']  = null); })();
    return(Hash_a);
})()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((elems(v_res) > 1)) ) { (function () {
(v_block = v_res.pop());
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_result = v__NAMESPACE.pop_term(v_res));
            if ( bool((elems(v_res) > 0)) ) { (function () {
(v_block = v_res.pop());
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exp']  = v_result); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['end_block']  = v_block); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['terminated']  = v_terminated); })();
    return(Hash_a);
})()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.list_parse;  // v8 bug workaround
  // method circumfix_parse
  Perlito6$Expression.circumfix_parse = function (v_str, v_pos, v_delimiter) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_get_token = null;

            var v_prec = null;

            var v_res = null;

(v_last_pos = v_pos);
(v_get_token = function () {
    try {
        var v_m = null;

        var v_v = null;

(v_m = v_self.operator(v_str, v_last_pos));
        if ( bool(( bool(v_m) ? false : true)) ) { (function () {
            die((string('Expected closing delimiter: ')), ((v_delimiter)), ' near ', v_last_pos);;
        })(); }
        else { (function () {
            null;
        })(); };
(v_v = scalar(v_m));
        if ( bool((v_v[0] != 'end')) ) { (function () {
(v_last_pos = v_m.to());;
        })(); }
        else { (function () {
            null;
        })(); };
        throw(v_v);;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});
(v_prec = (function () { var tmp = {v_get_token: v_get_token,v_reduce: v_reduce_to_ast,v_end_token: v_delimiter}; tmp.__proto__ = Perlito6$Precedence; return tmp; })());
(v_res = v_prec.precedence_parse());
(v_res = v__NAMESPACE.pop_term(v_res));
            if ( bool(( bool(((v_res != null))) ? false : true)) ) { (function () {
(v_res = '*undef*');;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: v_res}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.circumfix_parse;  // v8 bug workaround
  // method ternary_parse
  Perlito6$Expression.ternary_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(String.fromCharCode(33) + String.fromCharCode(33));
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.ternary_parse;  // v8 bug workaround
  // method curly_parse
  Perlito6$Expression.curly_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(String.fromCharCode(125));
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.curly_parse;  // v8 bug workaround
  // method square_parse
  Perlito6$Expression.square_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(']');
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.square_parse;  // v8 bug workaround
  // method paren_parse
  Perlito6$Expression.paren_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            throw(v_self.circumfix_parse(v_str, v_pos, (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(')');
    return(List_a);
})()));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.paren_parse;  // v8 bug workaround
  // method exp_parse
  Perlito6$Expression.exp_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_lexer_stack = null;

            var v_terminated = null;

            var v_get_token = null;

            var v_prec = null;

            var v_res = null;

            var v_block = null;

            var v_result = null;

(v_last_pos = v_pos);
(v_lexer_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_terminated = 0);
(v_get_token = function () {
    try {
        var v_v = null;

        if ( bool(elems(v_lexer_stack)) ) { (function () {
(v_v = v_lexer_stack.pop());;
        })(); }
        else { (function () {
            var v_m = null;

(v_m = v_self.operator(v_str, v_last_pos));
            if ( bool(( bool(v_m) ? false : true)) ) { (function () {
                throw((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_v = scalar(v_m));
            if ( bool((v_v[0] != 'end')) ) { (function () {
(v_last_pos = v_m.to());;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); };
        if ( bool(or(or(or(or((and((((v_v[0]) == 'postfix_or_term')), function () { return (((v_v[1]) == 'block')); })), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'Sub')); })); }), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'Method')); })); }), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'Do')); })); }), function () { return (and((((v_v[0]) == 'term')), function () { return (isa((v_v[1]), 'CompUnit')); })); })) ) { (function () {
            if ( bool(v_self.has_newline_after(v_str, v_last_pos)) ) { (function () {
(v_terminated = 1);
v_lexer_stack.push((function () { 
    var List_a = [];

    var List_v = [];

List_a.push('end');
List_a.push('*end*');
    return(List_a);
})());;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); }
        else { (function () {
            null;
        })(); };
        throw(v_v);;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});
(v_prec = (function () { var tmp = {v_get_token: v_get_token,v_reduce: v_reduce_to_ast,v_end_token: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(']');
List_a.push(')');
List_a.push(String.fromCharCode(125));
List_a.push(String.fromCharCode(59));
List_a.push('if');
List_a.push('else');
List_a.push('elsif');
List_a.push('unless');
List_a.push('when');
List_a.push('for');
List_a.push('while');
List_a.push('loop');
    return(List_a);
})()}; tmp.__proto__ = Perlito6$Precedence; return tmp; })());
(v_res = v_prec.precedence_parse());
            if ( bool((elems(v_res) == 0)) ) { (function () {
                throw((function () { var tmp = {v_bool: 0}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((elems(v_res) > 1)) ) { (function () {
(v_block = v_res.pop());
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_result = v__NAMESPACE.pop_term(v_res));
            if ( bool((elems(v_res) > 0)) ) { (function () {
(v_block = v_res.pop());
                if ( bool(( bool((isa(v_block, 'Lit::Block'))) ? false : true)) ) { (function () {
(v_block = (function () { var tmp = {v_stmts: v_block[2],v_sig: v_block[3]}; tmp.__proto__ = Lit$Block; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_last_pos,v_bool: 1,v_capture: (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exp']  = v_result); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['end_block']  = v_block); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['terminated']  = v_terminated); })();
    return(Hash_a);
})()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.exp_parse;  // v8 bug workaround
  // method exp_stmt
  Perlito6$Expression.exp_stmt = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.if(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.if']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.if'] ); })())));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.unless(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.unless']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.unless'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.when(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.when']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.when'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.for(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.for']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.for'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.while(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.while']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.while'] ); })())));
})()), function () { return 1; })); })));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.loop(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.loop']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.loop'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.exp_stmt;  // v8 bug workaround
  // method statement_modifier
  Perlito6$Expression.statement_modifier = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(or(or(or(or(((function () { 
    return(and(('if' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('unless' == (v_str || "").substr(v_MATCH.to(), 6)), function () { return ((v_MATCH.v_to = add(6, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('when' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('for' == (v_str || "").substr(v_MATCH.to(), 3)), function () { return ((v_MATCH.v_to = add(3, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('while' == (v_str || "").substr(v_MATCH.to(), 5)), function () { return ((v_MATCH.v_to = add(5, v_MATCH.to()))); }))));
})()); }), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return(((and(('loop' == (v_str || "").substr(v_MATCH.to(), 4)), function () { return ((v_MATCH.v_to = add(4, v_MATCH.to()))); }))));
})()); }));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.statement_modifier;  // v8 bug workaround
  // method delimited_statement
  Perlito6$Expression.delimited_statement = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and((and((String.fromCharCode(59) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); })), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(and(and(((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.statement_parse(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    return(and((String.fromCharCode(59) == (v_str || "").substr(v_MATCH.to(), 1)), function () { return ((v_MATCH.v_to = add(1, v_MATCH.to()))); }));
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return ((function () { 
    var v_last_pos = null;

(v_last_pos = v_MATCH.to());
    if ( bool(( bool(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ws(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})())) ? false : true)) ) { (function () {
(v_MATCH.v_to = v_last_pos);;
    })(); }
    else { (function () {
        null;
    })(); };
    return(1);
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['statement_parse'] ); })())));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.delimited_statement;  // v8 bug workaround
  // method statement_parse
  Perlito6$Expression.statement_parse = function (v_str, v_pos) {
    var v_self = this;
        try {
            var v_expr = null;

            var v_last_pos = null;

            var v_lexer_stack = null;

            var v_res = null;

            var v_modifier = null;

            var v_modifier_exp = null;

(v_last_pos = v_pos);
(v_lexer_stack = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_res = v_self.exp_stmt(v_str, v_pos));
            if ( bool(v_res) ) { (function () {
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_res = v_self.exp_parse(v_str, v_pos));
            if ( bool(( bool((v_res)) ? false : true)) ) { (function () {
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })(), 'Lit::Block')) ) { (function () {
(function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp']  = (function () { var tmp = {v_block: (function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })()}; tmp.__proto__ = Do; return tmp; })()); })();;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['end_block'] ); })()) ) { (function () {
                die((string('Unexpected block after expression near ')), v_pos);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['terminated'] ); })()) ) { (function () {
(v_res.v_capture = (function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_modifier = v_self.statement_modifier(v_str, v_res.to()));
            if ( bool(( bool((v_modifier)) ? false : true)) ) { (function () {
(v_res.v_capture = (function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
                throw(v_res);;
            })(); }
            else { (function () {
                null;
            })(); };
(v_modifier_exp = v_self.exp_parse(v_str, v_modifier.to()));
            if ( bool(( bool((v_modifier_exp)) ? false : true)) ) { (function () {
                die((string('Expected expression after ' + String.fromCharCode(39))), v_modifier, (string(String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['end_block'] ); })()) ) { (function () {
                die((string('Unexpected block after expression near ')), v_modifier.to());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_modifier = string(v_modifier));
            if ( bool((v_modifier == 'if')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_modifier == 'unless')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_modifier == 'while')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = While; return tmp; })()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_modifier == 'for')) ) { (function () {
                throw((function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_modifier_exp.to(),v_bool: 1,v_capture: (function () { var tmp = {v_cond: (function () { if ((scalar(v_modifier_exp)) == null) { (scalar(v_modifier_exp)) = {} }; return ((scalar(v_modifier_exp))['exp'] ); })(),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { if ((scalar(v_res)) == null) { (scalar(v_res)) = {} }; return ((scalar(v_res))['exp'] ); })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = For; return tmp; })()}; tmp.__proto__ = Perlito6$Match; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            return(die((string('Unexpected statement modifier ' + String.fromCharCode(39)) + string(v_modifier) + string(String.fromCharCode(39)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Expression.statement_parse;  // v8 bug workaround
        // use Perlito6::Precedence
;        // use Perlito6::Grammar
;        // use Perlito6::Perl5::Emitter
;(v_reduce_to_ast = function (v_op_stack, v_num_stack) {
    try {
        var v_last_op = null;

(v_last_op = v_op_stack.shift());
        if ( bool((v_last_op[0] == 'prefix')) ) { return (function () {
            return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('prefix:<') + string(v_last_op[1]) + string('>')),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
        })(); }
        else { return (function () {
            if ( bool((v_last_op[0] == 'postfix')) ) { return (function () {
                return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('postfix:<') + string(v_last_op[1]) + string('>')),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
            })(); }
            else { return (function () {
                if ( bool((v_last_op[0] == 'postfix_or_term')) ) { return (function () {
                    return(v_num_stack.push(v__NAMESPACE.reduce_postfix(v_last_op, v__NAMESPACE.pop_term(v_num_stack))));
                })(); }
                else { return (function () {
                    if ( bool(Perlito6$Precedence.is_assoc_type('list', v_last_op[1])) ) { return (function () {
                        var v_arg = null;

                        if ( bool((elems(v_num_stack) < 2)) ) { (function () {
                            var v_v2 = null;

(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
                            if ( bool(and((isa(v_v2, 'Apply')), function () { return ((v_v2.code() == ((string('list:<') + string(v_last_op[1]) + string('>'))))); })) ) { (function () {
(v_v2.arguments()).push(null);
v_num_stack.push(v_v2);;
                            })(); }
                            else { (function () {
                                push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('list:<') + string(v_last_op[1]) + string('>')),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_v2);
List_a.push(null);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
                            })(); };
                            throw(null);;
                        })(); }
                        else { (function () {
                            var v_v2 = null;

(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
(v_arg = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_v2);
    return(List_a);
})());;
                        })(); };
                        if ( bool(and(and((isa((v_arg[0]), 'Apply')), function () { return ((v_last_op[0] == 'infix')); }), function () { return (((v_arg[0]).code() == ((string('list:<') + string(v_last_op[1]) + string('>'))))); })) ) { (function () {
                            push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (v_arg[0]).code(),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

(List_v = (((v_arg[0]).arguments())));
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
List_a.push(v_arg[1]);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());
                            throw(null);;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
                        return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('list:<') + string(v_last_op[1]) + string('>')),v_arguments: v_arg}; tmp.__proto__ = Apply; return tmp; })()));
                    })(); }
                    else { return (function () {
                        if ( bool(Perlito6$Precedence.is_assoc_type('chain', v_last_op[1])) ) { return (function () {
                            var v_v2 = null;

                            var v_arg = null;

                            if ( bool((elems(v_num_stack) < 2)) ) { (function () {
                                die((string('Missing value after operator ') + string(v_last_op[1])));;
                            })(); }
                            else { (function () {
                                null;
                            })(); };
(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
(v_arg = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_v2);
    return(List_a);
})());
                            return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('infix:<') + string(v_last_op[1]) + string('>')),v_arguments: v_arg}; tmp.__proto__ = Apply; return tmp; })()));
                        })(); }
                        else { return (function () {
                            if ( bool((v_last_op[0] == 'ternary')) ) { return (function () {
                                var v_v2 = null;

                                if ( bool(((elems(v_num_stack) < 2))) ) { (function () {
                                    die((string('Missing value after ternary operator')));;
                                })(); }
                                else { (function () {
                                    null;
                                })(); };
(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
                                return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('ternary:<') + string(v_last_op[1]) + string('>')),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_last_op[2]);
List_a.push(v_v2);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
                            })(); }
                            else { return (function () {
                                var v_v2 = null;

                                if ( bool(((elems(v_num_stack) < 2))) ) { (function () {
                                    die((string('missing value after operator ' + String.fromCharCode(39)) + string(v_last_op[1]) + string((string(String.fromCharCode(39))))));;
                                })(); }
                                else { (function () {
                                    null;
                                })(); };
(v_v2 = v__NAMESPACE.pop_term(v_num_stack));
                                return(push(v_num_stack, (function () { var tmp = {v_namespace: '',v_code: (string('infix:<') + string(v_last_op[1]) + string('>')),v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v__NAMESPACE.pop_term(v_num_stack));
List_a.push(v_v2);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })()));
                            })(); };
                        })(); };
                    })(); };
                })(); };
            })(); };
        })(); };;
    }
    catch(err) {
        if ( err instanceof Error ) {
            throw(err);
        }
        else {
            return(err);
        }
    }
});})()
;    // use v6
;// class Perlito6::Go::LexicalBlock
if (typeof Perlito6$Go$LexicalBlock !== 'object') {
  Perlito6$Go$LexicalBlock = function() {};
  Perlito6$Go$LexicalBlock = new Perlito6$Go$LexicalBlock;
  Perlito6$Go$LexicalBlock.isa = function (s) { return s == 'Perlito6::Go::LexicalBlock'; };
  Perlito6$Go$LexicalBlock.perl = function () { return 'Perlito6::Go::LexicalBlock.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Go$LexicalBlock;
  // accessor block
  Perlito6$Go$LexicalBlock.v_block = null;
  Perlito6$Go$LexicalBlock.block = function () { return this.v_block; };
  // accessor needs_return
  Perlito6$Go$LexicalBlock.v_needs_return = null;
  Perlito6$Go$LexicalBlock.needs_return = function () { return this.v_needs_return; };
  // accessor top_level
  Perlito6$Go$LexicalBlock.v_top_level = null;
  Perlito6$Go$LexicalBlock.top_level = function () { return this.v_top_level; };
  // method emit_go
  Perlito6$Go$LexicalBlock.emit_go = function () {
    var v_self = this;
        try {
            var v_str = null;

            var Hash_decl_seen = {};

            var v_last_statement = null;

            if ( bool(( bool((v_self.v_block)) ? false : true)) ) { (function () {
                throw('');;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl1) {                 var v_decl = null;

(v_decl = v_decl1);
                if ( bool(and(and(isa(v_decl, 'Bind'), function () { return isa((v_decl.parameters()), 'Decl'); }), function () { return (((v_decl.parameters()).decl() == 'my')); })) ) { (function () {
(v_decl = v_decl.parameters());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = ((v_decl).var()).emit_go());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string(v_decl.emit_go_init())));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(v_self.v_needs_return) ) { (function () {
(v_last_statement = pop(v_self.v_block));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool((( bool((and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); }))) ? false : true))) ) { (function () {
(v_str = (string(v_str) + string((v_decl).emit_go()) + string(String.fromCharCode(59))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(and(v_self.v_needs_return, function () { return v_last_statement; })) ) { (function () {
                if ( bool(isa(v_last_statement, 'If')) ) { (function () {
                    var v_cond = null;

                    var v_body = null;

                    var v_otherwise = null;

(v_cond = v_last_statement.cond());
(v_body = v_last_statement.body());
(v_otherwise = v_last_statement.otherwise());
                    if ( bool(and(isa(v_cond, 'Apply'), function () { return (v_cond.code() == 'prefix:<' + String.fromCharCode(33) + '>'); })) ) { (function () {
(v_cond = (v_cond.arguments())[0]);
(v_body = v_last_statement.otherwise());
(v_otherwise = v_last_statement.body());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_body = (function () { var tmp = {v_block: v_body,v_needs_return: 1,v_top_level: v_self.v_top_level}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })());
(v_otherwise = (function () { var tmp = {v_block: v_otherwise,v_needs_return: 1,v_top_level: v_self.v_top_level}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('if tobool( ') + string(Call.emit_go_call(v_cond, 'Bool')) + string(' ) ' + String.fromCharCode(123) + ' ') + string(v_body.emit_go()) + string(' ' + String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' ') + string(v_otherwise.emit_go()) + string(' ' + String.fromCharCode(125))));;
                })(); }
                else { (function () {
                    if ( bool(or(isa(v_last_statement, 'Return'), function () { return isa(v_last_statement, 'For'); })) ) { (function () {
(v_str = (string(v_str) + string(v_last_statement.emit_go())));;
                    })(); }
                    else { (function () {
(v_last_statement = (function () { var tmp = {v_result: v_last_statement}; tmp.__proto__ = Return; return tmp; })());
                        if ( bool(v_self.v_top_level) ) { (function () {
(v_str = (string(v_str) + string(v_last_statement.emit_go())));;
                        })(); }
                        else { (function () {
(v_str = (string(v_str) + string(v_last_statement.emit_go_simple())));;
                        })(); };;
                    })(); };;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Go$LexicalBlock.emit_go;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // method emit_go
  CompUnit.emit_go = function () {
    var v_self = this;
        try {
            var v_class_name = null;

            var v_str = null;

            var Hash_decl_seen = {};

(v_class_name = Main.to_go_namespace(v_self.v_name));
(v_str = (string(String.fromCharCode(47) + String.fromCharCode(47) + ' instances of class ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('type ') + string(v_class_name) + string(' struct ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('v_') + string((v_decl.var()).name()) + string(' *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' methods in class ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('var Method_') + string(v_class_name) + string(' struct ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Method')) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('f_') + string(v_decl.name()) + string(' func (*') + string(v_class_name) + string(', Capture) *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_methods)))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('f_') + string((v_decl.var()).name()) + string(' func (*') + string(v_class_name) + string(', Capture) *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' namespace ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('var Namespace_') + string(v_class_name) + string(' struct ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Sub')) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('f_') + string(v_decl.name()) + string(' Function' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('var Run_') + string(v_class_name) + string(' func ()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' method wrappers for ') + string(v_self.v_name) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Method')) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_') + string(v_decl.name()) + string(' (v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  return Method_') + string(v_class_name) + string('.f_') + string(v_decl.name()) + string('(v_self, v)' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_methods)))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_') + string((v_decl.var()).name()) + string(' (v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  return Method_') + string(v_class_name) + string('.f_') + string((v_decl.var()).name()) + string('(v_self, v)' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
            if ( bool(( bool(((function () { if ((v_self.v_methods) == null) { (v_self.v_methods) = {} }; return ((v_self.v_methods)['isa'] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_isa (v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('return toBool( ' + String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34) + ' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' tostr( v.p[0] ) ) ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(( bool(((function () { if ((v_self.v_methods) == null) { (v_self.v_methods) = {} }; return ((v_self.v_methods)['perl'] ); })())) ? false : true)) ) { (function () {
                var v_sep = null;

(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_perl (v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('return toStr( ' + String.fromCharCode(34) + '::') + string(v_self.v_name) + string('(' + String.fromCharCode(34) + ' ')));
(v_sep = '');
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                     if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string(v_sep) + string('+ ' + String.fromCharCode(34)) + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(34)) + string('+ tostr((*(*v_self).f_') + string((v_decl.var()).name()) + string('(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')).(perl_er).f_perl(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')) ')));
(v_sep = '+ ' + String.fromCharCode(34) + ', ' + String.fromCharCode(34) + ' ');;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
(v_str = (string(v_str) + string('+ ' + String.fromCharCode(34) + ')' + String.fromCharCode(34) + ' ) ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and((( bool(((function () { if ((v_self.v_methods) == null) { (v_self.v_methods) = {} }; return ((v_self.v_methods)['Bool'] ); })())) ? false : true)), function () { return (( bool(((function () { if ((v_self.v_attributes) == null) { (v_self.v_attributes) = {} }; return ((v_self.v_attributes)['Bool'] ); })())) ? false : true)); })) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_Bool (v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('return b_true() ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' prototype of ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('var Proto_') + string(v_class_name) + string(' *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('func Init_') + string(v_class_name) + string('() ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('  this_namespace :' + String.fromCharCode(61) + ' ' + String.fromCharCode(38) + 'Namespace_') + string(v_class_name) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  this_namespace ' + String.fromCharCode(61) + ' this_namespace' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('  Proto_') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' ') + string('func() *Any ' + String.fromCharCode(123) + ' ') + string('var m ' + String.fromCharCode(61) + ' new(') + string(v_class_name) + string(')' + String.fromCharCode(59) + ' ') + string('var m1 Any ' + String.fromCharCode(61) + ' m' + String.fromCharCode(59) + ' ') + string('return ' + String.fromCharCode(38) + 'm1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl1) {                 var v_decl = null;

(v_decl = v_decl1);
                if ( bool(and(and(isa(v_decl, 'Bind'), function () { return isa((v_decl.parameters()), 'Decl'); }), function () { return (((v_decl.parameters()).decl() == 'my')); })) ) { (function () {
(v_decl = v_decl.parameters());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = ((v_decl).var()).emit_go());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string(v_decl.emit_go_init())));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' accessor ') + string((v_decl.var()).name()) + string((string(String.fromCharCode(10)))) + string('  Method_') + string(v_class_name) + string('.f_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + ' func (v_self *') + string(v_class_name) + string(', v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string('if v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' nil ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('      ') + string(((function () { var tmp = {v_decl: 'my',v_type: v__NAMESPACE.undef(),v_var: (function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })()).emit_go_init()) + string('      ') + string('v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + ' ') + string(((function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()).emit_go()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string('if *v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' nil ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('      ') + string(((function () { var tmp = {v_decl: 'my',v_type: v__NAMESPACE.undef(),v_var: (function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })()).emit_go_init()) + string('      ') + string('v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + ' ') + string(((function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()).emit_go()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string('return v_self.v_') + string((v_decl.var()).name()) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Method')) ) { (function () {
                    var v_sig = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' method ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  Method_') + string(v_class_name) + string('.f_') + string(v_decl.name()) + string(' ' + String.fromCharCode(61) + ' func (self *') + string(v_class_name) + string(', v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    var self1 Any ' + String.fromCharCode(61) + ' self' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    var ') + string((v_sig.invocant()).emit_go()) + string(' *Any ' + String.fromCharCode(61) + ' ' + String.fromCharCode(38) + 'self1' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string((v_sig.invocant()).emit_go()) + string(' ' + String.fromCharCode(61) + ' ') + string((v_sig.invocant()).emit_go()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string(v_sig.emit_go_bind()) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(v_block.emit_go()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Sub')) ) { (function () {
                    var v_sig = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' sub ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  Namespace_') + string(v_class_name) + string('.f_') + string(v_decl.name()) + string(' ' + String.fromCharCode(61) + ' Function( func (v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string(v_sig.emit_go_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(v_block.emit_go()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + ' )' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' main runtime block of ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('  Run_') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' func () ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(and((( bool((and(isa(v_decl, 'Decl'), function () { return (or(((v_decl.decl() == 'has')), function () { return ((v_decl.decl() == 'my')); })); }))) ? false : true)), function () { return (( bool((isa(v_decl, 'Method'))) ? false : true)); }), function () { return (( bool((isa(v_decl, 'Sub'))) ? false : true)); })) ) { (function () {
(v_str = (string(v_str) + string('    ') + string((v_decl).emit_go()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
(v_str = (string(v_str) + string('  ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_go;  // v8 bug workaround
  // sub emit_go_program
  CompUnit.emit_go_program = function (v_comp_units) {
        try {
            var v_str = null;

            var Hash_unit_seen = {};

            var List_tmp_comp_unit = [];

            var Hash_meth_seen = {};

(v_str = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 var v_name = null;

(v_name = v_comp_unit.name());
                if ( bool((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name] ); })()) ) { (function () {
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                         push(((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name] ); })()).body(), v_stmt);; })(a_[i_]) } })(((v_comp_unit.body())));;
                })(); }
                else { (function () {
(function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name]  = v_comp_unit); })();
                    push(List_tmp_comp_unit, v_comp_unit);;
                })(); };; })(a_[i_]) } })(((v_comp_units)));
(v_comp_units = List_tmp_comp_unit);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                     if ( bool(isa(v_stmt, 'Method')) ) { (function () {
(function () { if ((v_comp_unit.methods()) == null) { (v_comp_unit.methods()) = {} }; return ((v_comp_unit.methods())[v_stmt.name()]  = v_stmt); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(isa(v_stmt, 'Decl'), function () { return ((v_stmt.decl() == 'has')); })) ) { (function () {
(function () { if ((v_comp_unit.attributes()) == null) { (v_comp_unit.attributes()) = {} }; return ((v_comp_unit.attributes())[(v_stmt.var()).name()]  = v_stmt); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_comp_unit.body())));; })(a_[i_]) } })(((v_comp_units)));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string(v_comp_unit.emit_go())));; })(a_[i_]) } })(((v_comp_units)));
            if ( bool(( bool(((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[(string('Perlito6::Grammar'))] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string((string('type Perlito__Grammar struct') + string(String.fromCharCode(123)) + string(String.fromCharCode(125)) + string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = (string(v_str) + string((string(String.fromCharCode(47) + String.fromCharCode(47) + ' interfaces for all methods') + string(String.fromCharCode(10))))));
(Hash_meth_seen = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['join']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['perl']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['scalar']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['isa']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['values']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['keys']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exists']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['bind']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['int']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['num']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['str']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['Str']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['bool']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['Bool']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['array']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hash']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['push']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['pop']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['shift']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['lookup']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['index']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['function']  = 1); })();
    return(Hash_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                     if ( bool(and(isa(v_stmt, 'Method'), function () { return ( bool(((function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[v_stmt.name()] ); })())) ? false : true); })) ) { (function () {
                        var v_meth = null;

(v_meth = v_stmt.name());
(v_str = (string(v_str) + string((string('type '))) + string(v_meth) + string((string('_er interface ') + string(String.fromCharCode(123)) + string(' f_'))) + string(v_meth) + string((string(' (Capture) *Any ' + String.fromCharCode(125)) + string(String.fromCharCode(10))))));
(function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[v_meth]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(and(isa(v_stmt, 'Decl'), function () { return ((v_stmt.decl() == 'has')); }), function () { return ( bool(((function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[(v_stmt.var()).name()] ); })())) ? false : true); })) ) { (function () {
                        var v_meth = null;

(v_meth = (v_stmt.var()).name());
(v_str = (string(v_str) + string((string('type '))) + string(v_meth) + string((string('_er interface ') + string(String.fromCharCode(123)) + string(' f_'))) + string(v_meth) + string((string(' (Capture) *Any ' + String.fromCharCode(125)) + string(String.fromCharCode(10))))));
(function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[v_meth]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_comp_unit.body())));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string(String.fromCharCode(10)))) + string((string('func main () ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((string('  Init_Perlito__Match()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string((string('  Init_'))) + string(Main.to_go_namespace(v_comp_unit.name())) + string((string('()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string('  Init_Prelude()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string((string('  Run_'))) + string(Main.to_go_namespace(v_comp_unit.name())) + string((string('()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_go_program;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_go
  Val$Int.emit_go = function () {
    var v_self = this;
        try {
            return((string('toInt(') + string(v_self.v_int) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_go;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_go
  Val$Bit.emit_go = function () {
    var v_self = this;
        try {
            return(( bool(v_self.v_bit) ? 'b_true()' : 'b_false()'));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_go;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_go
  Val$Num.emit_go = function () {
    var v_self = this;
        try {
            return((string('toNum(') + string(v_self.v_num) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_go;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_go
  Val$Buf.emit_go = function () {
    var v_self = this;
        try {
            return((string('toStr(' + String.fromCharCode(34)) + string(v_self.v_buf) + string(String.fromCharCode(34) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_go;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_go
  Lit$Array.emit_go = function () {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_go());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_go;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_go
  Lit$Hash.emit_go = function () {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_go());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_go;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_go
  Index.emit_go = function () {
    var v_self = this;
        try {
            return((string('(*(*') + string(v_self.v_obj.emit_go()) + string(').(array_er).f_array(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + '))') + string('.(index_er).f_index( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(v_self.v_index_exp.emit_go()) + string(' ' + String.fromCharCode(125) + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_go;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_go
  Lookup.emit_go = function () {
    var v_self = this;
        try {
            return((string('(*(*') + string(v_self.v_obj.emit_go()) + string(').(hash_er).f_hash(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + '))') + string('.(lookup_er).f_lookup( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(v_self.v_index_exp.emit_go()) + string(' ' + String.fromCharCode(125) + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_go;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // method emit_go
  Var.emit_go = function () {
    var v_self = this;
        try {
            var v_table = null;

            var v_ns = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = 'v_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = 'Code_'); })();
    return(Hash_a);
})());
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(Main.to_go_namespace(v_self.v_namespace)) + string('.')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return(( bool(((v_self.v_twigil == '.'))) ? ((string('(*v_self).(') + string(v_self.v_name) + string('_er).f_') + string(v_self.v_name) + string('(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')'))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ('v_MATCH') : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_ns) + string(v_self.v_name)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_go;  // v8 bug workaround
  // method plain_name
  Var.plain_name = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(v_self.v_namespace) + string('.') + string(v_self.v_name)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_self.v_name);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.plain_name;  // v8 bug workaround
})()
;// class Bind
if (typeof Bind !== 'object') {
  Bind = function() {};
  Bind = new Bind;
  Bind.isa = function (s) { return s == 'Bind'; };
  Bind.perl = function () { return 'Bind.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Bind;
  // accessor parameters
  Bind.v_parameters = null;
  Bind.parameters = function () { return this.v_parameters; };
  // accessor arguments
  Bind.v_arguments = null;
  Bind.arguments = function () { return this.v_arguments; };
  // method emit_go
  Bind.emit_go = function () {
    var v_self = this;
        try {
            if ( bool(isa(v_self.v_parameters, 'Call')) ) { (function () {
                throw((string('func () *Any ' + String.fromCharCode(123) + ' ') + string('var tmp ' + String.fromCharCode(61) + ' ') + string(Call.emit_go_call(v_self.v_parameters.invocant(), v_self.v_parameters.method())) + string(String.fromCharCode(59) + ' ') + string('*tmp ' + String.fromCharCode(61) + ' *( ') + string(v_self.v_arguments.emit_go()) + string(' )' + String.fromCharCode(59) + ' ') + string('return tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('*') + string(v_self.v_parameters.emit_go()) + string(' ' + String.fromCharCode(61) + ' *(') + string(v_self.v_arguments.emit_go()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Bind.emit_go;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_go
  Proto.emit_go = function () {
    var v_self = this;
        try {
            return(Main.to_go_namespace(v_self.v_name));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_go;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // method emit_go
  Call.emit_go = function () {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

(v_invocant = v_self.v_invocant.emit_go());
            if ( bool(isa((v_self.v_invocant), 'Proto')) ) { (function () {
                if ( bool((v_self.v_invocant.name() == 'self')) ) { (function () {
(v_invocant = 'v_self');;
                })(); }
                else { (function () {
(v_invocant = (string('Proto_') + string(v_invocant)));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_meth == 'postcircumfix:<( )>')) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
(v_meth = '');;
                })(); }
                else { (function () {
                    throw((string('((*') + string(v_invocant) + string(').(function_er).f_function( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' ))')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_hyper)) ) { (function () {
                throw((string('func (a_ *Any) *Any ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('  var out ' + String.fromCharCode(61) + ' a_array()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  var i ' + String.fromCharCode(61) + ' (*(*a_).(array_er).f_array(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')).(*Array)' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  for pos :' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' pos <' + String.fromCharCode(61) + ' i.n' + String.fromCharCode(59) + ' pos++ ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('    (*out).(push_er).f_push( Capture' + String.fromCharCode(123) + 'p: []*Any' + String.fromCharCode(123) + ' (*i.v[pos]).(') + string(v_meth) + string('_er).f_') + string(v_meth) + string('(Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + String.fromCharCode(125) + '  ' + String.fromCharCode(125) + ') ' + String.fromCharCode(125) + String.fromCharCode(125) + ' )') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + ' ') + string((string(String.fromCharCode(10)))) + string('  return out' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125) + '(') + string(v_invocant) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('(*') + string(v_invocant) + string(').(') + string(v_meth) + string('_er).f_') + string(v_meth) + string('( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_go;  // v8 bug workaround
  // sub emit_go_call
  Call.emit_go_call = function (v_invocant, v_meth_name) {
        try {
            var v_invocant1 = null;

            var v_meth = null;

(v_invocant1 = v_invocant.emit_go());
            if ( bool(isa((v_invocant), 'Proto')) ) { (function () {
(v_invocant1 = (string('Proto_') + string(v_invocant1)));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_meth_name);
            throw((string('(*') + string(v_invocant1) + string(').(') + string(v_meth) + string('_er).f_') + string(v_meth) + string('(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_go_call;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // method emit_go
  Apply.emit_go = function () {
    var v_self = this;
        try {
            var v_code = null;

(v_code = v_self.v_code);
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string('(') + string(v_self.v_code.emit_go()) + string(')->(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw('v_self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'False')) ) { (function () {
                throw('b_false()');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'True')) ) { (function () {
                throw('b_true()');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string('func () *Any ' + String.fromCharCode(123) + ' ') + string('tmp :' + String.fromCharCode(61) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(59) + ' ') + string('*(*v_MATCH).(capture_er).f_capture(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ') ' + String.fromCharCode(61) + ' *tmp' + String.fromCharCode(59) + ' ') + string('return tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'go')) ) { (function () {
                throw((string('go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: (v_self.v_arguments[0]).block(),v_needs_return: 0,v_top_level: 1}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string((string(String.fromCharCode(10)))) + string('    ' + String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'say')) ) { (function () {
                throw((string('f_print( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(', toStr(' + String.fromCharCode(34) + String.fromCharCode(92) + 'n' + String.fromCharCode(34) + ') ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'print')) ) { (function () {
                throw((string('f_print( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'warn')) ) { (function () {
                throw((string('f_print_stderr( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(', toStr(' + String.fromCharCode(34) + String.fromCharCode(92) + 'n' + String.fromCharCode(34) + ') ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'die')) ) { (function () {
                throw((string('f_die( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'defined')) ) { (function () {
                throw((string('f_defined( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'pop')) ) { (function () {
                throw((string('f_pop( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'push')) ) { (function () {
                throw((string('f_push( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'shift')) ) { (function () {
                throw((string('f_shift( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'index')) ) { (function () {
                throw((string('f_index( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string('f_substr( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'scalar')) ) { (function () {
                throw((string('f_scalar( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Int')) ) { (function () {
                throw((string('toInt(') + string('toint(') + string((v_self.v_arguments[0]).emit_go()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Num')) ) { (function () {
                throw((string('toNum(') + string('tonum(') + string((v_self.v_arguments[0]).emit_go()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'exists')) ) { (function () {
                var v_arg = null;

(v_arg = v_self.v_arguments[0]);
                if ( bool(isa(v_arg, 'Lookup')) ) { (function () {
                    throw((string('(*') + string((v_arg.obj()).emit_go()) + string(')') + string('.(exists_er).f_exists(Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string((v_arg.index_exp()).emit_go()) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw(Call.emit_go_call(v_self.v_arguments[0], 'Str'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('toBool(' + String.fromCharCode(33) + 'tobool(') + string((v_self.v_arguments[0]).emit_go()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(63) + '>')) ) { (function () {
                throw(Call.emit_go_call(v_self.v_arguments[0], 'Bool'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string('f_scalar( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw(Call.emit_go_call(v_self.v_arguments[0], 'array'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw(Call.emit_go_call(v_self.v_arguments[0], 'hash'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string('toStr( ') + string('tostr(') + string((v_self.v_arguments[0]).emit_go()) + string(') + ') + string('tostr(') + string((v_self.v_arguments[1]).emit_go()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<+>')) ) { (function () {
                throw((string('f_add( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<->')) ) { (function () {
                throw((string('f_sub( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<*>')) ) { (function () {
                throw((string('f_mul( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(47) + '>')) ) { (function () {
                throw((string('f_div( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>>')) ) { (function () {
                throw((string('f_greater( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<>')) ) { (function () {
                throw((string('f_smaller( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool( ') + string('toint(') + string((v_self.v_arguments[0]).emit_go()) + string(') >' + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_go()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool( ') + string('toint(') + string((v_self.v_arguments[0]).emit_go()) + string(') <' + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_go()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>')) ) { (function () {
                throw((string('f_and( ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[0]).emit_go()) + string(' ' + String.fromCharCode(125) + ', ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[1]).emit_go()) + string(' ' + String.fromCharCode(125) + ' ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>')) ) { (function () {
                throw((string('f_or( ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[0]).emit_go()) + string(' ' + String.fromCharCode(125) + ', ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[1]).emit_go()) + string(' ' + String.fromCharCode(125) + ' ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<eq>')) ) { (function () {
                throw((string('toBool(') + string('tostr(') + string((v_self.v_arguments[0]).emit_go()) + string(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ') + string('tostr(') + string((v_self.v_arguments[1]).emit_go()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<ne>')) ) { (function () {
                throw((string('toBool(') + string('tostr(') + string((v_self.v_arguments[0]).emit_go()) + string(') ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ') + string('tostr(') + string((v_self.v_arguments[1]).emit_go()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool(') + string('toint(') + string((v_self.v_arguments[0]).emit_go()) + string(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_go()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool(') + string('toint(') + string((v_self.v_arguments[0]).emit_go()) + string(') ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_go()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('func () *Any ' + String.fromCharCode(123) + ' ') + string('if tobool( ') + string(Call.emit_go_call(v_self.v_arguments[0], 'Bool')) + string(' ) ') + string(String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[1]).emit_go()) + string(' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('return ') + string((v_self.v_arguments[2]).emit_go()) + string(' ') + string(String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = (string('f_') + string(v_self.v_code)));
            if ( bool(v_self.v_namespace) ) { (function () {
(v_code = (string('Namespace_') + string(Main.to_go_namespace(v_self.v_namespace)) + string('.') + string(v_code)));;
            })(); }
            else { (function () {
(v_code = (string('this_namespace.') + string(v_code)));;
            })(); };
            return((string(v_code) + string('( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_go() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_go;  // v8 bug workaround
})()
;// class Return
if (typeof Return !== 'object') {
  Return = function() {};
  Return = new Return;
  Return.isa = function (s) { return s == 'Return'; };
  Return.perl = function () { return 'Return.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Return;
  // method emit_go
  Return.emit_go = function () {
    var v_self = this;
        try {
            if ( bool(isa((v_self.v_result), 'Bind')) ) { (function () {
                var v_tmp = null;

(v_tmp = (v_self.v_result).parameters());
                throw((string('(func () ' + String.fromCharCode(123) + ' ') + string((v_self.v_result).emit_go()) + string(String.fromCharCode(59) + ' ') + string('p <- ') + string(v_tmp.emit_go()) + string(String.fromCharCode(59) + ' ') + string('runtime.Goexit()' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '())')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('(func () ' + String.fromCharCode(123) + ' ') + string('var tmp *Any ' + String.fromCharCode(61) + ' ') + string((v_self.v_result).emit_go()) + string(String.fromCharCode(59) + ' ') + string('p <- tmp' + String.fromCharCode(59) + ' ') + string('runtime.Goexit()' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '())')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_go;  // v8 bug workaround
  // method emit_go_simple
  Return.emit_go_simple = function () {
    var v_self = this;
        try {
            if ( bool(isa((v_self.v_result), 'Bind')) ) { (function () {
                var v_tmp = null;

(v_tmp = (v_self.v_result).parameters());
                throw((string('return (func () *Any ' + String.fromCharCode(123) + ' ') + string((v_self.v_result).emit_go()) + string(String.fromCharCode(59) + ' ') + string('return ') + string(v_tmp.emit_go()) + string(String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '())')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('return( ') + string(v_self.v_result.emit_go()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_go_simple;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // method emit_go
  If.emit_go = function () {
    var v_self = this;
        try {
            var v_cond = null;

            var v_s = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Apply'), function () { return (v_cond.code() == 'prefix:<' + String.fromCharCode(33) + '>'); })) ) { (function () {
                var v_if = null;

(v_if = (function () { var tmp = {v_cond: (v_cond.arguments())[0],v_body: v_self.v_otherwise,v_otherwise: v_self.v_body}; tmp.__proto__ = If; return tmp; })());
                throw(v_if.emit_go());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_s = (string('if tobool( ') + string(Call.emit_go_call(v_cond, 'Bool')) + string(' ) ' + String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_body,v_needs_return: 0}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string(' ' + String.fromCharCode(125))));
            if ( bool(( bool((v_self.v_otherwise)) ? false : true)) ) { (function () {
                throw(v_s);;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(v_s) + string(' else ' + String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_otherwise,v_needs_return: 0}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_go;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // method emit_go
  For.emit_go = function () {
    var v_self = this;
        try {
            return((string('func (a_ *Any) ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('  var i ' + String.fromCharCode(61) + ' (*(*a_).(array_er).f_array(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')).(*Array)' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  for pos :' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' pos <' + String.fromCharCode(61) + ' i.n' + String.fromCharCode(59) + ' pos++ ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('    func (') + string(v_self.v_topic.emit_go()) + string(' *Any) ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('      ') + string(((function () { var tmp = {v_block: v_self.v_body,v_needs_return: 0}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string((string(String.fromCharCode(10)))) + string('    ' + String.fromCharCode(125) + '(i.v[pos]) ') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + ' ') + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125) + '(') + string(v_self.v_cond.emit_go()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_go;  // v8 bug workaround
})()
;// class When
if (typeof When !== 'object') {
  When = function() {};
  When = new When;
  When.isa = function (s) { return s == 'When'; };
  When.perl = function () { return 'When.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = When;
  // method emit_go
  When.emit_go = function () {
    var v_self = this;
        try {
            return(die((string('TODO - When'))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  When.emit_go;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // method emit_go
  While.emit_go = function () {
    var v_self = this;
        try {
            var v_cond = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('for ') + string((( bool(v_self.v_init) ? (string(v_self.v_init.emit_go()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59)))) + string('tobool( ') + string(Call.emit_go_call(v_cond, 'Bool')) + string(' )' + String.fromCharCode(59) + ' ') + string((( bool(v_self.v_continue) ? (string(v_self.v_continue.emit_go()) + string(' ')) : ''))) + string(String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_body,v_needs_return: 0}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_go;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_go
  Decl.emit_go = function () {
    var v_self = this;
        try {
            return(v_self.v_var.emit_go());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_go;  // v8 bug workaround
  // method emit_go_init
  Decl.emit_go_init = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_decl == 'my')) ) { return (function () {
                var v_str = null;

(v_str = '');
(v_str = (string(v_str) + string('var ') + string((v_self.v_var).emit_go()) + string(' *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string((v_self.v_var).emit_go()) + string(' ' + String.fromCharCode(61) + ' ') + string((v_self.v_var).emit_go()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
(v_str = (string(v_str) + string((v_self.v_var).emit_go()) + string(' ' + String.fromCharCode(61) + ' h_hash()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
(v_str = (string(v_str) + string((v_self.v_var).emit_go()) + string(' ' + String.fromCharCode(61) + ' a_array()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); }
                    else { (function () {
(v_str = (string(v_str) + string((v_self.v_var).emit_go()) + string(' ' + String.fromCharCode(61) + ' u_undef()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); };;
                })(); };
                throw(v_str);
            })(); }
            else { return (function () {
                return(die((string('not implemented: Decl ' + String.fromCharCode(39)) + string(v_self.v_decl) + string((string(String.fromCharCode(39)))))));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_go_init;  // v8 bug workaround
})()
;// class Sig
if (typeof Sig !== 'object') {
  Sig = function() {};
  Sig = new Sig;
  Sig.isa = function (s) { return s == 'Sig'; };
  Sig.perl = function () { return 'Sig.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sig;
  // method emit_go
  Sig.emit_go = function () {
    var v_self = this;
        try {
            return('');;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sig.emit_go;  // v8 bug workaround
  // method emit_go_bind
  Sig.emit_go_bind = function () {
    var v_self = this;
        try {
            var v_str = null;

            var v_i = null;

(v_str = '');
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) { (v_str = (string(v_str) + string((string('  var '))) + string(v_decl.emit_go()) + string((string(' *Any' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('  if len(v.p) > '))) + string(v_i) + string((string(' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((string('    '))) + string(v_decl.emit_go()) + string((string(' ' + String.fromCharCode(61) + ' v.p['))) + string(v_i) + string((string(']' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('  ' + String.fromCharCode(125)) + string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(v_decl.emit_go()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_decl.emit_go()) + string(String.fromCharCode(59) + ' ')));
(v_i = add(v_i, 1));; })(a_[i_]) } })(((v_self.v_positional)));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sig.emit_go_bind;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_go
  Method.emit_go = function () {
    var v_self = this;
        try {
            var v_invocant = null;

(v_invocant = (v_self.v_sig).invocant());
            return((string('func ') + string(v_self.v_name) + string('(v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('    ') + string((v_self.v_sig).emit_go_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_go;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_go
  Sub.emit_go = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_name == '')) ) { (function () {
                throw((string('toFunction( func(v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('    ') + string((v_self.v_sig).emit_go_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125) + ' ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('func ') + string(v_self.v_name) + string('(v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('    ') + string((v_self.v_sig).emit_go_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_go;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_go
  Do.emit_go = function () {
    var v_self = this;
        try {
            return((string('(func () *Any ' + String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Go$LexicalBlock; return tmp; })()).emit_go()) + string(String.fromCharCode(59) + ' return u_undef() ') + string(String.fromCharCode(125) + ')()')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_go;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_go
  Use.emit_go = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(47) + String.fromCharCode(47) + ' use ') + string(v_self.v_mod) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_go;  // v8 bug workaround
})()
;    // use v6
;// class Perlito6::Java::LexicalBlock
if (typeof Perlito6$Java$LexicalBlock !== 'object') {
  Perlito6$Java$LexicalBlock = function() {};
  Perlito6$Java$LexicalBlock = new Perlito6$Java$LexicalBlock;
  Perlito6$Java$LexicalBlock.isa = function (s) { return s == 'Perlito6::Java::LexicalBlock'; };
  Perlito6$Java$LexicalBlock.perl = function () { return 'Perlito6::Java::LexicalBlock.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Java$LexicalBlock;
  // accessor block
  Perlito6$Java$LexicalBlock.v_block = null;
  Perlito6$Java$LexicalBlock.block = function () { return this.v_block; };
  // accessor needs_return
  Perlito6$Java$LexicalBlock.v_needs_return = null;
  Perlito6$Java$LexicalBlock.needs_return = function () { return this.v_needs_return; };
  // accessor top_level
  Perlito6$Java$LexicalBlock.v_top_level = null;
  Perlito6$Java$LexicalBlock.top_level = function () { return this.v_top_level; };
  // method emit_java
  Perlito6$Java$LexicalBlock.emit_java = function () {
    var v_self = this;
        try {
            var v_str = null;

            var Hash_decl_seen = {};

            var v_last_statement = null;

            if ( bool(( bool((v_self.v_block)) ? false : true)) ) { (function () {
                throw('');;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl1) {                 var v_decl = null;

(v_decl = v_decl1);
                if ( bool(and(and(isa(v_decl, 'Bind'), function () { return isa((v_decl.parameters()), 'Decl'); }), function () { return (((v_decl.parameters()).decl() == 'my')); })) ) { (function () {
(v_decl = v_decl.parameters());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = ((v_decl).var()).emit_java());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string(v_decl.emit_java_init())));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(v_self.v_needs_return) ) { (function () {
(v_last_statement = pop(v_self.v_block));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool((( bool((and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); }))) ? false : true))) ) { (function () {
(v_str = (string(v_str) + string((v_decl).emit_java()) + string(String.fromCharCode(59))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(and(v_self.v_needs_return, function () { return v_last_statement; })) ) { (function () {
                if ( bool(isa(v_last_statement, 'If')) ) { (function () {
                    var v_cond = null;

                    var v_body = null;

                    var v_otherwise = null;

(v_cond = v_last_statement.cond());
(v_body = v_last_statement.body());
(v_otherwise = v_last_statement.otherwise());
                    if ( bool(and(isa(v_cond, 'Apply'), function () { return (v_cond.code() == 'prefix:<' + String.fromCharCode(33) + '>'); })) ) { (function () {
(v_cond = (v_cond.arguments())[0]);
(v_body = v_last_statement.otherwise());
(v_otherwise = v_last_statement.body());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_body = (function () { var tmp = {v_block: v_body,v_needs_return: 1,v_top_level: v_self.v_top_level}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })());
(v_otherwise = (function () { var tmp = {v_block: v_otherwise,v_needs_return: 1,v_top_level: v_self.v_top_level}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('if tobool( ') + string(Call.emit_java_call(v_cond, 'Bool')) + string(' ) ' + String.fromCharCode(123) + ' ') + string(v_body.emit_java()) + string(' ' + String.fromCharCode(125) + ' else ' + String.fromCharCode(123) + ' ') + string(v_otherwise.emit_java()) + string(' ' + String.fromCharCode(125))));;
                })(); }
                else { (function () {
                    if ( bool(or(isa(v_last_statement, 'Return'), function () { return isa(v_last_statement, 'For'); })) ) { (function () {
(v_str = (string(v_str) + string(v_last_statement.emit_java())));;
                    })(); }
                    else { (function () {
(v_last_statement = (function () { var tmp = {v_result: v_last_statement}; tmp.__proto__ = Return; return tmp; })());
                        if ( bool(v_self.v_top_level) ) { (function () {
(v_str = (string(v_str) + string(v_last_statement.emit_java())));;
                        })(); }
                        else { (function () {
(v_str = (string(v_str) + string(v_last_statement.emit_java_simple())));;
                        })(); };;
                    })(); };;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Java$LexicalBlock.emit_java;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // method emit_java
  CompUnit.emit_java = function () {
    var v_self = this;
        try {
            var v_class_name = null;

            var v_str = null;

            var Hash_decl_seen = {};

(v_class_name = Main.to_go_namespace(v_self.v_name));
(v_str = (string(String.fromCharCode(47) + String.fromCharCode(47) + ' instances of class ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('type ') + string(v_class_name) + string(' struct ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('v_') + string((v_decl.var()).name()) + string(' *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' methods in class ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('var Method_') + string(v_class_name) + string(' struct ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Method')) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('f_') + string(v_decl.name()) + string(' func (*') + string(v_class_name) + string(', Capture) *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_methods)))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('f_') + string((v_decl.var()).name()) + string(' func (*') + string(v_class_name) + string(', Capture) *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' namespace ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('var Namespace_') + string(v_class_name) + string(' struct ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Sub')) ) { (function () {
(v_str = (string(v_str) + string('  ') + string('f_') + string(v_decl.name()) + string(' Function' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('var Run_') + string(v_class_name) + string(' func ()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' method wrappers for ') + string(v_self.v_name) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Method')) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_') + string(v_decl.name()) + string(' (v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  return Method_') + string(v_class_name) + string('.f_') + string(v_decl.name()) + string('(v_self, v)' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_methods)))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_') + string((v_decl.var()).name()) + string(' (v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  return Method_') + string(v_class_name) + string('.f_') + string((v_decl.var()).name()) + string('(v_self, v)' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
            if ( bool(( bool(((function () { if ((v_self.v_methods) == null) { (v_self.v_methods) = {} }; return ((v_self.v_methods)['isa'] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_isa (v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('return toBool( ' + String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34) + ' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' tostr( v.p[0] ) ) ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(( bool(((function () { if ((v_self.v_methods) == null) { (v_self.v_methods) = {} }; return ((v_self.v_methods)['perl'] ); })())) ? false : true)) ) { (function () {
                var v_sep = null;

(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_perl (v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('return toStr( ' + String.fromCharCode(34) + '::') + string(v_self.v_name) + string('(' + String.fromCharCode(34) + ' ')));
(v_sep = '');
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                     if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string(v_sep) + string('+ ' + String.fromCharCode(34)) + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + '> ' + String.fromCharCode(34)) + string('+ tostr((*(*v_self).f_') + string((v_decl.var()).name()) + string('(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')).(perl_er).f_perl(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')) ')));
(v_sep = '+ ' + String.fromCharCode(34) + ', ' + String.fromCharCode(34) + ' ');;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((values((v_self.v_attributes)))));
(v_str = (string(v_str) + string('+ ' + String.fromCharCode(34) + ')' + String.fromCharCode(34) + ' ) ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and((( bool(((function () { if ((v_self.v_methods) == null) { (v_self.v_methods) = {} }; return ((v_self.v_methods)['Bool'] ); })())) ? false : true)), function () { return (( bool(((function () { if ((v_self.v_attributes) == null) { (v_self.v_attributes) = {} }; return ((v_self.v_attributes)['Bool'] ); })())) ? false : true)); })) ) { (function () {
(v_str = (string(v_str) + string('func (v_self *') + string(v_class_name) + string(') f_Bool (v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('return b_true() ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = (string(v_str) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' prototype of ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('var Proto_') + string(v_class_name) + string(' *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('func Init_') + string(v_class_name) + string('() ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('  this_namespace :' + String.fromCharCode(61) + ' ' + String.fromCharCode(38) + 'Namespace_') + string(v_class_name) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  this_namespace ' + String.fromCharCode(61) + ' this_namespace' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('  Proto_') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' ') + string('func() *Any ' + String.fromCharCode(123) + ' ') + string('var m ' + String.fromCharCode(61) + ' new(') + string(v_class_name) + string(')' + String.fromCharCode(59) + ' ') + string('var m1 Any ' + String.fromCharCode(61) + ' m' + String.fromCharCode(59) + ' ') + string('return ' + String.fromCharCode(38) + 'm1' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl1) {                 var v_decl = null;

(v_decl = v_decl1);
                if ( bool(and(and(isa(v_decl, 'Bind'), function () { return isa((v_decl.parameters()), 'Decl'); }), function () { return (((v_decl.parameters()).decl() == 'my')); })) ) { (function () {
(v_decl = v_decl.parameters());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = ((v_decl).var()).emit_java());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string(v_decl.emit_java_init())));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' accessor ') + string((v_decl.var()).name()) + string((string(String.fromCharCode(10)))) + string('  Method_') + string(v_class_name) + string('.f_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + ' func (v_self *') + string(v_class_name) + string(', v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string('if v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' nil ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('      ') + string(((function () { var tmp = {v_decl: 'my',v_type: v__NAMESPACE.undef(),v_var: (function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })()).emit_java_init()) + string('      ') + string('v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + ' ') + string(((function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()).emit_java()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string('if *v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' nil ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('      ') + string(((function () { var tmp = {v_decl: 'my',v_type: v__NAMESPACE.undef(),v_var: (function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })()).emit_java_init()) + string('      ') + string('v_self.v_') + string((v_decl.var()).name()) + string(' ' + String.fromCharCode(61) + ' ') + string(((function () { var tmp = {v_sigil: (v_decl.var()).sigil(),v_twigil: '',v_namespace: '',v_name: 'tmp'}; tmp.__proto__ = Var; return tmp; })()).emit_java()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string('return v_self.v_') + string((v_decl.var()).name()) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Method')) ) { (function () {
                    var v_sig = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' method ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  Method_') + string(v_class_name) + string('.f_') + string(v_decl.name()) + string(' ' + String.fromCharCode(61) + ' func (self *') + string(v_class_name) + string(', v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    var self1 Any ' + String.fromCharCode(61) + ' self' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    var ') + string((v_sig.invocant()).emit_java()) + string(' *Any ' + String.fromCharCode(61) + ' ' + String.fromCharCode(38) + 'self1' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string((v_sig.invocant()).emit_java()) + string(' ' + String.fromCharCode(61) + ' ') + string((v_sig.invocant()).emit_java()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('    ') + string(v_sig.emit_java_bind()) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(v_block.emit_java()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Sub')) ) { (function () {
                    var v_sig = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' sub ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  Namespace_') + string(v_class_name) + string('.f_') + string(v_decl.name()) + string(' ' + String.fromCharCode(61) + ' Function( func (v Capture) *Any ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    ') + string(v_sig.emit_java_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(v_block.emit_java()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + ' )' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' main runtime block of ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('  Run_') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' func () ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(and((( bool((and(isa(v_decl, 'Decl'), function () { return (or(((v_decl.decl() == 'has')), function () { return ((v_decl.decl() == 'my')); })); }))) ? false : true)), function () { return (( bool((isa(v_decl, 'Method'))) ? false : true)); }), function () { return (( bool((isa(v_decl, 'Sub'))) ? false : true)); })) ) { (function () {
(v_str = (string(v_str) + string('    ') + string((v_decl).emit_java()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
(v_str = (string(v_str) + string('  ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_java;  // v8 bug workaround
  // sub emit_java_program
  CompUnit.emit_java_program = function (v_comp_units) {
        try {
            var v_str = null;

            var Hash_unit_seen = {};

            var List_tmp_comp_unit = [];

            var Hash_meth_seen = {};

(v_str = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 var v_name = null;

(v_name = v_comp_unit.name());
                if ( bool((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name] ); })()) ) { (function () {
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                         push(((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name] ); })()).body(), v_stmt);; })(a_[i_]) } })(((v_comp_unit.body())));;
                })(); }
                else { (function () {
(function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name]  = v_comp_unit); })();
                    push(List_tmp_comp_unit, v_comp_unit);;
                })(); };; })(a_[i_]) } })(((v_comp_units)));
(v_comp_units = List_tmp_comp_unit);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                     if ( bool(isa(v_stmt, 'Method')) ) { (function () {
(function () { if ((v_comp_unit.methods()) == null) { (v_comp_unit.methods()) = {} }; return ((v_comp_unit.methods())[v_stmt.name()]  = v_stmt); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(isa(v_stmt, 'Decl'), function () { return ((v_stmt.decl() == 'has')); })) ) { (function () {
(function () { if ((v_comp_unit.attributes()) == null) { (v_comp_unit.attributes()) = {} }; return ((v_comp_unit.attributes())[(v_stmt.var()).name()]  = v_stmt); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_comp_unit.body())));; })(a_[i_]) } })(((v_comp_units)));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string(v_comp_unit.emit_java())));; })(a_[i_]) } })(((v_comp_units)));
            if ( bool(( bool(((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[(string('Perlito6::Grammar'))] ); })())) ? false : true)) ) { (function () {
(v_str = (string(v_str) + string((string('type Perlito__Grammar struct') + string(String.fromCharCode(123)) + string(String.fromCharCode(125)) + string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = (string(v_str) + string((string(String.fromCharCode(47) + String.fromCharCode(47) + ' interfaces for all methods') + string(String.fromCharCode(10))))));
(Hash_meth_seen = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['join']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['perl']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['scalar']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['isa']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['values']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['keys']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['exists']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['bind']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['int']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['num']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['str']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['Str']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['bool']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['Bool']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['array']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['hash']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['push']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['pop']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['shift']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['lookup']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['index']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['function']  = 1); })();
    return(Hash_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                     if ( bool(and(isa(v_stmt, 'Method'), function () { return ( bool(((function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[v_stmt.name()] ); })())) ? false : true); })) ) { (function () {
                        var v_meth = null;

(v_meth = v_stmt.name());
(v_str = (string(v_str) + string((string('type '))) + string(v_meth) + string((string('_er interface ') + string(String.fromCharCode(123)) + string(' f_'))) + string(v_meth) + string((string(' (Capture) *Any ' + String.fromCharCode(125)) + string(String.fromCharCode(10))))));
(function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[v_meth]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(and(isa(v_stmt, 'Decl'), function () { return ((v_stmt.decl() == 'has')); }), function () { return ( bool(((function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[(v_stmt.var()).name()] ); })())) ? false : true); })) ) { (function () {
                        var v_meth = null;

(v_meth = (v_stmt.var()).name());
(v_str = (string(v_str) + string((string('type '))) + string(v_meth) + string((string('_er interface ') + string(String.fromCharCode(123)) + string(' f_'))) + string(v_meth) + string((string(' (Capture) *Any ' + String.fromCharCode(125)) + string(String.fromCharCode(10))))));
(function () { if (Hash_meth_seen == null) { Hash_meth_seen = {} }; return (Hash_meth_seen[v_meth]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_comp_unit.body())));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string(String.fromCharCode(10)))) + string((string('func main () ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((string('  Init_Perlito__Match()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string((string('  Init_'))) + string(Main.to_go_namespace(v_comp_unit.name())) + string((string('()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string('  Init_Prelude()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string((string('  Run_'))) + string(Main.to_go_namespace(v_comp_unit.name())) + string((string('()' + String.fromCharCode(59)) + string(String.fromCharCode(10))))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10))))));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_java_program;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_java
  Val$Int.emit_java = function () {
    var v_self = this;
        try {
            return((string('new PerlitoInt(') + string(v_self.v_int) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_java;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_java
  Val$Bit.emit_java = function () {
    var v_self = this;
        try {
            return(( bool(v_self.v_bit) ? 'new PerlitoBool(true)' : 'new PerlitoBool(false)'));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_java;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_java
  Val$Num.emit_java = function () {
    var v_self = this;
        try {
            return((string('new PerlitoNum(') + string(v_self.v_num) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_java;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_java
  Val$Buf.emit_java = function () {
    var v_self = this;
        try {
            return((string('new PerlitoString(' + String.fromCharCode(34)) + string(v_self.v_buf) + string(String.fromCharCode(34) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_java;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_java
  Lit$Array.emit_java = function () {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_java());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_java;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_java
  Lit$Hash.emit_java = function () {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_java());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_java;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_java
  Index.emit_java = function () {
    var v_self = this;
        try {
            return((string('(*(*') + string(v_self.v_obj.emit_java()) + string(').(array_er).f_array(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + '))') + string('.(index_er).f_index( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(v_self.v_index_exp.emit_java()) + string(' ' + String.fromCharCode(125) + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_java;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_java
  Lookup.emit_java = function () {
    var v_self = this;
        try {
            return((string('(*(*') + string(v_self.v_obj.emit_java()) + string(').(hash_er).f_hash(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + '))') + string('.(lookup_er).f_lookup( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(v_self.v_index_exp.emit_java()) + string(' ' + String.fromCharCode(125) + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_java;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // method emit_java
  Var.emit_java = function () {
    var v_self = this;
        try {
            var v_table = null;

            var v_ns = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = 'v_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = 'Code_'); })();
    return(Hash_a);
})());
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(Main.to_go_namespace(v_self.v_namespace)) + string('.')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return(( bool(((v_self.v_twigil == '.'))) ? ((string('(*v_self).(') + string(v_self.v_name) + string('_er).f_') + string(v_self.v_name) + string('(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')'))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ('v_MATCH') : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_ns) + string(v_self.v_name)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_java;  // v8 bug workaround
  // method plain_name
  Var.plain_name = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(v_self.v_namespace) + string('.') + string(v_self.v_name)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_self.v_name);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.plain_name;  // v8 bug workaround
})()
;// class Bind
if (typeof Bind !== 'object') {
  Bind = function() {};
  Bind = new Bind;
  Bind.isa = function (s) { return s == 'Bind'; };
  Bind.perl = function () { return 'Bind.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Bind;
  // accessor parameters
  Bind.v_parameters = null;
  Bind.parameters = function () { return this.v_parameters; };
  // accessor arguments
  Bind.v_arguments = null;
  Bind.arguments = function () { return this.v_arguments; };
  // method emit_java
  Bind.emit_java = function () {
    var v_self = this;
        try {
            if ( bool(isa(v_self.v_parameters, 'Call')) ) { (function () {
                throw((string('func () *Any ' + String.fromCharCode(123) + ' ') + string('var tmp ' + String.fromCharCode(61) + ' ') + string(Call.emit_java_call(v_self.v_parameters.invocant(), v_self.v_parameters.method())) + string(String.fromCharCode(59) + ' ') + string('*tmp ' + String.fromCharCode(61) + ' *( ') + string(v_self.v_arguments.emit_java()) + string(' )' + String.fromCharCode(59) + ' ') + string('return tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('*') + string(v_self.v_parameters.emit_java()) + string(' ' + String.fromCharCode(61) + ' *(') + string(v_self.v_arguments.emit_java()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Bind.emit_java;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_java
  Proto.emit_java = function () {
    var v_self = this;
        try {
            return(Main.to_go_namespace(v_self.v_name));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_java;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // method emit_java
  Call.emit_java = function () {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

(v_invocant = v_self.v_invocant.emit_java());
            if ( bool(isa((v_self.v_invocant), 'Proto')) ) { (function () {
                if ( bool((v_self.v_invocant.name() == 'self')) ) { (function () {
(v_invocant = 'v_self');;
                })(); }
                else { (function () {
(v_invocant = (string('Proto_') + string(v_invocant)));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_meth == 'postcircumfix:<( )>')) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
(v_meth = '');;
                })(); }
                else { (function () {
                    throw((string('((*') + string(v_invocant) + string(').(function_er).f_function( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' ))')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_hyper)) ) { (function () {
                throw((string('func (a_ *Any) *Any ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('  var out ' + String.fromCharCode(61) + ' a_array()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  var i ' + String.fromCharCode(61) + ' (*(*a_).(array_er).f_array(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')).(*Array)' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  for pos :' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' pos <' + String.fromCharCode(61) + ' i.n' + String.fromCharCode(59) + ' pos++ ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('    (*out).(push_er).f_push( Capture' + String.fromCharCode(123) + 'p: []*Any' + String.fromCharCode(123) + ' (*i.v[pos]).(') + string(v_meth) + string('_er).f_') + string(v_meth) + string('(Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + String.fromCharCode(125) + '  ' + String.fromCharCode(125) + ') ' + String.fromCharCode(125) + String.fromCharCode(125) + ' )') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + ' ') + string((string(String.fromCharCode(10)))) + string('  return out' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125) + '(') + string(v_invocant) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('(*') + string(v_invocant) + string(').(') + string(v_meth) + string('_er).f_') + string(v_meth) + string('( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_java;  // v8 bug workaround
  // sub emit_java_call
  Call.emit_java_call = function (v_invocant, v_meth_name) {
        try {
            var v_invocant1 = null;

            var v_meth = null;

(v_invocant1 = v_invocant.emit_java());
            if ( bool(isa((v_invocant), 'Proto')) ) { (function () {
(v_invocant1 = (string('Proto_') + string(v_invocant1)));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_meth_name);
            throw((string('(*') + string(v_invocant1) + string(').(') + string(v_meth) + string('_er).f_') + string(v_meth) + string('(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_java_call;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // method emit_java
  Apply.emit_java = function () {
    var v_self = this;
        try {
            var v_code = null;

(v_code = v_self.v_code);
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string('(') + string(v_self.v_code.emit_java()) + string(')->(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw('v_self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'False')) ) { (function () {
                throw('b_false()');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'True')) ) { (function () {
                throw('b_true()');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string('func () *Any ' + String.fromCharCode(123) + ' ') + string('tmp :' + String.fromCharCode(61) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(String.fromCharCode(59) + ' ') + string('*(*v_MATCH).(capture_er).f_capture(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ') ' + String.fromCharCode(61) + ' *tmp' + String.fromCharCode(59) + ' ') + string('return tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'go')) ) { (function () {
                throw((string('go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: (v_self.v_arguments[0]).block(),v_needs_return: 0,v_top_level: 1}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string((string(String.fromCharCode(10)))) + string('    ' + String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'say')) ) { (function () {
                throw((string('System.out.println( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join('.to_string() + ')) + string('.to_string() )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'print')) ) { (function () {
                throw((string('System.out.print( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join('.to_string() ')) + string('.to_string() )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'warn')) ) { (function () {
                throw((string('f_print_stderr( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(', toStr(' + String.fromCharCode(34) + String.fromCharCode(92) + 'n' + String.fromCharCode(34) + ') ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'die')) ) { (function () {
                throw((string('f_die( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'defined')) ) { (function () {
                throw((string('f_defined( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'pop')) ) { (function () {
                throw((string('f_pop( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'push')) ) { (function () {
                throw((string('f_push( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'shift')) ) { (function () {
                throw((string('f_shift( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'index')) ) { (function () {
                throw((string('f_index( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string('f_substr( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'scalar')) ) { (function () {
                throw((string('f_scalar( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Int')) ) { (function () {
                throw((string('toInt(') + string('toint(') + string((v_self.v_arguments[0]).emit_java()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Num')) ) { (function () {
                throw((string('toNum(') + string('tonum(') + string((v_self.v_arguments[0]).emit_java()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'exists')) ) { (function () {
                var v_arg = null;

(v_arg = v_self.v_arguments[0]);
                if ( bool(isa(v_arg, 'Lookup')) ) { (function () {
                    throw((string('(*') + string((v_arg.obj()).emit_java()) + string(')') + string('.(exists_er).f_exists(Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string((v_arg.index_exp()).emit_java()) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw(Call.emit_java_call(v_self.v_arguments[0], 'Str'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('toBool(' + String.fromCharCode(33) + 'tobool(') + string((v_self.v_arguments[0]).emit_java()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(63) + '>')) ) { (function () {
                throw(Call.emit_java_call(v_self.v_arguments[0], 'Bool'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string('f_scalar( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw(Call.emit_java_call(v_self.v_arguments[0], 'array'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw(Call.emit_java_call(v_self.v_arguments[0], 'hash'));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string('toStr( ') + string('tostr(') + string((v_self.v_arguments[0]).emit_java()) + string(') + ') + string('tostr(') + string((v_self.v_arguments[1]).emit_java()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<+>')) ) { (function () {
                throw((string('f_add( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<->')) ) { (function () {
                throw((string('f_sub( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<*>')) ) { (function () {
                throw((string('f_mul( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(47) + '>')) ) { (function () {
                throw((string('f_div( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>>')) ) { (function () {
                throw((string('f_greater( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<>')) ) { (function () {
                throw((string('f_smaller( ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool( ') + string('toint(') + string((v_self.v_arguments[0]).emit_java()) + string(') >' + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_java()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool( ') + string('toint(') + string((v_self.v_arguments[0]).emit_java()) + string(') <' + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_java()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>')) ) { (function () {
                throw((string('f_and( ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[0]).emit_java()) + string(' ' + String.fromCharCode(125) + ', ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[1]).emit_java()) + string(' ' + String.fromCharCode(125) + ' ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>')) ) { (function () {
                throw((string('f_or( ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[0]).emit_java()) + string(' ' + String.fromCharCode(125) + ', ') + string('func () *Any ' + String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[1]).emit_java()) + string(' ' + String.fromCharCode(125) + ' ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<eq>')) ) { (function () {
                throw((string('toBool(') + string('tostr(') + string((v_self.v_arguments[0]).emit_java()) + string(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ') + string('tostr(') + string((v_self.v_arguments[1]).emit_java()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<ne>')) ) { (function () {
                throw((string('toBool(') + string('tostr(') + string((v_self.v_arguments[0]).emit_java()) + string(') ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ') + string('tostr(') + string((v_self.v_arguments[1]).emit_java()) + string(')') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool(') + string('toint(') + string((v_self.v_arguments[0]).emit_java()) + string(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_java()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('toBool(') + string('toint(') + string((v_self.v_arguments[0]).emit_java()) + string(') ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ') + string('toint(') + string((v_self.v_arguments[1]).emit_java()) + string(') ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('func () *Any ' + String.fromCharCode(123) + ' ') + string('if tobool( ') + string(Call.emit_java_call(v_self.v_arguments[0], 'Bool')) + string(' ) ') + string(String.fromCharCode(123) + ' return ') + string((v_self.v_arguments[1]).emit_java()) + string(' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('return ') + string((v_self.v_arguments[2]).emit_java()) + string(' ') + string(String.fromCharCode(125) + '()')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = (string('f_') + string(v_self.v_code)));
            if ( bool(v_self.v_namespace) ) { (function () {
(v_code = (string('Namespace_') + string(Main.to_go_namespace(v_self.v_namespace)) + string('.') + string(v_code)));;
            })(); }
            else { (function () {
(v_code = (string('this_namespace.') + string(v_code)));;
            })(); };
            return((string(v_code) + string('( Capture' + String.fromCharCode(123) + ' p : []*Any' + String.fromCharCode(123) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_java() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ' )')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_java;  // v8 bug workaround
})()
;// class Return
if (typeof Return !== 'object') {
  Return = function() {};
  Return = new Return;
  Return.isa = function (s) { return s == 'Return'; };
  Return.perl = function () { return 'Return.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Return;
  // method emit_java
  Return.emit_java = function () {
    var v_self = this;
        try {
            if ( bool(isa((v_self.v_result), 'Bind')) ) { (function () {
                var v_tmp = null;

(v_tmp = (v_self.v_result).parameters());
                throw((string('(func () ' + String.fromCharCode(123) + ' ') + string((v_self.v_result).emit_java()) + string(String.fromCharCode(59) + ' ') + string('p <- ') + string(v_tmp.emit_java()) + string(String.fromCharCode(59) + ' ') + string('runtime.Javaexit()' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '())')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('(func () ' + String.fromCharCode(123) + ' ') + string('var tmp *Any ' + String.fromCharCode(61) + ' ') + string((v_self.v_result).emit_java()) + string(String.fromCharCode(59) + ' ') + string('p <- tmp' + String.fromCharCode(59) + ' ') + string('runtime.Javaexit()' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '())')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_java;  // v8 bug workaround
  // method emit_java_simple
  Return.emit_java_simple = function () {
    var v_self = this;
        try {
            if ( bool(isa((v_self.v_result), 'Bind')) ) { (function () {
                var v_tmp = null;

(v_tmp = (v_self.v_result).parameters());
                throw((string('return (func () *Any ' + String.fromCharCode(123) + ' ') + string((v_self.v_result).emit_java()) + string(String.fromCharCode(59) + ' ') + string('return ') + string(v_tmp.emit_java()) + string(String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + '())')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('return( ') + string(v_self.v_result.emit_java()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_java_simple;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // method emit_java
  If.emit_java = function () {
    var v_self = this;
        try {
            var v_cond = null;

            var v_s = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Apply'), function () { return (v_cond.code() == 'prefix:<' + String.fromCharCode(33) + '>'); })) ) { (function () {
                var v_if = null;

(v_if = (function () { var tmp = {v_cond: (v_cond.arguments())[0],v_body: v_self.v_otherwise,v_otherwise: v_self.v_body}; tmp.__proto__ = If; return tmp; })());
                throw(v_if.emit_java());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_s = (string('if tobool( ') + string(Call.emit_java_call(v_cond, 'Bool')) + string(' ) ' + String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_body,v_needs_return: 0}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string(' ' + String.fromCharCode(125))));
            if ( bool(( bool((v_self.v_otherwise)) ? false : true)) ) { (function () {
                throw(v_s);;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(v_s) + string(' else ' + String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_otherwise,v_needs_return: 0}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_java;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // method emit_java
  For.emit_java = function () {
    var v_self = this;
        try {
            return((string('func (a_ *Any) ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('  var i ' + String.fromCharCode(61) + ' (*(*a_).(array_er).f_array(Capture' + String.fromCharCode(123) + String.fromCharCode(125) + ')).(*Array)' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('  for pos :' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' pos <' + String.fromCharCode(61) + ' i.n' + String.fromCharCode(59) + ' pos++ ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('    func (') + string(v_self.v_topic.emit_java()) + string(' *Any) ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('      ') + string(((function () { var tmp = {v_block: v_self.v_body,v_needs_return: 0}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string((string(String.fromCharCode(10)))) + string('    ' + String.fromCharCode(125) + '(i.v[pos]) ') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125) + ' ') + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125) + '(') + string(v_self.v_cond.emit_java()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_java;  // v8 bug workaround
})()
;// class When
if (typeof When !== 'object') {
  When = function() {};
  When = new When;
  When.isa = function (s) { return s == 'When'; };
  When.perl = function () { return 'When.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = When;
  // method emit_java
  When.emit_java = function () {
    var v_self = this;
        try {
            return(die((string('TODO - When'))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  When.emit_java;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // method emit_java
  While.emit_java = function () {
    var v_self = this;
        try {
            var v_cond = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('for ') + string((( bool(v_self.v_init) ? (string(v_self.v_init.emit_java()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59)))) + string('tobool( ') + string(Call.emit_java_call(v_cond, 'Bool')) + string(' )' + String.fromCharCode(59) + ' ') + string((( bool(v_self.v_continue) ? (string(v_self.v_continue.emit_java()) + string(' ')) : ''))) + string(String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_body,v_needs_return: 0}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_java;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_java
  Decl.emit_java = function () {
    var v_self = this;
        try {
            return(v_self.v_var.emit_java());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_java;  // v8 bug workaround
  // method emit_java_init
  Decl.emit_java_init = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_decl == 'my')) ) { return (function () {
                var v_str = null;

(v_str = '');
(v_str = (string(v_str) + string('var ') + string((v_self.v_var).emit_java()) + string(' *Any' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string((v_self.v_var).emit_java()) + string(' ' + String.fromCharCode(61) + ' ') + string((v_self.v_var).emit_java()) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
(v_str = (string(v_str) + string((v_self.v_var).emit_java()) + string(' ' + String.fromCharCode(61) + ' h_hash()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
(v_str = (string(v_str) + string((v_self.v_var).emit_java()) + string(' ' + String.fromCharCode(61) + ' a_array()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); }
                    else { (function () {
(v_str = (string(v_str) + string((v_self.v_var).emit_java()) + string(' ' + String.fromCharCode(61) + ' u_undef()' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); };;
                })(); };
                throw(v_str);
            })(); }
            else { return (function () {
                return(die((string('not implemented: Decl ' + String.fromCharCode(39)) + string(v_self.v_decl) + string((string(String.fromCharCode(39)))))));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_java_init;  // v8 bug workaround
})()
;// class Sig
if (typeof Sig !== 'object') {
  Sig = function() {};
  Sig = new Sig;
  Sig.isa = function (s) { return s == 'Sig'; };
  Sig.perl = function () { return 'Sig.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sig;
  // method emit_java
  Sig.emit_java = function () {
    var v_self = this;
        try {
            return('');;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sig.emit_java;  // v8 bug workaround
  // method emit_java_bind
  Sig.emit_java_bind = function () {
    var v_self = this;
        try {
            var v_str = null;

            var v_i = null;

(v_str = '');
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) { (v_str = (string(v_str) + string((string('  var '))) + string(v_decl.emit_java()) + string((string(' *Any' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('  if len(v.p) > '))) + string(v_i) + string((string(' ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string((string('    '))) + string(v_decl.emit_java()) + string((string(' ' + String.fromCharCode(61) + ' v.p['))) + string(v_i) + string((string(']' + String.fromCharCode(59)) + string(String.fromCharCode(10)))) + string((string('  ' + String.fromCharCode(125)) + string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string(v_decl.emit_java()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_decl.emit_java()) + string(String.fromCharCode(59) + ' ')));
(v_i = add(v_i, 1));; })(a_[i_]) } })(((v_self.v_positional)));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sig.emit_java_bind;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_java
  Method.emit_java = function () {
    var v_self = this;
        try {
            var v_invocant = null;

(v_invocant = (v_self.v_sig).invocant());
            return((string('func ') + string(v_self.v_name) + string('(v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('    ') + string((v_self.v_sig).emit_java_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_java;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_java
  Sub.emit_java = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_name == '')) ) { (function () {
                throw((string('toFunction( func(v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('    ') + string((v_self.v_sig).emit_java_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125) + ' ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('func ') + string(v_self.v_name) + string('(v Capture) *Any ' + String.fromCharCode(123) + ' ') + string('    ') + string((v_self.v_sig).emit_java_bind()) + string((string(String.fromCharCode(10)))) + string('    p :' + String.fromCharCode(61) + ' make(chan *Any)' + String.fromCharCode(59) + ' go func () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string('        ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string(String.fromCharCode(59) + ' p <- nil ' + String.fromCharCode(125) + '()' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string('    return <-p' + String.fromCharCode(59) + ' ') + string((string(String.fromCharCode(10)))) + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_java;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_java
  Do.emit_java = function () {
    var v_self = this;
        try {
            return((string('(func () *Any ' + String.fromCharCode(123) + ' ') + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Java$LexicalBlock; return tmp; })()).emit_java()) + string(String.fromCharCode(59) + ' return u_undef() ') + string(String.fromCharCode(125) + ')()')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_java;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_java
  Use.emit_java = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(47) + String.fromCharCode(47) + ' use ') + string(v_self.v_mod) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_java;  // v8 bug workaround
})()
;    // use v6
;    // use Perlito6::AST
;// class Perlito6::JavaScript
if (typeof Perlito6$JavaScript !== 'object') {
  Perlito6$JavaScript = function() {};
  Perlito6$JavaScript = new Perlito6$JavaScript;
  Perlito6$JavaScript.isa = function (s) { return s == 'Perlito6::JavaScript'; };
  Perlito6$JavaScript.perl = function () { return 'Perlito6::JavaScript.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$JavaScript;
  var Hash_safe_char = {};
  var Hash_reserved = {};
  // sub tab
  Perlito6$JavaScript.tab = function (v_level) {
        try {
            return(str_replicate((string('    ')), v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$JavaScript.tab;  // v8 bug workaround
  // sub escape_string
  Perlito6$JavaScript.escape_string = function (v_s) {
        try {
            var List_out = [];

            var v_tmp = null;

(v_tmp = '');
            if ( bool((v_s == '')) ) { (function () {
                throw((string(String.fromCharCode(39) + String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_i) {                 var v_c = null;

(v_c = (v_s || "").substr(v_i, 1));
                if ( bool(or(or(or((and(((v_c >= 'a')), function () { return ((v_c <= 'z')); })), function () { return (and(((v_c >= 'A')), function () { return ((v_c <= 'Z')); })); }), function () { return (and(((v_c >= '0')), function () { return ((v_c <= '9')); })); }), function () { return (Hash_safe_char).hasOwnProperty(v_c); })) ) { (function () {
(v_tmp = (string(v_tmp) + string(v_c)));;
                })(); }
                else { (function () {
                    if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
List_out.push((string('String.fromCharCode(') + string((function () { 
    return((v_c).charCodeAt(0));
})()) + string(')')));
(v_tmp = '');;
                })(); };; })(a_[i_]) } })((function (a) { for (var i=0, l=(chars(v_s) - 1); i<=l; ++i){ a.push(i) }; return a })([]));
            if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string(String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(List_out.join(' + '));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$JavaScript.escape_string;  // v8 bug workaround
  // sub escape_function
  Perlito6$JavaScript.escape_function = function (v_s) {
        try {
            if ( bool((Hash_reserved).hasOwnProperty(v_s)) ) { (function () {
                throw((string('f_') + string(v_s)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$JavaScript.escape_function;  // v8 bug workaround
(Hash_safe_char = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['_']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[',']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['.']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[':']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['-']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['+']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['*']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[' ']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['(']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[')']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['<']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['>']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['[']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[']']  = 1); })();
    return(Hash_a);
})());(Hash_reserved = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['print']  = 1); })();
    return(Hash_a);
})());})()
;// class Perlito6::JavaScript::LexicalBlock
if (typeof Perlito6$JavaScript$LexicalBlock !== 'object') {
  Perlito6$JavaScript$LexicalBlock = function() {};
  Perlito6$JavaScript$LexicalBlock = new Perlito6$JavaScript$LexicalBlock;
  Perlito6$JavaScript$LexicalBlock.isa = function (s) { return s == 'Perlito6::JavaScript::LexicalBlock'; };
  Perlito6$JavaScript$LexicalBlock.perl = function () { return 'Perlito6::JavaScript::LexicalBlock.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$JavaScript$LexicalBlock;
  // accessor block
  Perlito6$JavaScript$LexicalBlock.v_block = null;
  Perlito6$JavaScript$LexicalBlock.block = function () { return this.v_block; };
  // accessor needs_return
  Perlito6$JavaScript$LexicalBlock.v_needs_return = null;
  Perlito6$JavaScript$LexicalBlock.needs_return = function () { return this.v_needs_return; };
  // accessor top_level
  Perlito6$JavaScript$LexicalBlock.v_top_level = null;
  Perlito6$JavaScript$LexicalBlock.top_level = function () { return this.v_top_level; };
  // method emit_javascript
  Perlito6$JavaScript$LexicalBlock.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$JavaScript$LexicalBlock.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Perlito6$JavaScript$LexicalBlock.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var List_block = [];

            var List_str = [];

            var v_last_statement = null;

            if ( bool(v_self.v_top_level) ) { (function () {
                var v_block = null;

(v_block = (function () { var tmp = {v_block: v_self.block(),v_needs_return: v_self.needs_return(),v_top_level: 0}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('try ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_block.emit_javascript_indented(add(v_level, 1))) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string('catch(err) ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(add(v_level, 1))) + string('if ( err instanceof Error ) ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(add(v_level, 2))) + string('throw(err)' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(add(v_level, 1))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(add(v_level, 1))) + string('else ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(add(v_level, 2))) + string('return(err)' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(add(v_level, 1))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v__) {                 if ( bool((v__ != null)) ) { (function () {
                    push(List_block, v__);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(( bool(List_block) ? false : true)) ) { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('null' + String.fromCharCode(59))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return (v_decl.decl() == 'my'); })) ) { (function () {
List_str.push((string(Perlito6$JavaScript.tab(v_level)) + string(v_decl.emit_javascript_init())));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); })) ) { (function () {
                    var v_var = null;

(v_var = v_decl.arguments()[0]);
                    if ( bool(and(isa(v_var, 'Decl'), function () { return (v_var.decl() == 'my'); })) ) { (function () {
List_str.push((string(Perlito6$JavaScript.tab(v_level)) + string(v_var.emit_javascript_init())));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(List_block);
            if ( bool(v_self.v_needs_return) ) { (function () {
(v_last_statement = pop(List_block));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(( bool((and(isa(v_decl, 'Decl'), function () { return (v_decl.decl() == 'my'); }))) ? false : true)) ) { (function () {
List_str.push((string(v_decl.emit_javascript_indented(v_level)) + string(String.fromCharCode(59))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(List_block);
            if ( bool(and(v_self.v_needs_return, function () { return v_last_statement; })) ) { (function () {
                if ( bool(isa(v_last_statement, 'If')) ) { (function () {
                    var v_cond = null;

                    var v_body = null;

                    var v_otherwise = null;

(v_cond = v_last_statement.cond());
(v_body = v_last_statement.body());
(v_otherwise = v_last_statement.otherwise());
                    if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_body = (function () { var tmp = {v_block: v_body.stmts(),v_needs_return: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
List_str.push((string(Perlito6$JavaScript.tab(v_level)) + string('if ( ') + string(Perlito6$JavaScript.escape_function('bool')) + string('(') + string(v_cond.emit_javascript()) + string(') ) ' + String.fromCharCode(123) + ' return (function () ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_body.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125) + ')()' + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));
                    if ( bool(v_otherwise) ) { (function () {
(v_otherwise = (function () { var tmp = {v_block: v_otherwise.stmts(),v_needs_return: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
List_str.push((string(Perlito6$JavaScript.tab(v_level)) + string('else ' + String.fromCharCode(123) + ' return (function () ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_otherwise.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125) + ')()' + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    if ( bool(or(and(isa(v_last_statement, 'Apply'), function () { return (v_last_statement.code() == 'return'); }), function () { return isa(v_last_statement, 'For'); })) ) { (function () {
List_str.push(v_last_statement.emit_javascript_indented(v_level));;
                    })(); }
                    else { (function () {
List_str.push((string(Perlito6$JavaScript.tab(v_level)) + string('return(') + string(v_last_statement.emit_javascript()) + string(')')));;
                    })(); };;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(List_str.join((string(String.fromCharCode(10))))) + string(String.fromCharCode(59))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$JavaScript$LexicalBlock.emit_javascript_indented;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // method emit_javascript
  CompUnit.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  CompUnit.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_class_name = null;

            var v_str = null;

(v_class_name = Main.to_javascript_namespace(v_self.v_name));
(v_str = (string(String.fromCharCode(47) + String.fromCharCode(47) + ' class ') + string(v_self.v_name) + string((string(String.fromCharCode(10)))) + string('if (typeof ') + string(v_class_name) + string(' ' + String.fromCharCode(33) + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(39) + 'object' + String.fromCharCode(39) + ') ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' function() ' + String.fromCharCode(123) + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string(' ' + String.fromCharCode(61) + ' new ') + string(v_class_name) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Perlito6$JavaScript.escape_function('isa')) + string(' ' + String.fromCharCode(61) + ' function (s) ' + String.fromCharCode(123) + ' return s ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(39)) + string(v_self.v_name) + string(String.fromCharCode(39) + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Perlito6$JavaScript.escape_function('perl')) + string(' ' + String.fromCharCode(61) + ' function () ' + String.fromCharCode(123) + ' return ' + String.fromCharCode(39)) + string(v_self.v_name) + string('.new(' + String.fromCharCode(39) + ' + Main._dump(this) + ' + String.fromCharCode(39) + ')' + String.fromCharCode(39) + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string('(function () ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('  var v__NAMESPACE ' + String.fromCharCode(61) + ' ') + string(v_class_name) + string(String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string(v_decl.emit_javascript_init())));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); })) ) { (function () {
                    var v_var = null;

(v_var = v_decl.arguments()[0]);
                    if ( bool(and(isa(v_var, 'Decl'), function () { return (v_var.decl() == 'my'); })) ) { (function () {
(v_str = (string(v_str) + string('  ') + string(v_var.emit_javascript_init())));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' accessor ') + string(v_decl.var().name()) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.v_') + string(v_decl.var().name()) + string(' ' + String.fromCharCode(61) + ' null' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Perlito6$JavaScript.escape_function(v_decl.var().name())) + string(' ' + String.fromCharCode(61) + ' function () ' + String.fromCharCode(123) + ' return this.v_') + string(v_decl.var().name()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Method')) ) { (function () {
                    var v_sig = null;

                    var v_pos = null;

                    var v_invocant = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_pos = v_sig.positional());
(v_invocant = v_sig.invocant());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' method ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Perlito6$JavaScript.escape_function(v_decl.name())) + string(' ' + String.fromCharCode(61) + ' function (') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos)).join(', ')) + string(') ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string('    var ') + string(v_invocant.emit_javascript()) + string(' ' + String.fromCharCode(61) + ' this' + String.fromCharCode(59)) + string((string(String.fromCharCode(10)))) + string(v_block.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Perlito6$JavaScript.escape_function(v_decl.name())) + string(String.fromCharCode(59) + '  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' v8 bug workaround') + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Sub')) ) { (function () {
                    var v_sig = null;

                    var v_pos = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_pos = v_sig.positional());
(v_block = (function () { var tmp = {v_block: v_decl.block(),v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' sub ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Perlito6$JavaScript.escape_function(v_decl.name())) + string(' ' + String.fromCharCode(61) + ' function (') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos)).join(', ')) + string(') ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_block.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(125)) + string((string(String.fromCharCode(10)))) + string('  ') + string(v_class_name) + string('.') + string(Perlito6$JavaScript.escape_function(v_decl.name())) + string(String.fromCharCode(59) + '  ' + String.fromCharCode(47) + String.fromCharCode(47) + ' v8 bug workaround') + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(and((( bool((and(isa(v_decl, 'Decl'), function () { return (or(((v_decl.decl() == 'has')), function () { return ((v_decl.decl() == 'my')); })); }))) ? false : true)), function () { return (( bool((isa(v_decl, 'Method'))) ? false : true)); }), function () { return (( bool((isa(v_decl, 'Sub'))) ? false : true)); })) ) { (function () {
(v_str = (string(v_str) + string((v_decl).emit_javascript_indented(add(v_level, 1))) + string(String.fromCharCode(59))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            return((v_str = (string(v_str) + string(String.fromCharCode(125)) + string(')()') + string((string(String.fromCharCode(10)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_javascript_indented;  // v8 bug workaround
  // sub emit_javascript_program
  CompUnit.emit_javascript_program = function (v_comp_units) {
        try {
            var v_str = null;

(v_str = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string(v_comp_unit.emit_javascript())));; })(a_[i_]) } })(((v_comp_units)));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_javascript_program;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_javascript
  Val$Int.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Int.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string(v_self.v_int)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_javascript_indented;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_javascript
  Val$Bit.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Bit.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string((( bool(v_self.v_bit) ? 'true' : 'false')))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_javascript_indented;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_javascript
  Val$Num.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Num.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string(v_self.v_num)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_javascript_indented;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_javascript
  Val$Buf.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Val$Buf.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string(Perlito6$JavaScript.escape_string(v_self.v_buf))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lit::Block
if (typeof Lit$Block !== 'object') {
  Lit$Block = function() {};
  Lit$Block = new Lit$Block;
  Lit$Block.isa = function (s) { return s == 'Lit::Block'; };
  Lit$Block.perl = function () { return 'Lit::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Block;
  // method emit_javascript
  Lit$Block.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lit$Block.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

(v_sig = 'v__');
            if ( bool(v_self.v_sig) ) { (function () {
(v_sig = v_self.v_sig.emit_javascript_indented(add(v_level, 1)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(Perlito6$JavaScript.tab(v_level)) + string((string('(function (') + string(v_sig) + string(') ') + string(String.fromCharCode(123)) + string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_self.v_stmts,v_needs_return: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125) + ')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_javascript
  Lit$Array.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lit$Array.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_javascript_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_javascript
  Lit$Hash.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lit$Hash.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_javascript_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_javascript_indented;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_javascript
  Index.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Index.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string(v_self.v_obj.emit_javascript()) + string('[') + string(v_self.v_index_exp.emit_javascript()) + string(']')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_javascript_indented;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_javascript
  Lookup.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Lookup.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_str = null;

            var v_var = null;

            var v_var_js = null;

            var v_index_js = null;

(v_str = '');
(v_var = v_self.v_obj);
            if ( bool(isa(v_var, 'Lookup')) ) { (function () {
                var v_var1 = null;

                var v_var1_js = null;

(v_var1 = v_var.obj());
(v_var1_js = v_var1.emit_javascript());
(v_str = (string(v_str) + string('if (') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null) ' + String.fromCharCode(123) + ' ') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_var_js = (string(v_var1_js) + string('[') + string(v_var.index_exp().emit_javascript()) + string(']')));;
            })(); }
            else { (function () {
(v_var_js = v_var.emit_javascript());;
            })(); };
(v_str = (string(v_str) + string('if (') + string(v_var_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null) ' + String.fromCharCode(123) + ' ') + string(v_var_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_index_js = v_self.v_index_exp.emit_javascript());
(v_str = (string(v_str) + string('return (') + string(v_var_js) + string('[') + string(v_index_js) + string('] ') + string(')' + String.fromCharCode(59) + ' ')));
            throw((string(Perlito6$JavaScript.tab(v_level)) + string('(function () ' + String.fromCharCode(123) + ' ') + string(v_str) + string(String.fromCharCode(125) + ')()')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_javascript_indented;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // method emit_javascript
  Var.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Var.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_table = null;

            var v_ns = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = 'v_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = 'Code_'); })();
    return(Hash_a);
})());
(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(Main.to_javascript_namespace(v_self.v_namespace)) + string('.')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return(( bool(((v_self.v_twigil == '.'))) ? ((string('v_self.v_') + string(v_self.v_name) + string(''))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH'))) : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_ns) + string(v_self.v_name)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_javascript_indented;  // v8 bug workaround
  // method plain_name
  Var.plain_name = function () {
    var v_self = this;
        try {
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(v_self.v_namespace) + string('.') + string(v_self.v_name)));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_self.v_name);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.plain_name;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_javascript
  Proto.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Proto.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string(Main.to_javascript_namespace(v_self.v_name))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_javascript_indented;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  var Hash_method_js = {};
  var Hash_method_native_js = {};
  // method emit_javascript
  Call.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Call.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

(v_invocant = v_self.v_invocant.emit_javascript());
            if ( bool((v_invocant == 'self')) ) { (function () {
(v_invocant = 'v_self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'new')) ) { (function () {
                var v_str = null;

(v_str = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) {                     if ( bool(and(isa(v_field, 'Apply'), function () { return (v_field.code() == 'infix:<' + String.fromCharCode(61) + '>>'); })) ) { (function () {
v_str.push((string('v_') + string(v_field.arguments()[0].buf()) + string(': ') + string(v_field.arguments()[1].emit_javascript())));;
                    })(); }
                    else { (function () {
                        die('Error in constructor, field: ', perl(v_field));;
                    })(); };; })(a_[i_]) } })(v_self.v_arguments);
                throw((string('(function () ' + String.fromCharCode(123) + ' ') + string('var tmp ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123)) + string(v_str.join(',')) + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('tmp.__proto__ ' + String.fromCharCode(61) + ' ') + string(Main.to_javascript_namespace(v_invocant)) + string(String.fromCharCode(59) + ' ') + string('return tmp' + String.fromCharCode(59) + ' ') + string(String.fromCharCode(125) + ')()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((Hash_method_js).hasOwnProperty(v_self.v_method)) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string('(function (a_) ' + String.fromCharCode(123) + ' ') + string('var out ' + String.fromCharCode(61) + ' []' + String.fromCharCode(59) + ' ') + string('if ( a_ ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null ) ' + String.fromCharCode(123) + ' return out' + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('for(var i ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' i < a_.length' + String.fromCharCode(59) + ' i++) ' + String.fromCharCode(123) + ' ') + string('out.push( ') + string(Perlito6$JavaScript.escape_function(v_self.v_method)) + string('(a_[i]) ) ' + String.fromCharCode(125) + ' return out' + String.fromCharCode(59)) + string(' ' + String.fromCharCode(125) + ')(') + string(v_invocant) + string(')')));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string(Perlito6$JavaScript.escape_function(v_self.v_method)) + string('(') + string(v_invocant) + string((( bool(v_self.v_arguments) ? (string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', '))) : ''))) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((Hash_method_native_js).hasOwnProperty(v_self.v_method)) ) { (function () {
                throw((string(v_invocant) + string('.') + string(v_self.v_method) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_self.v_hyper)) ) { (function () {
                throw((string('(function (a_) ' + String.fromCharCode(123) + ' ') + string('var out ' + String.fromCharCode(61) + ' []' + String.fromCharCode(59) + ' ') + string('if ( a_ ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null ) ' + String.fromCharCode(123) + ' return out' + String.fromCharCode(59) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('for(var i ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' i < a_.length' + String.fromCharCode(59) + ' i++) ' + String.fromCharCode(123) + ' ') + string('out.push( a_[i].') + string(Perlito6$JavaScript.escape_function(v_meth)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(') ) ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('return out' + String.fromCharCode(59)) + string(' ' + String.fromCharCode(125) + ')(') + string(v_invocant) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_meth == 'postcircumfix:<( )>')) ) { (function () {
                throw((string('(') + string(v_invocant) + string(')(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(Perlito6$JavaScript.tab(v_level)) + string(v_invocant) + string('.') + string(Perlito6$JavaScript.escape_function(v_meth)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_javascript_indented;  // v8 bug workaround
(Hash_method_js = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['perl']  = 'perl'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['isa']  = 'isa'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['id']  = 'id'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['scalar']  = 'scalar'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['keys']  = 'keys'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['values']  = 'values'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['pairs']  = 'pairs'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['elems']  = 'elems'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['say']  = 'say'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['chars']  = 'chars'); })();
    return(Hash_a);
})());(Hash_method_native_js = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['join']  = 'join'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['split']  = 'split'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['shift']  = 'shift'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['unshift']  = 'unshift'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['push']  = 'push'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['pop']  = 'pop'); })();
    return(Hash_a);
})());})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  var Hash_op_infix_js = {};
  var Hash_op_global_js = {};
  // method emit_javascript
  Apply.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Apply.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_apply = null;

            var v_code = null;

(v_apply = v_self.op_assign());
            if ( bool(v_apply) ) { (function () {
                throw(v_apply.emit_javascript_indented(v_level));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = v_self.v_code);
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('(') + string(v_self.v_code.emit_javascript()) + string(')->(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); };
            if ( bool((Hash_op_infix_js).hasOwnProperty(v_code)) ) { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join((function () { if (Hash_op_infix_js == null) { Hash_op_infix_js = {} }; return (Hash_op_infix_js[v_code] ); })())) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('v_self')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Mu')) ) { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('null')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('(v_MATCH.v_capture ' + String.fromCharCode(61) + ' ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'defined')) ) { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' null)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string('(') + string((v_self.v_arguments[0]).emit_javascript()) + string(' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' ' + String.fromCharCode(34) + String.fromCharCode(34) + ').substr(') + string((v_self.v_arguments[1]).emit_javascript()) + string((( bool((v_self.v_arguments[2] != null)) ? (string(', ') + string((v_self.v_arguments[2]).emit_javascript())) : ''))) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'chr')) ) { (function () {
                throw((string('String.fromCharCode(') + string(Perlito6$JavaScript.escape_function('num')) + string('(') + string((v_self.v_arguments[0]).emit_javascript()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ord')) ) { (function () {
                throw((string('(') + string((v_self.v_arguments[0]).emit_javascript()) + string(').charCodeAt(0)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Int')) ) { (function () {
                throw((string('parseInt(') + string((v_self.v_arguments[0]).emit_javascript()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Num')) ) { (function () {
                throw((string('parseFloat(') + string((v_self.v_arguments[0]).emit_javascript()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string(Perlito6$JavaScript.escape_function('string')) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('( ') + string(Perlito6$JavaScript.escape_function('bool')) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(') ' + String.fromCharCode(63) + ' false : true)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(63) + '>')) ) { (function () {
                throw((string('( ') + string(Perlito6$JavaScript.escape_function('bool')) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(') ' + String.fromCharCode(63) + ' true : false)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string(Perlito6$JavaScript.escape_function('scalar')) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(').') + string(Perlito6$JavaScript.escape_function('hash')) + string('()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:<++>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')++')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'postfix:<-->')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')--')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<++>')) ) { (function () {
                throw((string('++(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<-->')) ) { (function () {
                throw((string('--(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<x>')) ) { (function () {
                throw((string('str_replicate(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'list:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string('(') + string(Perlito6$JavaScript.escape_function('string')) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join((string(') + ') + string(Perlito6$JavaScript.escape_function('string')) + string('(')))) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<+>')) ) { (function () {
                throw((string(Perlito6$JavaScript.escape_function('add')) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<..>')) ) { (function () {
                throw((string('(function (a) ' + String.fromCharCode(123) + ' ') + string('for (var i' + String.fromCharCode(61)) + string(v_self.v_arguments[0].emit_javascript()) + string(', l' + String.fromCharCode(61)) + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ') + string('i<' + String.fromCharCode(61) + 'l' + String.fromCharCode(59) + ' ++i)') + string(String.fromCharCode(123) + ' ') + string('a.push(i) ') + string(String.fromCharCode(125) + String.fromCharCode(59) + ' ') + string('return a ') + string(String.fromCharCode(125) + ')([])')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or((v_code == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>'), function () { return (v_code == 'infix:<and>'); })) ) { (function () {
                throw((string(Perlito6$JavaScript.escape_function('and')) + string('(') + string(v_self.v_arguments[0].emit_javascript()) + string(', ') + string('function () ' + String.fromCharCode(123) + ' return ') + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + ')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or((v_code == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>'), function () { return (v_code == 'infix:<or>'); })) ) { (function () {
                throw((string(Perlito6$JavaScript.escape_function('or')) + string('(') + string(v_self.v_arguments[0].emit_javascript()) + string(', ') + string('function () ' + String.fromCharCode(123) + ' return ') + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + ')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(47) + String.fromCharCode(47) + '>')) ) { (function () {
                throw((string(Perlito6$JavaScript.escape_function('defined_or')) + string('(') + string(v_self.v_arguments[0].emit_javascript()) + string(', ') + string('function () ' + String.fromCharCode(123) + ' return ') + string(v_self.v_arguments[1].emit_javascript()) + string(String.fromCharCode(59) + ' ' + String.fromCharCode(125) + ')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(') + string(Perlito6$JavaScript.escape_function('id')) + string('(') + string((v_self.v_arguments[0]).emit_javascript()) + string(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ') + string(Perlito6$JavaScript.escape_function('id')) + string('(') + string((v_self.v_arguments[1]).emit_javascript()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'exists')) ) { (function () {
                var v_arg = null;

(v_arg = v_self.v_arguments[0]);
                if ( bool(isa(v_arg, 'Lookup')) ) { (function () {
                    throw((string('(') + string((v_arg.obj()).emit_javascript()) + string(').hasOwnProperty(') + string((v_arg.index_exp()).emit_javascript()) + string(')')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('( ') + string(Perlito6$JavaScript.escape_function('bool')) + string('(') + string((v_self.v_arguments[0]).emit_javascript()) + string(')') + string(' ' + String.fromCharCode(63) + ' ') + string((v_self.v_arguments[1]).emit_javascript()) + string(' : ') + string((v_self.v_arguments[2]).emit_javascript()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'circumfix:<( )>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw(v__NAMESPACE.emit_javascript_bind(v_self.v_arguments[0], v_self.v_arguments[1]));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'return')) ) { (function () {
                throw((string(Perlito6$JavaScript.tab(v_level)) + string('throw(') + string((( bool(v_self.v_arguments) ? v_self.v_arguments[0].emit_javascript() : 'null'))) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_namespace) ) { (function () {
(v_code = (string(Main.to_javascript_namespace(v_self.v_namespace)) + string('.') + string(Perlito6$JavaScript.escape_function(v_code))));;
            })(); }
            else { (function () {
                if ( bool(( bool((Hash_op_global_js).hasOwnProperty(v_code)) ? false : true)) ) { (function () {
(v_code = (string('v__NAMESPACE.') + string(Perlito6$JavaScript.escape_function(v_code))));;
                })(); }
                else { (function () {
(v_code = Perlito6$JavaScript.escape_function(v_self.v_code));;
                })(); };;
            })(); };
            return((string(Perlito6$JavaScript.tab(v_level)) + string(v_code) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_javascript_indented;  // v8 bug workaround
  // sub emit_javascript_bind
  Apply.emit_javascript_bind = function (v_parameters, v_arguments) {
        try {
            if ( bool(isa(v_parameters, 'Call')) ) { (function () {
                throw((string('(') + string((v_parameters.invocant()).emit_javascript()) + string('.v_') + string(v_parameters.method()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Lookup')) ) { (function () {
                var v_str = null;

                var v_var = null;

                var v_var_js = null;

                var v_index_js = null;

(v_str = '');
(v_var = v_parameters.obj());
                if ( bool(isa(v_var, 'Lookup')) ) { (function () {
                    var v_var1 = null;

                    var v_var1_js = null;

(v_var1 = v_var.obj());
(v_var1_js = v_var1.emit_javascript());
(v_str = (string(v_str) + string('if (') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null) ' + String.fromCharCode(123) + ' ') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_var_js = (string(v_var1_js) + string('[') + string(v_var.index_exp().emit_javascript()) + string(']')));;
                })(); }
                else { (function () {
(v_var_js = v_var.emit_javascript());;
                })(); };
(v_str = (string(v_str) + string('if (') + string(v_var_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null) ' + String.fromCharCode(123) + ' ') + string(v_var_js) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(123) + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_index_js = v_parameters.index_exp().emit_javascript());
(v_str = (string(v_str) + string('return (') + string(v_var_js) + string('[') + string(v_index_js) + string('] ') + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(')' + String.fromCharCode(59) + ' ')));
                throw((string('(function () ' + String.fromCharCode(123) + ' ') + string(v_str) + string(String.fromCharCode(125) + ')()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Index')) ) { (function () {
                var v_str = null;

                var v_var = null;

                var v_var_js = null;

                var v_index_js = null;

(v_str = '');
(v_var = v_parameters.obj());
                if ( bool(isa(v_var, 'Index')) ) { (function () {
                    var v_var1 = null;

                    var v_var1_js = null;

(v_var1 = v_var.obj());
(v_var1_js = v_var1.emit_javascript());
(v_str = (string(v_str) + string('if (') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null) ' + String.fromCharCode(123) + ' ') + string(v_var1_js) + string(' ' + String.fromCharCode(61) + ' [] ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_var_js = (string(v_var1_js) + string('[') + string(v_var.index_exp().emit_javascript()) + string(']')));;
                })(); }
                else { (function () {
(v_var_js = v_var.emit_javascript());;
                })(); };
(v_str = (string(v_str) + string('if (') + string(v_var_js) + string(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' null) ' + String.fromCharCode(123) + ' ') + string(v_var_js) + string(' ' + String.fromCharCode(61) + ' [] ' + String.fromCharCode(125) + String.fromCharCode(59) + ' ')));
(v_index_js = v_parameters.index_exp().emit_javascript());
(v_str = (string(v_str) + string('return (') + string(v_var_js) + string('[') + string(v_index_js) + string('] ') + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(')' + String.fromCharCode(59) + ' ')));
                throw((string('(function () ' + String.fromCharCode(123) + ' ') + string(v_str) + string(String.fromCharCode(125) + ')()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(64)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(37)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            return((string('(') + string(v_parameters.emit_javascript()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_javascript()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_javascript_bind;  // v8 bug workaround
(Hash_op_infix_js = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<->']  = ' - '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<*>']  = ' * '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(47) + '>']  = ' ' + String.fromCharCode(47) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<>>']  = ' > '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<<>']  = ' < '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<>' + String.fromCharCode(61) + '>']  = ' >' + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<<' + String.fromCharCode(61) + '>']  = ' <' + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<eq>']  = ' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<ne>']  = ' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<le>']  = ' <' + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<ge>']  = ' >' + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>']  = ' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>']  = ' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' '); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(61) + '>>']  = ', '); })();
    return(Hash_a);
})());(Hash_op_global_js = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['index']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['die']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['shift']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['unshift']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['push']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['pop']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['chr']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['say']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['print']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['warn']  = 1); })();
    return(Hash_a);
})());})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // method emit_javascript
  If.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  If.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

            var v_body = null;

            var v_s = null;

(v_cond = v_self.v_cond);
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_body = (function () { var tmp = {v_block: v_self.v_body.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
(v_s = (string(Perlito6$JavaScript.tab(v_level)) + string('if ( ') + string(Perlito6$JavaScript.escape_function('bool')) + string('(') + string(v_cond.emit_javascript()) + string(') ) ' + String.fromCharCode(123) + ' ') + string('(function () ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_body.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125) + ')()' + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));
            if ( bool(v_self.v_otherwise) ) { (function () {
                var v_otherwise = null;

(v_otherwise = (function () { var tmp = {v_block: v_self.v_otherwise.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
(v_s = (string(v_s) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string('else ' + String.fromCharCode(123) + ' ') + string('(function () ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(v_otherwise.emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125) + ')()' + String.fromCharCode(59) + ' ' + String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_javascript_indented;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // method emit_javascript
  While.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  While.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_body = null;

(v_body = (function () { var tmp = {v_block: v_self.v_body.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
            throw((string(Perlito6$JavaScript.tab(v_level)) + string('for ( ') + string((( bool(v_self.v_init) ? (string(v_self.v_init.emit_javascript()) + string(String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_self.v_cond) ? (string(Perlito6$JavaScript.escape_function('bool')) + string('(') + string(v_self.v_cond.emit_javascript()) + string(')' + String.fromCharCode(59) + ' ')) : String.fromCharCode(59) + ' '))) + string((( bool(v_self.v_continue) ? (string(v_self.v_continue.emit_javascript()) + string(' ')) : ' '))) + string(') ' + String.fromCharCode(123) + ' ') + string('(function () ' + String.fromCharCode(123) + ' ') + string(v_body.emit_javascript_indented(add(v_level, 1))) + string(' ' + String.fromCharCode(125) + ')()') + string(' ' + String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_javascript_indented;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // method emit_javascript
  For.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  For.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_cond = null;

            var v_body = null;

            var v_sig = null;

(v_cond = v_self.v_cond);
            if ( bool(( bool((and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); }))) ? false : true)) ) { (function () {
(v_cond = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_body = (function () { var tmp = {v_block: v_self.v_body.stmts(),v_needs_return: 0}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })());
(v_sig = 'v__');
            if ( bool(v_self.v_body.sig()) ) { (function () {
(v_sig = v_self.v_body.sig().emit_javascript_indented(add(v_level, 1)));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Perlito6$JavaScript.tab(v_level)) + string('(function (a_) ' + String.fromCharCode(123) + ' for (var i_ ' + String.fromCharCode(61) + ' 0' + String.fromCharCode(59) + ' i_ < a_.length ' + String.fromCharCode(59) + ' i_++) ' + String.fromCharCode(123) + ' ') + string((string('(function (') + string(v_sig) + string(') ') + string(String.fromCharCode(123)) + string(' '))) + string(v_body.emit_javascript_indented(add(v_level, 1))) + string(' ' + String.fromCharCode(125) + ')(a_[i_]) ' + String.fromCharCode(125) + ' ' + String.fromCharCode(125) + ')') + string('(') + string(v_cond.emit_javascript()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_javascript_indented;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_javascript
  Decl.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Decl.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string(v_self.v_var.emit_javascript())));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_javascript_indented;  // v8 bug workaround
  // method emit_javascript_init
  Decl.emit_javascript_init = function () {
    var v_self = this;
        try {
            if ( bool((v_self.v_decl == 'my')) ) { return (function () {
                var v_str = null;

(v_str = '');
(v_str = (string(v_str) + string('var ') + string((v_self.v_var).emit_javascript()) + string(' ' + String.fromCharCode(61) + ' ')));
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
(v_str = (string(v_str) + string(String.fromCharCode(123) + String.fromCharCode(125) + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
(v_str = (string(v_str) + string('[]' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); }
                    else { (function () {
(v_str = (string(v_str) + string('null' + String.fromCharCode(59)) + string((string(String.fromCharCode(10))))));;
                    })(); };;
                })(); };
                throw(v_str);
            })(); }
            else { return (function () {
                return(die((string('not implemented: Decl ' + String.fromCharCode(39)) + string(v_self.v_decl) + string((string(String.fromCharCode(39)))))));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_javascript_init;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_javascript
  Method.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Method.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_str = null;

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str = (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos).join(', '));
            return((string(Perlito6$JavaScript.tab(v_level)) + string('function ') + string(v_self.v_name) + string('(') + string(v_str) + string(') ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_javascript_indented;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_javascript
  Sub.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Sub.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_pos = null;

            var v_str = null;

(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_str = (function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_javascript() ) }; return out; })(v_pos).join(', '));
            return((string(Perlito6$JavaScript.tab(v_level)) + string('function ') + string(v_self.v_name) + string('(') + string(v_str) + string(') ' + String.fromCharCode(123)) + string((string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1,v_top_level: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_javascript_indented;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_javascript
  Do.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Do.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            var v_block = null;

(v_block = v_self.simplify().block());
            throw((string(Perlito6$JavaScript.tab(v_level)) + string('(function () ' + String.fromCharCode(123) + ' ') + string((string(String.fromCharCode(10)))) + string(((function () { var tmp = {v_block: v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$JavaScript$LexicalBlock; return tmp; })()).emit_javascript_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(125) + ')()')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_javascript_indented;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_javascript
  Use.emit_javascript = function () {
    var v_self = this;
        try {
            return(v_self.emit_javascript_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_javascript;  // v8 bug workaround
  // method emit_javascript_indented
  Use.emit_javascript_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Perlito6$JavaScript.tab(v_level)) + string(String.fromCharCode(47) + String.fromCharCode(47) + ' use ') + string(v_self.v_mod) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_javascript_indented;  // v8 bug workaround
})()
;    // use v6
;// class Perlito6::Lisp::LexicalBlock
if (typeof Perlito6$Lisp$LexicalBlock !== 'object') {
  Perlito6$Lisp$LexicalBlock = function() {};
  Perlito6$Lisp$LexicalBlock = new Perlito6$Lisp$LexicalBlock;
  Perlito6$Lisp$LexicalBlock.isa = function (s) { return s == 'Perlito6::Lisp::LexicalBlock'; };
  Perlito6$Lisp$LexicalBlock.perl = function () { return 'Perlito6::Lisp::LexicalBlock.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Lisp$LexicalBlock;
  // accessor block
  Perlito6$Lisp$LexicalBlock.v_block = null;
  Perlito6$Lisp$LexicalBlock.block = function () { return this.v_block; };
  // method emit_lisp
  Perlito6$Lisp$LexicalBlock.emit_lisp = function () {
    var v_self = this;
        try {
            var List_block = [];

            var v_str = null;

            var v_has_my_decl = null;

            var v_my_decl = null;

            var v_my_ignore = null;

            var Hash_decl_seen = {};

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v__) {                 if ( bool((v__ != null)) ) { (function () {
                    push(List_block, v__);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(( bool((v_self.v_block)) ? false : true)) ) { (function () {
                throw('nil');;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = '');
(v_has_my_decl = 0);
(v_my_decl = '');
(v_my_ignore = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = (v_decl.var()).emit_lisp());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_has_my_decl = 1);
(v_my_decl = (string(v_my_decl) + string(Decl.emit_lisp_initializer(v_decl.var()))));
(v_my_ignore = (string(v_my_ignore) + string('(declare (ignorable ') + string(v_var_name) + string((string('))') + string(String.fromCharCode(10))))));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(and(isa(v_decl, 'Bind'), function () { return isa((v_decl.parameters()), 'Decl'); }), function () { return (((v_decl.parameters()).decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = ((v_decl.parameters()).var()).emit_lisp());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_has_my_decl = 1);
(v_my_decl = (string(v_my_decl) + string(Decl.emit_lisp_initializer((v_decl.parameters()).var()))));
(v_my_ignore = (string(v_my_ignore) + string('(declare (ignorable ') + string(v_var_name) + string((string('))') + string(String.fromCharCode(10))))));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(v_has_my_decl) ) { (function () {
(v_str = (string(v_str) + string('(let (') + string(v_my_decl) + string((string(')') + string(String.fromCharCode(10)))) + string(v_my_ignore)));;
            })(); }
            else { (function () {
(v_str = (string(v_str) + string('(progn ')));;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool((( bool((and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); }))) ? false : true))) ) { (function () {
(v_str = (string(v_str) + string((v_decl).emit_lisp())));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            throw((string(v_str) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Lisp$LexicalBlock.emit_lisp;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // method emit_lisp
  CompUnit.emit_lisp = function () {
    var v_self = this;
        try {
            var v_class_name = null;

            var v_str = null;

            var v_has_my_decl = null;

            var v_my_decl = null;

            var v_my_ignore = null;

            var Hash_decl_seen = {};

            var v_dumper = null;

(v_class_name = Main.to_lisp_namespace(v_self.v_name));
(v_str = (string(String.fromCharCode(59) + String.fromCharCode(59) + ' class ') + string(v_self.v_name) + string((string(String.fromCharCode(10))))));
(v_has_my_decl = 0);
(v_my_decl = '');
(v_my_ignore = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = (v_decl.var()).emit_lisp());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_has_my_decl = 1);
(v_my_decl = (string(v_my_decl) + string(Decl.emit_lisp_initializer(v_decl.var()))));
(v_my_ignore = (string(v_my_ignore) + string('(declare (ignorable ') + string(v_var_name) + string((string('))') + string(String.fromCharCode(10))))));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(and(isa(v_decl, 'Bind'), function () { return isa((v_decl.parameters()), 'Decl'); }), function () { return (((v_decl.parameters()).decl() == 'my')); })) ) { (function () {
                    var v_var_name = null;

(v_var_name = ((v_decl.parameters()).var()).emit_lisp());
                    if ( bool(( bool(((function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name] ); })())) ? false : true)) ) { (function () {
(v_has_my_decl = 1);
(v_my_decl = (string(v_my_decl) + string(Decl.emit_lisp_initializer((v_decl.parameters()).var()))));
(v_my_ignore = (string(v_my_ignore) + string('(declare (ignorable ') + string(v_var_name) + string((string('))') + string(String.fromCharCode(10))))));
(function () { if (Hash_decl_seen == null) { Hash_decl_seen = {} }; return (Hash_decl_seen[v_var_name]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            if ( bool(v_has_my_decl) ) { (function () {
(v_str = (string(v_str) + string('(let (') + string(v_my_decl) + string((string(')') + string(String.fromCharCode(10)))) + string(v_my_ignore)));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_dumper = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
                    var v_accessor_name = null;

(v_accessor_name = (v_decl.var()).name());
(v_dumper = (string(v_dumper) + string('(let ((m (make-instance ' + String.fromCharCode(39) + 'mp-Pair))) ') + string('(setf (sv-key m) ' + String.fromCharCode(34)) + string(Main.lisp_escape_string(v_accessor_name)) + string(String.fromCharCode(34) + ') ') + string('(setf (sv-value m) (') + string(Main.to_lisp_identifier(v_accessor_name)) + string(' self)) m) ')));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Method')) ) { (function () {
                    var v_sig = null;

                    var v_invocant = null;

                    var v_pos = null;

                    var v_str_specific = null;

                    var v_str_optionals = null;

                    var v_ignorable = null;

                    var v_block = null;

(v_sig = v_decl.sig());
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str_specific = (string('(') + string(v_invocant.emit_lisp()) + string(' ') + string(v_class_name) + string(')')));
(v_str_optionals = '');
(v_ignorable = '');
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str_optionals = (string(v_str_optionals) + string(' ') + string(v_field.emit_lisp())));
(v_ignorable = (string(v_ignorable) + string((string(String.fromCharCode(10)))) + string('  (declare (ignorable ') + string(v_field.emit_lisp()) + string((string('))')))));; })(a_[i_]) } })((v_pos));
                    if ( bool((v_str_optionals)) ) { (function () {
(v_str_specific = (string(v_str_specific) + string(' ' + String.fromCharCode(38) + 'optional') + string(v_str_optionals)));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_block = (function () { var tmp = {v_block: v_decl.block()}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string(String.fromCharCode(59) + String.fromCharCode(59) + ' method ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('(defmethod ') + string(Main.to_lisp_identifier(v_decl.name())) + string(' (') + string(v_str_specific) + string(')') + string(v_ignorable) + string((string(String.fromCharCode(10)))) + string('  (block mp6-function') + string((string(String.fromCharCode(10)))) + string('    ') + string(v_block.emit_lisp()) + string((string('))') + string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_decl, 'Sub')) ) { (function () {
                    var v_pos = null;

                    var v_param = null;

                    var v_ignorable = null;

                    var v_sig = null;

                    var v_block = null;

(v_pos = (v_decl.sig()).positional());
(v_ignorable = '');
                    if ( bool((v_pos)) ) { (function () {
                        (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_param = (string(v_param) + string(v_field.emit_lisp()) + string(' ')));
(v_ignorable = (string(v_ignorable) + string((string(String.fromCharCode(10)))) + string('  (declare (ignorable ') + string(v_field.emit_lisp()) + string((string('))')))));; })(a_[i_]) } })((v_pos));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_sig = '');
                    if ( bool(v_param) ) { (function () {
(v_sig = (string(String.fromCharCode(38) + 'optional ') + string(v_param)));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_block = (function () { var tmp = {v_block: v_decl.block()}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })());
(v_str = (string(v_str) + string('(defmethod ') + string(v_class_name) + string('-') + string(Main.to_lisp_identifier(v_decl.name())) + string(' (') + string(v_sig) + string(')') + string(v_ignorable) + string((string(String.fromCharCode(10)))) + string('  (block mp6-function ') + string(v_block.emit_lisp()) + string('))') + string((string(String.fromCharCode(10)))) + string('(in-package ') + string(v_class_name) + string(')') + string((string(String.fromCharCode(10)))) + string('  (defun ') + string(Main.to_lisp_identifier(v_decl.name())) + string(' (') + string(v_sig) + string(')') + string((string(String.fromCharCode(10)))) + string('    (mp-Main::') + string(v_class_name) + string('-') + string(Main.to_lisp_identifier(v_decl.name())) + string(' ') + string(v_param) + string('))') + string((string(String.fromCharCode(10)))) + string('(in-package mp-Main)') + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            if ( bool((v_self.v_name != 'Pair')) ) { (function () {
(v_str = (string(v_str) + string('(defmethod sv-perl ((self ') + string(v_class_name) + string('))') + string((string(String.fromCharCode(10)))) + string('  (mp-Main-sv-lisp_dump_object ' + String.fromCharCode(34)) + string(Main.lisp_escape_string(v_self.v_name)) + string(String.fromCharCode(34)) + string(' (list ') + string(v_dumper) + string(')))') + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_str = (string(v_str) + string('(defun run-') + string(v_class_name) + string(' ()') + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(and((( bool((and(isa(v_decl, 'Decl'), function () { return (or(((v_decl.decl() == 'has')), function () { return ((v_decl.decl() == 'my')); })); }))) ? false : true)), function () { return (( bool((isa(v_decl, 'Method'))) ? false : true)); }), function () { return (( bool((isa(v_decl, 'Sub'))) ? false : true)); })) ) { (function () {
(v_str = (string(v_str) + string((v_decl).emit_lisp()) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
(v_str = (string(v_str) + string(')') + string((string(String.fromCharCode(10))))));
            if ( bool(v_has_my_decl) ) { (function () {
(v_str = (string(v_str) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((v_str = (string(v_str) + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_lisp;  // v8 bug workaround
  // sub emit_lisp_program
  CompUnit.emit_lisp_program = function (v_comp_units) {
        try {
            var v_str = null;

            var Hash_unit_seen = {};

            var List_tmp_comp_unit = [];

(v_str = '');
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 var v_name = null;

(v_name = v_comp_unit.name());
                if ( bool((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name] ); })()) ) { (function () {
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                         push(((function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name] ); })()).body(), v_stmt);; })(a_[i_]) } })(((v_comp_unit.body())));;
                })(); }
                else { (function () {
(function () { if (Hash_unit_seen == null) { Hash_unit_seen = {} }; return (Hash_unit_seen[v_name]  = v_comp_unit); })();
                    push(List_tmp_comp_unit, v_comp_unit);;
                })(); };; })(a_[i_]) } })(((v_comp_units)));
(v_comp_units = List_tmp_comp_unit);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                     if ( bool(isa(v_stmt, 'Method')) ) { (function () {
(function () { if ((v_comp_unit.methods()) == null) { (v_comp_unit.methods()) = {} }; return ((v_comp_unit.methods())[v_stmt.name()]  = v_stmt); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(isa(v_stmt, 'Decl'), function () { return ((v_stmt.decl() == 'has')); })) ) { (function () {
(function () { if ((v_comp_unit.attributes()) == null) { (v_comp_unit.attributes()) = {} }; return ((v_comp_unit.attributes())[(v_stmt.var()).name()]  = v_stmt); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_comp_unit.body())));; })(a_[i_]) } })(((v_comp_units)));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 var v_class_name = null;

(v_class_name = Main.to_lisp_namespace(v_comp_unit.name()));
                if ( bool((v_class_name != 'mp-Main')) ) { (function () {
(v_str = (string(v_str) + string('(defpackage ') + string(v_class_name) + string((string(String.fromCharCode(10)))) + string('  (:use common-lisp mp-Main))') + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_str = (string(v_str) + string('(if (not (ignore-errors (find-class ' + String.fromCharCode(39)) + string(v_class_name) + string(')))') + string((string(String.fromCharCode(10)))) + string('  (defclass ') + string(v_class_name) + string(' () ()))') + string((string(String.fromCharCode(10))))));
(v_str = (string(v_str) + string('(let (x)') + string((string(String.fromCharCode(10)))) + string('  (setq x (make-instance ' + String.fromCharCode(39)) + string(v_class_name) + string((string('))') + string(String.fromCharCode(10)))) + string('  (defun proto-') + string(v_class_name) + string(' () x))') + string((string(String.fromCharCode(10))))));
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                     if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
                        var v_accessor_name = null;

(v_accessor_name = (v_decl.var()).name());
(v_str = (string(v_str) + string(String.fromCharCode(59) + String.fromCharCode(59) + ' has ' + String.fromCharCode(36) + '.') + string(v_accessor_name) + string((string(String.fromCharCode(10)))) + string('(let ((new-slots (list (list :name ' + String.fromCharCode(39)) + string(Main.to_lisp_identifier(v_accessor_name)) + string(String.fromCharCode(10) + '  :readers ' + String.fromCharCode(39) + '(') + string(Main.to_lisp_identifier(v_accessor_name)) + string(')' + String.fromCharCode(10) + '  :writers ' + String.fromCharCode(39) + '((setf ') + string(Main.to_lisp_identifier(v_accessor_name)) + string('))' + String.fromCharCode(10) + '  :initform ' + String.fromCharCode(39) + '(sv-undef)' + String.fromCharCode(10) + '  :initfunction (constantly (sv-undef))))))' + String.fromCharCode(10) + '(dolist (slot-defn (sb-mop:class-direct-slots (find-class ' + String.fromCharCode(39)) + string(v_class_name) + string(')))' + String.fromCharCode(10) + '(push (list :name (sb-mop:slot-definition-name slot-defn)' + String.fromCharCode(10) + '  :readers (sb-mop:slot-definition-readers slot-defn)' + String.fromCharCode(10) + '  :writers (sb-mop:slot-definition-writers slot-defn)' + String.fromCharCode(10) + '  :initform (sb-mop:slot-definition-initform slot-defn)' + String.fromCharCode(10) + '  :initfunction (sb-mop:slot-definition-initfunction slot-defn))' + String.fromCharCode(10) + 'new-slots))' + String.fromCharCode(10) + '(sb-mop:ensure-class ' + String.fromCharCode(39)) + string(v_class_name) + string(' :direct-slots new-slots))') + string((string(String.fromCharCode(10)) + string(String.fromCharCode(10))))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(isa(v_decl, 'Method')) ) { (function () {
                        var v_sig = null;

                        var v_invocant = null;

                        var v_pos = null;

                        var v_str_generic = null;

                        var v_str_optionals = null;

(v_sig = v_decl.sig());
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str_generic = v_invocant.emit_lisp());
(v_str_optionals = '');
                        (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str_optionals = (string(v_str_optionals) + string(' ') + string(v_field.emit_lisp())));; })(a_[i_]) } })((v_pos));
                        if ( bool((v_str_optionals)) ) { (function () {
(v_str_generic = (string(v_str_generic) + string(' ' + String.fromCharCode(38) + 'optional') + string(v_str_optionals)));;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
(v_str = (string(v_str) + string(String.fromCharCode(59) + String.fromCharCode(59) + ' method ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('(if (not (ignore-errors (find-method ' + String.fromCharCode(39)) + string(Main.to_lisp_identifier(v_decl.name())) + string(' () ())))' + String.fromCharCode(10) + '  (defgeneric ') + string(Main.to_lisp_identifier(v_decl.name())) + string(' (') + string(v_str_generic) + string(')') + string((string(String.fromCharCode(10)))) + string('      (:documentation ') + string(String.fromCharCode(34)) + string('a method') + string(String.fromCharCode(34)) + string(')))') + string((string(String.fromCharCode(10))))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(isa(v_decl, 'Sub')) ) { (function () {
                        var v_pos = null;

                        var v_param = null;

                        var v_sig = null;

(v_pos = (v_decl.sig()).positional());
                        if ( bool((v_pos)) ) { (function () {
                            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_param = (string(v_param) + string(v_field.emit_lisp()) + string(' ')));; })(a_[i_]) } })((v_pos));;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
(v_sig = '');
                        if ( bool(v_param) ) { (function () {
(v_sig = (string(String.fromCharCode(38) + 'optional ') + string(v_param)));;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
(v_str = (string(v_str) + string(String.fromCharCode(59) + String.fromCharCode(59) + ' sub ') + string(v_decl.name()) + string((string(String.fromCharCode(10)))) + string('(if (not (ignore-errors (find-method ' + String.fromCharCode(39)) + string(v_class_name) + string('-') + string(Main.to_lisp_identifier(v_decl.name())) + string(' () ())))' + String.fromCharCode(10) + '  (defgeneric ') + string(v_class_name) + string('-') + string(Main.to_lisp_identifier(v_decl.name())) + string(' (') + string(v_sig) + string(')') + string((string(String.fromCharCode(10)))) + string('      (:documentation ') + string(String.fromCharCode(34)) + string('a method') + string(String.fromCharCode(34)) + string(')))') + string((string(String.fromCharCode(10))))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_comp_unit.body())));; })(a_[i_]) } })(((v_comp_units)));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string(v_comp_unit.emit_lisp()) + string((string(String.fromCharCode(10))))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string('(defun compiler-main ()') + string(String.fromCharCode(10)))) + string((string('  (progn') + string(String.fromCharCode(10)))) + string((string('    (init-argv)')))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) { (v_str = (string(v_str) + string((string(String.fromCharCode(10)) + string('    (run-'))) + string(Main.to_lisp_namespace(v_comp_unit.name())) + string((string(')')))));; })(a_[i_]) } })(((v_comp_units)));
(v_str = (string(v_str) + string((string('))') + string(String.fromCharCode(10))))));
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_lisp_program;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_lisp
  Val$Int.emit_lisp = function () {
    var v_self = this;
        try {
            return(v_self.v_int);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_lisp;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_lisp
  Val$Bit.emit_lisp = function () {
    var v_self = this;
        try {
            return(( bool(v_self.v_bit) ? 'T' : 'nil'));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_lisp;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_lisp
  Val$Num.emit_lisp = function () {
    var v_self = this;
        try {
            return(v_self.v_num);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_lisp;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_lisp
  Val$Buf.emit_lisp = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(34)) + string(Main.lisp_escape_string(v_self.v_buf)) + string(String.fromCharCode(34))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_lisp;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_lisp
  Lit$Array.emit_lisp = function () {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_lisp());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_lisp;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_lisp
  Lit$Hash.emit_lisp = function () {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_lisp());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_lisp;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_lisp
  Index.emit_lisp = function () {
    var v_self = this;
        try {
            throw((string('(mp-Main::sv-array-index ') + string(v_self.v_obj.emit_lisp()) + string(' ') + string(v_self.v_index_exp.emit_lisp()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_lisp;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_lisp
  Lookup.emit_lisp = function () {
    var v_self = this;
        try {
            throw((string('(mp-Main::sv-hash-lookup ') + string(v_self.v_index_exp.emit_lisp()) + string(' ') + string(v_self.v_obj.emit_lisp()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_lisp;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // method emit_lisp
  Var.emit_lisp = function () {
    var v_self = this;
        try {
            var v_ns = null;

(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(Main.to_lisp_namespace(v_self.v_namespace)) + string('-')));;
            })(); }
            else { (function () {
                if ( bool(and(and(((v_self.v_sigil == String.fromCharCode(64))), function () { return ((v_self.v_twigil == '*')); }), function () { return ((v_self.v_name == 'ARGS')); })) ) { (function () {
                    throw('*mp6-args*');;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            return(( bool(((v_self.v_twigil == '.'))) ? ((string('(') + string(Main.to_lisp_identifier(v_self.v_name)) + string(' sv-self)'))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? (Main.to_lisp_identifier('MATCH')) : ((string(v_ns) + string(Main.to_lisp_identifier(v_self.v_name))))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_lisp;  // v8 bug workaround
})()
;// class Bind
if (typeof Bind !== 'object') {
  Bind = function() {};
  Bind = new Bind;
  Bind.isa = function (s) { return s == 'Bind'; };
  Bind.perl = function () { return 'Bind.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Bind;
  // accessor parameters
  Bind.v_parameters = null;
  Bind.parameters = function () { return this.v_parameters; };
  // accessor arguments
  Bind.v_arguments = null;
  Bind.arguments = function () { return this.v_arguments; };
  // method emit_lisp
  Bind.emit_lisp = function () {
    var v_self = this;
        try {
            if ( bool(and(isa(v_self.v_parameters, 'Decl'), function () { return ((v_self.v_parameters.decl() == 'my')); })) ) { (function () {
                throw((string('(setf ') + string((v_self.v_parameters.var()).emit_lisp()) + string(' ') + string(v_self.v_arguments.emit_lisp()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('(setf ') + string(v_self.v_parameters.emit_lisp()) + string(' ') + string(v_self.v_arguments.emit_lisp()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Bind.emit_lisp;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_lisp
  Proto.emit_lisp = function () {
    var v_self = this;
        try {
            return((string('(proto-') + string(Main.to_lisp_namespace(v_self.v_name)) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_lisp;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // method emit_lisp
  Call.emit_lisp = function () {
    var v_self = this;
        try {
            var v_arguments = null;

            var v_invocant = null;

            var v_meth = null;

(v_arguments = ((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_lisp() ) }; return out; })(v_self.v_arguments)).join(' '));
(v_invocant = v_self.v_invocant.emit_lisp());
            if ( bool((v_invocant == '(proto-mp-self)')) ) { (function () {
(v_invocant = 'sv-self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'isa')) ) { (function () {
                if ( bool((((v_self.v_arguments[0]).buf()) == 'Str')) ) { (function () {
                    throw((string('(typep ') + string(v_invocant) + string(' ' + String.fromCharCode(39) + 'string)')));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string('(typep ') + string(v_invocant) + string(' ' + String.fromCharCode(39)) + string(Main.to_lisp_namespace((v_self.v_arguments[0]).buf())) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_method == 'chars')) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    die((string('not implemented')));;
                })(); }
                else { (function () {
                    throw((string('(length ') + string(v_invocant) + string(')')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(((v_self.v_method == 'yaml')), function () { return ((v_self.v_method == 'say')); })) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string('[ map ' + String.fromCharCode(123) + ' ') + string(v_self.v_method) + string('( ' + String.fromCharCode(36) + '_, ') + string(', ') + string(v_arguments) + string(')') + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(64) + String.fromCharCode(123) + ' ') + string(v_invocant) + string(' ' + String.fromCharCode(125) + ' ]')));;
                })(); }
                else { (function () {
                    throw((string('(') + string(v_self.v_method) + string(' ') + string(v_invocant) + string(' ') + string(v_arguments) + string(')')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = (string(Main.to_lisp_identifier(v_self.v_method)) + string(' ')));
            if ( bool((v_self.v_method == 'postcircumfix:<( )>')) ) { (function () {
                throw((string('(funcall ') + string(v_invocant) + string(' ') + string(v_arguments) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_self.v_hyper)) ) { return (function () {
                throw((string('(map ' + String.fromCharCode(39) + 'vector ' + String.fromCharCode(35) + String.fromCharCode(39) + '(lambda (c) (') + string(v_meth) + string(' c)) ') + string(v_invocant) + string(')')));
            })(); }
            else { return (function () {
                throw((string('(') + string(v_meth) + string(v_invocant) + string(' ') + string(v_arguments) + string(')')));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_lisp;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // method emit_lisp
  Apply.emit_lisp = function () {
    var v_self = this;
        try {
            var v_ns = null;

            var v_code = null;

            var v_args = null;

(v_ns = '');
            if ( bool(v_self.v_namespace) ) { (function () {
(v_ns = (string(Main.to_lisp_namespace(v_self.v_namespace)) + string('-')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = (string(v_ns) + string(v_self.v_code)));
            if ( bool((v_code == 'infix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string('(concatenate ' + String.fromCharCode(39) + 'string (sv-string ') + string((v_self.v_arguments[0]).emit_lisp()) + string(') (sv-string ') + string((v_self.v_arguments[1]).emit_lisp()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('(if (sv-bool ') + string((v_self.v_arguments[0]).emit_lisp()) + string(') ') + string((v_self.v_arguments[1]).emit_lisp()) + string(' ') + string((v_self.v_arguments[2]).emit_lisp()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_args = '');
            if ( bool((v_self.v_arguments)) ) { (function () {
(v_args = ((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_lisp() ) }; return out; })(v_self.v_arguments)).join(' '));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw('sv-self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'False')) ) { (function () {
                throw('nil');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'True')) ) { (function () {
                throw('T');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string('(setf (sv-capture sv-MATCH) ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string('(sv-substr ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'say')) ) { (function () {
                throw((string('(mp-Main::sv-say (list ') + string(v_args) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'print')) ) { (function () {
                throw((string('(mp-Main::sv-print (list ') + string(v_args) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'warn')) ) { (function () {
                throw((string('(write-line (format nil ' + String.fromCharCode(34) + String.fromCharCode(126) + String.fromCharCode(123) + String.fromCharCode(126) + 'a' + String.fromCharCode(126) + String.fromCharCode(125) + String.fromCharCode(34) + ' (list ') + string(v_args) + string(')) *error-output*)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'die')) ) { (function () {
                throw((string('(progn (write-line (format nil ' + String.fromCharCode(34) + String.fromCharCode(126) + String.fromCharCode(123) + String.fromCharCode(126) + 'a' + String.fromCharCode(126) + String.fromCharCode(125) + String.fromCharCode(34) + ' (list ') + string(v_args) + string(')) *error-output*) (sb-ext:quit))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'array')) ) { (function () {
                throw(v_args);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'exists')) ) { (function () {
                var v_arg = null;

(v_arg = v_self.v_arguments[0]);
                if ( bool(isa(v_arg, 'Lookup')) ) { (function () {
                    throw((string('(nth-value 1 ') + string(v_arg.emit_lisp()) + string(')')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'list:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string('(sv-string ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('(not (sv-bool ') + string(v_args) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(63) + '>')) ) { (function () {
                throw((string('(sv-bool ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string('(sv-scalar ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw(v_args);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw(v_args);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<+>')) ) { (function () {
                throw((string('(sv-add ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<->')) ) { (function () {
                throw((string('(sv-sub ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<*>')) ) { (function () {
                throw((string('(sv-mul ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(47) + '>')) ) { (function () {
                throw((string('(sv-div ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>>')) ) { (function () {
                throw((string('(sv-numeric-bigger ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<>')) ) { (function () {
                throw((string('(sv-numeric-smaller ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(sv-numeric-bigger-equal ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(sv-numeric-smaller-equal ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(sv-numeric-equal ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(not (sv-numeric-equal ') + string(v_args) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>')) ) { (function () {
                throw((string('(sv-and ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>')) ) { (function () {
                throw((string('(sv-or ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<eq>')) ) { (function () {
                throw((string('(sv-eq ') + string(v_args) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<ne>')) ) { (function () {
                throw((string('(not (sv-eq ') + string(v_args) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'circumfix:<( )>')) ) { (function () {
                throw(v_args);;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('(') + string(v_ns) + string(Main.to_lisp_identifier(v_self.v_code)) + string(' ') + string(v_args) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_lisp;  // v8 bug workaround
})()
;// class Return
if (typeof Return !== 'object') {
  Return = function() {};
  Return = new Return;
  Return.isa = function (s) { return s == 'Return'; };
  Return.perl = function () { return 'Return.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Return;
  // method emit_lisp
  Return.emit_lisp = function () {
    var v_self = this;
        try {
            throw((string('(return-from mp6-function ') + string(v_self.v_result.emit_lisp()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_lisp;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // method emit_lisp
  If.emit_lisp = function () {
    var v_self = this;
        try {
            var v_block1 = null;

(v_block1 = (function () { var tmp = {v_block: v_self.v_body.stmts()}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })());
            if ( bool(v_self.v_otherwise) ) { return (function () {
                var v_block2 = null;

(v_block2 = (function () { var tmp = {v_block: v_self.v_otherwise.stmts()}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })());
                throw((string('(if (sv-bool ') + string(v_self.v_cond.emit_lisp()) + string(') ') + string(v_block1.emit_lisp()) + string(' ') + string(v_block2.emit_lisp()) + string(')')));
            })(); }
            else { return (function () {
                throw((string('(if (sv-bool ') + string(v_self.v_cond.emit_lisp()) + string(') ') + string(v_block1.emit_lisp()) + string(')')));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_lisp;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // method emit_lisp
  For.emit_lisp = function () {
    var v_self = this;
        try {
            var v_cond = null;

            var v_block = null;

(v_cond = v_self.v_cond);
(v_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })());
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() == String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('(loop for ') + string(v_self.v_topic.emit_lisp()) + string(' across ') + string(v_cond.emit_lisp()) + string(' do ') + string(v_block.emit_lisp()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_lisp;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // method emit_lisp
  While.emit_lisp = function () {
    var v_self = this;
        try {
            var List_body = [];

(List_body = v_self.v_body);
            if ( bool(v_self.v_continue) ) { (function () {
List_body.push(v_self.v_continue);;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('(progn ') + string((( bool(v_self.v_init) ? (string(v_self.v_init.emit_lisp()) + string(' ')) : ''))) + string('(loop while (sv-bool ') + string(v_self.v_cond.emit_lisp()) + string(') do ') + string(((function () { var tmp = {v_block: List_body}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })()).emit_lisp()) + string('))')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_lisp;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_lisp
  Decl.emit_lisp = function () {
    var v_self = this;
        try {
            var v_decl = null;

            var v_name = null;

(v_decl = v_self.v_decl);
(v_name = v_self.v_var.name());
            return(( bool(((v_decl == 'has'))) ? ((string('sub ') + string(v_name) + string(' ' + String.fromCharCode(123) + ' ') + string(String.fromCharCode(64) + '_ ' + String.fromCharCode(61) + String.fromCharCode(61) + ' 1 ') + string(String.fromCharCode(63) + ' ( ' + String.fromCharCode(36) + '_[0]->' + String.fromCharCode(123)) + string(v_name) + string(String.fromCharCode(125) + ' ) ') + string(': ( ' + String.fromCharCode(36) + '_[0]->' + String.fromCharCode(123)) + string(v_name) + string(String.fromCharCode(125) + ' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + '_[1] ) ') + string(String.fromCharCode(125)))) : (string(v_self.v_decl) + string(' ') + string(v_self.v_type) + string(' ') + string(v_self.v_var.emit_lisp()))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_lisp;  // v8 bug workaround
  // sub emit_lisp_initializer
  Decl.emit_lisp_initializer = function (v_decl) {
        try {
            if ( bool((v_decl.sigil() == String.fromCharCode(37))) ) { return (function () {
                throw((string('(') + string(v_decl.emit_lisp()) + string(' (make-hash-table :test ' + String.fromCharCode(39) + 'equal))')));
            })(); }
            else { return (function () {
                if ( bool((v_decl.sigil() == String.fromCharCode(64))) ) { return (function () {
                    throw((string('(') + string(v_decl.emit_lisp()) + string(' (make-array 0 :fill-pointer t :adjustable t))')));
                })(); }
                else { return (function () {
                    throw((string('(') + string(v_decl.emit_lisp()) + string(' (sv-undef))')));
                })(); };
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_lisp_initializer;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_lisp
  Method.emit_lisp = function () {
    var v_self = this;
        try {
            null;;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_lisp;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_lisp
  Sub.emit_lisp = function () {
    var v_self = this;
        try {
            var v_sig = null;

            var v_pos = null;

            var v_block = null;

            var v_str = null;

(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_block = (function () { var tmp = {v_block: v_self.v_block}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })());
            if ( bool((v_pos)) ) { (function () {
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = (string(v_str) + string(v_field.emit_lisp()) + string(' ')));; })(a_[i_]) } })((v_pos));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_str) ) { (function () {
(v_str = (string(String.fromCharCode(38) + 'optional ') + string(v_str)));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_name) ) { return (function () {
                return((string('(defun ') + string(Main.to_lisp_identifier(v_self.v_name)) + string(' (') + string(v_str) + string(')') + string((string(String.fromCharCode(10)))) + string('  (block mp6-function ') + string(v_block.emit_lisp()) + string('))') + string((string(String.fromCharCode(10))))));
            })(); }
            else { return (function () {
                return((string('(lambda ') + string(v_self.v_name) + string(' (') + string(v_str) + string(')') + string((string(String.fromCharCode(10)))) + string('  (block mp6-function ') + string(v_block.emit_lisp()) + string('))') + string((string(String.fromCharCode(10))))));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_lisp;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_lisp
  Do.emit_lisp = function () {
    var v_self = this;
        try {
            var v_block = null;

(v_block = (function () { var tmp = {v_block: v_self.v_block}; tmp.__proto__ = Perlito6$Lisp$LexicalBlock; return tmp; })());
            throw(v_block.emit_lisp());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_lisp;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_lisp
  Use.emit_lisp = function () {
    var v_self = this;
        try {
            return((string(String.fromCharCode(10)) + string(String.fromCharCode(59) + String.fromCharCode(59) + ' use ') + string(Main.to_lisp_namespace(v_self.v_mod)) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_lisp;  // v8 bug workaround
})()
;    // use v6
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method expand_interpolation
  Lit$Array.expand_interpolation = function () {
    var v_self = this;
        try {
            var v_needs_interpolation = null;

            var List_items = [];

            var List_s = [];

(v_needs_interpolation = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'circumfix:<( )>'), function () { return (v_item.code() == 'list:<,>'); })); })) ) { (function () {
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { List_items.push(v_arg);; })(a_[i_]) } })(((v_item.arguments())));;
                })(); }
                else { (function () {
List_items.push(v_item);;
                })(); };; })(a_[i_]) } })(v_self.v_array1);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(or(and(isa(v_item, 'Var'), function () { return (v_item.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'prefix:<' + String.fromCharCode(64) + '>'), function () { return (v_item.code() == 'infix:<..>'); })); }); })) ) { (function () {
(v_needs_interpolation = 1);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(List_items);
            if ( bool(and(v_needs_interpolation, function () { return (elems(List_items) == 1); })) ) { (function () {
                throw(List_items[0]);;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(or(and(isa(v_item, 'Var'), function () { return (v_item.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'prefix:<' + String.fromCharCode(64) + '>'), function () { return (v_item.code() == 'infix:<..>'); })); }); })) ) { (function () {
                    push(List_s, (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })());
List_a.push(v_item);
    return(List_a);
})(),v_code: 'infix:<' + String.fromCharCode(61) + '>',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
                    push(List_s, (function () { var tmp = {v_body: (function () { var tmp = {v_sig: (function () { var tmp = {v_name: 'x',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_index_exp: (function () { var tmp = {v_name: 'x',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_obj: (function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Index; return tmp; })());
    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'push'}; tmp.__proto__ = Call; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_cond: (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_int: 0}; tmp.__proto__ = Val$Int; return tmp; })());
List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'elems'}; tmp.__proto__ = Call; return tmp; })());
List_a.push((function () { var tmp = {v_int: 1}; tmp.__proto__ = Val$Int; return tmp; })());
    return(List_a);
})(),v_code: 'infix:<->',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})(),v_code: 'circumfix:<( )>',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})(),v_code: 'infix:<..>',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })(),v_topic: null}; tmp.__proto__ = For; return tmp; })());;
                })(); }
                else { (function () {
                    push(List_s, (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_item);
    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'push'}; tmp.__proto__ = Call; return tmp; })());;
                })(); };; })(a_[i_]) } })(List_items);
            throw((function () { var tmp = {v_block: (function () { var tmp = {v_sig: null,v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_decl: 'my',v_type: '',v_var: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })());
List_a.push((function () { var tmp = {v_decl: 'my',v_type: '',v_var: (function () { var tmp = {v_name: 'v',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })());
(List_v = List_s);
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
List_a.push((function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(64),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = Do; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.expand_interpolation;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method expand_interpolation
  Lit$Hash.expand_interpolation = function () {
    var v_self = this;
        try {
            var List_items = [];

            var List_s = [];

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return (or((v_item.code() == 'circumfix:<( )>'), function () { return (v_item.code() == 'list:<,>'); })); })) ) { (function () {
                    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { List_items.push(v_arg);; })(a_[i_]) } })(((v_item.arguments())));;
                })(); }
                else { (function () {
List_items.push(v_item);;
                })(); };; })(a_[i_]) } })(v_self.v_hash1);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and(isa(v_item, 'Apply'), function () { return (v_item.code() == 'infix:<' + String.fromCharCode(61) + '>>'); })) ) { (function () {
                    push(List_s, (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_index_exp: v_item.arguments()[0],v_obj: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Lookup; return tmp; })());
List_a.push(v_item.arguments()[1]);
    return(List_a);
})(),v_code: 'infix:<' + String.fromCharCode(61) + '>',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());;
                })(); }
                else { (function () {
                    if ( bool(or(and(isa(v_item, 'Var'), function () { return (v_item.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_item, 'Apply'), function () { return (v_item.code() == 'prefix:<' + String.fromCharCode(37) + '>'); }); })) ) { (function () {
                        push(List_s, (function () { var tmp = {v_body: (function () { var tmp = {v_sig: (function () { var tmp = {v_name: 'p',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_index_exp: (function () { var tmp = {v_arguments: null,v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'p',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'key'}; tmp.__proto__ = Call; return tmp; })(),v_obj: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Lookup; return tmp; })());
List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_hyper: '',v_invocant: (function () { var tmp = {v_name: 'p',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(),v_method: 'value'}; tmp.__proto__ = Call; return tmp; })());
    return(List_a);
})(),v_code: 'infix:<' + String.fromCharCode(61) + '>',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_cond: (function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_arguments: null,v_hyper: '',v_invocant: v_item,v_method: 'pairs'}; tmp.__proto__ = Call; return tmp; })());
    return(List_a);
})(),v_code: 'circumfix:<( )>',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})(),v_code: 'prefix:<' + String.fromCharCode(64) + '>',v_namespace: ''}; tmp.__proto__ = Apply; return tmp; })(),v_topic: null}; tmp.__proto__ = For; return tmp; })());;
                    })(); }
                    else { (function () {
                        die('Error in hash composer: ', perl(v_item));;
                    })(); };;
                })(); };; })(a_[i_]) } })(List_items);
            throw((function () { var tmp = {v_block: (function () { var tmp = {v_sig: null,v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_decl: 'my',v_type: '',v_var: (function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })()}; tmp.__proto__ = Decl; return tmp; })());
(List_v = List_s);
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
List_a.push((function () { var tmp = {v_name: 'a',v_namespace: '',v_sigil: String.fromCharCode(37),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = Do; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.expand_interpolation;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  var Hash_op = {};
  // method op_assign
  Apply.op_assign = function () {
    var v_self = this;
        try {
            var v_code = null;

(v_code = v_self.v_code);
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw(0);;
            })(); };
            if ( bool((Hash_op).hasOwnProperty(v_code)) ) { (function () {
                throw((function () { var tmp = {v_code: 'infix:<' + String.fromCharCode(61) + '>',v_arguments: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[0]);
List_a.push((function () { var tmp = {v_code: (function () { if (Hash_op == null) { Hash_op = {} }; return (Hash_op[v_code] ); })(),v_arguments: v_self.v_arguments}; tmp.__proto__ = Apply; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(0);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.op_assign;  // v8 bug workaround
(Hash_op = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<+' + String.fromCharCode(61) + '>']  = 'infix:<+>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<-' + String.fromCharCode(61) + '>']  = 'infix:<->'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<*' + String.fromCharCode(61) + '>']  = 'infix:<*>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(47) + String.fromCharCode(61) + '>']  = 'infix:<' + String.fromCharCode(47) + '>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + String.fromCharCode(61) + '>']  = 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + String.fromCharCode(61) + '>']  = 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(124) + String.fromCharCode(61) + '>']  = 'infix:<' + String.fromCharCode(124) + '>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(38) + String.fromCharCode(61) + '>']  = 'infix:<' + String.fromCharCode(38) + '>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(47) + String.fromCharCode(47) + String.fromCharCode(61) + '>']  = 'infix:<' + String.fromCharCode(47) + String.fromCharCode(47) + '>'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['infix:<' + String.fromCharCode(126) + String.fromCharCode(61) + '>']  = 'list:<' + String.fromCharCode(126) + '>'); })();
    return(Hash_a);
})());})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method simplify
  Do.simplify = function () {
    var v_self = this;
        try {
            var v_block = null;

            if ( bool(isa(v_self.v_block, 'Lit::Block')) ) { (function () {
(v_block = v_self.v_block.stmts());;
            })(); }
            else { (function () {
(v_block = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_block);
    return(List_a);
})());;
            })(); };
            if ( bool((elems(v_block) == 1)) ) { (function () {
                var v_stmt = null;

(v_stmt = v_block[0]);
                if ( bool(and(isa(v_stmt, 'Apply'), function () { return (v_stmt.code() == 'circumfix:<( )>'); })) ) { (function () {
                    var v_args = null;

(v_args = v_stmt.arguments());
                    throw((function () { var tmp = {v_block: v_args[0]}; tmp.__proto__ = Do; return tmp; })().simplify());;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(isa(v_stmt, 'Do')) ) { (function () {
                    throw(v_stmt.simplify());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((function () { var tmp = {v_block: v_block}; tmp.__proto__ = Do; return tmp; })());;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.simplify;  // v8 bug workaround
})()
;    // use v6
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // method emit_parrot
  CompUnit.emit_parrot = function () {
    var v_self = this;
        try {
            var v_a = null;

            var v_item = null;

            var v_s = null;

(v_a = v_self.v_body);
(v_s = (string('.namespace [ ') + string(String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34)) + string(' ] ') + string((string(String.fromCharCode(10)))) + string('.sub _ :main :anon') + string((string(String.fromCharCode(10)))) + string('.end') + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10)))) + string('.sub ') + string(String.fromCharCode(34)) + string('_class_vars_') + string(String.fromCharCode(34)) + string(' :anon') + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and((isa(v_item, 'Decl')), function () { return ((v_item.decl() != 'has')); })) ) { (function () {
(v_s = (string(v_s) + string(v_item.emit_parrot())));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })((v_a));
(v_s = (string(v_s) + string('.end') + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(or(isa(v_item, 'Sub'), function () { return isa(v_item, 'Method'); })) ) { (function () {
(v_s = (string(v_s) + string(v_item.emit_parrot())));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })((v_a));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and((isa(v_item, 'Decl')), function () { return ((v_item.decl() == 'has')); })) ) { (function () {
                    var v_name = null;

(v_name = (v_item.var()).name());
(v_s = (string(v_s) + string('.sub ') + string(String.fromCharCode(34)) + string(v_name) + string(String.fromCharCode(34)) + string(' :method') + string((string(String.fromCharCode(10)))) + string('  .param pmc val      :optional') + string((string(String.fromCharCode(10)))) + string('  .param int has_val  :opt_flag') + string((string(String.fromCharCode(10)))) + string('  unless has_val goto ifelse') + string((string(String.fromCharCode(10)))) + string('  setattribute self, ') + string(String.fromCharCode(34)) + string(v_name) + string(String.fromCharCode(34)) + string(', val') + string((string(String.fromCharCode(10)))) + string('  goto ifend') + string((string(String.fromCharCode(10)))) + string('ifelse:') + string((string(String.fromCharCode(10)))) + string('  val ' + String.fromCharCode(61) + ' getattribute self, ') + string(String.fromCharCode(34)) + string(v_name) + string(String.fromCharCode(34)) + string((string(String.fromCharCode(10)))) + string('ifend:') + string((string(String.fromCharCode(10)))) + string('  .return(val)') + string((string(String.fromCharCode(10)))) + string('.end') + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })((v_a));
(v_s = (string(v_s) + string('.sub _ :anon :load :init :outer(') + string(String.fromCharCode(34)) + string('_class_vars_') + string(String.fromCharCode(34)) + string(')') + string((string(String.fromCharCode(10)))) + string('  .local pmc self') + string((string(String.fromCharCode(10)))) + string('  newclass self, ') + string(String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34)) + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) {                 if ( bool(and((isa(v_item, 'Decl')), function () { return ((v_item.decl() == 'has')); })) ) { (function () {
(v_s = (string(v_s) + string(v_item.emit_parrot())));;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(or(or(isa(v_item, 'Decl'), function () { return isa(v_item, 'Sub'); }), function () { return isa(v_item, 'Method'); })) ) { (function () {
                    null;
                })(); }
                else { (function () {
(v_s = (string(v_s) + string(v_item.emit_parrot())));;
                })(); };; })(a_[i_]) } })((v_a));
(v_s = (string(v_s) + string('.end') + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_parrot;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_parrot
  Val$Int.emit_parrot = function () {
    var v_self = this;
        try {
            return((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' new .Integer') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ') + string(v_self.v_int) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_parrot;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_parrot
  Val$Bit.emit_parrot = function () {
    var v_self = this;
        try {
            return((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' new ' + String.fromCharCode(34) + 'Integer' + String.fromCharCode(34)) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ') + string(v_self.v_bit) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_parrot;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_parrot
  Val$Num.emit_parrot = function () {
    var v_self = this;
        try {
            return((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' new ' + String.fromCharCode(34) + 'Float' + String.fromCharCode(34)) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ') + string(v_self.v_num) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_parrot;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_parrot
  Val$Buf.emit_parrot = function () {
    var v_self = this;
        try {
            return((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' new ' + String.fromCharCode(34) + 'String' + String.fromCharCode(34)) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ') + string(String.fromCharCode(34)) + string(v_self.v_buf) + string(String.fromCharCode(34)) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_parrot;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_parrot
  Lit$Array.emit_parrot = function () {
    var v_self = this;
        try {
            var v_a = null;

            var v_item = null;

            var v_s = null;

            var v_s = null;

(v_a = v_self.v_array1);
(v_s = (string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' new .ResizablePMCArray') + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) { (v_s = (string(v_s) + string(v_item.emit_parrot())));
(v_s = (string(v_s) + string('  push ' + String.fromCharCode(36) + 'P1, ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));; })(a_[i_]) } })((v_a));
(v_s = (string(v_s) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_parrot;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_parrot
  Lit$Hash.emit_parrot = function () {
    var v_self = this;
        try {
            var v_a = null;

            var v_item = null;

            var v_s = null;

            var v_s = null;

(v_a = v_self.v_hash1);
(v_s = (string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' new .Hash') + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_item) { (v_s = (string(v_s) + string((v_item[0]).emit_parrot())));
(v_s = (string(v_s) + string('  ' + String.fromCharCode(36) + 'P2 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));
(v_s = (string(v_s) + string((v_item[1]).emit_parrot())));
(v_s = (string(v_s) + string('  set ' + String.fromCharCode(36) + 'P1[' + String.fromCharCode(36) + 'P2], ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));; })(a_[i_]) } })((v_a));
(v_s = (string(v_s) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_parrot;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_parrot
  Index.emit_parrot = function () {
    var v_self = this;
        try {
            var v_s = null;

            var v_s = null;

(v_s = (string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));
(v_s = (string(v_s) + string(v_self.v_obj.emit_parrot())));
(v_s = (string(v_s) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));
(v_s = (string(v_s) + string(v_self.v_index_exp.emit_parrot())));
(v_s = (string(v_s) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1[' + String.fromCharCode(36) + 'P0]') + string((string(String.fromCharCode(10))))));
(v_s = (string(v_s) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_parrot;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_parrot
  Lookup.emit_parrot = function () {
    var v_self = this;
        try {
            var v_s = null;

            var v_s = null;

(v_s = (string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));
(v_s = (string(v_s) + string(v_self.v_obj.emit_parrot())));
(v_s = (string(v_s) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));
(v_s = (string(v_s) + string(v_self.v_index_exp.emit_parrot())));
(v_s = (string(v_s) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1[' + String.fromCharCode(36) + 'P0]') + string((string(String.fromCharCode(10))))));
(v_s = (string(v_s) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_parrot;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  // method emit_parrot
  Var.emit_parrot = function () {
    var v_self = this;
        try {
            return(( bool(((v_self.v_twigil == '.'))) ? ((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' getattribute self, ' + String.fromCharCode(39)) + string(v_self.v_name) + string(String.fromCharCode(39)) + string((string(String.fromCharCode(10)))))) : ((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ') + string(v_self.full_name()) + string(' ') + string((string(String.fromCharCode(10))))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_parrot;  // v8 bug workaround
  // method full_name
  Var.full_name = function () {
    var v_self = this;
        try {
            var v_table = null;

(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = 'scalar_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = 'list_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = 'hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = 'code_'); })();
    return(Hash_a);
})());
            return(( bool(((v_self.v_twigil == '.'))) ? (v_self.v_name) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH'))) : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_self.v_name)))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.full_name;  // v8 bug workaround
})()
;// class Bind
if (typeof Bind !== 'object') {
  Bind = function() {};
  Bind = new Bind;
  Bind.isa = function (s) { return s == 'Bind'; };
  Bind.perl = function () { return 'Bind.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Bind;
  // accessor parameters
  Bind.v_parameters = null;
  Bind.parameters = function () { return this.v_parameters; };
  // accessor arguments
  Bind.v_arguments = null;
  Bind.arguments = function () { return this.v_arguments; };
  // method emit_parrot
  Bind.emit_parrot = function () {
    var v_self = this;
        try {
            if ( bool(isa(v_self.v_parameters, 'Var')) ) { (function () {
                throw((string(v_self.v_arguments.emit_parrot()) + string('  ') + string(v_self.v_parameters.full_name()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_self.v_parameters, 'Decl')) ) { (function () {
                throw((string(v_self.v_arguments.emit_parrot()) + string('  .local pmc ') + string(((v_self.v_parameters).var()).full_name()) + string((string(String.fromCharCode(10)))) + string('  ') + string(((v_self.v_parameters).var()).full_name()) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  .lex ' + String.fromCharCode(39)) + string(((v_self.v_parameters).var()).full_name()) + string(String.fromCharCode(39) + ', ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_self.v_parameters, 'Lookup')) ) { (function () {
                var v_param = null;

                var v_obj = null;

                var v_index = null;

(v_param = v_self.v_parameters);
(v_obj = v_param.obj());
(v_index = v_param.index_exp());
                throw((string(v_self.v_arguments.emit_parrot()) + string('  save ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P2 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string(v_obj.emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string(v_index.emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1[' + String.fromCharCode(36) + 'P0] ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_self.v_parameters, 'Index')) ) { (function () {
                var v_param = null;

                var v_obj = null;

                var v_index = null;

(v_param = v_self.v_parameters);
(v_obj = v_param.obj());
(v_index = v_param.index_exp());
                throw((string(v_self.v_arguments.emit_parrot()) + string('  save ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P2 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string(v_obj.emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string(v_index.emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1[' + String.fromCharCode(36) + 'P0] ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            return(die((string('Not implemented binding: ') + string(v_self.v_parameters) + string((string(String.fromCharCode(10)))) + string(v_self.v_parameters.emit_parrot()))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Bind.emit_parrot;  // v8 bug workaround
})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_parrot
  Proto.emit_parrot = function () {
    var v_self = this;
        try {
            return((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ') + string(v_self.v_name) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_parrot;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // method emit_parrot
  Call.emit_parrot = function () {
    var v_self = this;
        try {
            var v_meth = null;

            var v_call = null;

            var List_args = [];

            var v_str = null;

            var v_ii = null;

            var v_i = null;

            var List_p = [];

            if ( bool(or(or(or(((v_self.v_method == 'perl')), function () { return ((v_self.v_method == 'yaml')); }), function () { return ((v_self.v_method == 'say')); }), function () { return ((v_self.v_method == 'join')); })) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string('[ map ' + String.fromCharCode(123) + ' Main::') + string(v_self.v_method) + string('( ' + String.fromCharCode(36) + '_, ') + string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_arguments)).join('')) + string(')') + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(64) + String.fromCharCode(123) + ' ') + string(v_self.v_invocant.emit_parrot()) + string(' ' + String.fromCharCode(125) + ' ]')));;
                })(); }
                else { (function () {
                    throw((string('Main::') + string(v_self.v_method) + string('(') + string(v_self.v_invocant.emit_parrot()) + string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_arguments)).join('')) + string(')')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_meth == 'postcircumfix:<( )>')) ) { (function () {
(v_meth = '');;
            })(); }
            else { (function () {
                null;
            })(); };
(v_call = (string('->') + string(v_meth) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_arguments)).join('')) + string(')')));
            if ( bool((v_self.v_hyper)) ) { (function () {
                throw((string('[ map ' + String.fromCharCode(123) + ' ' + String.fromCharCode(36) + '_') + string(v_call) + string(' ' + String.fromCharCode(125) + ' ' + String.fromCharCode(64) + String.fromCharCode(123) + ' ') + string(v_self.v_invocant.emit_parrot()) + string(' ' + String.fromCharCode(125) + ' ]')));;
            })(); }
            else { (function () {
                null;
            })(); };
(List_args = v_self.v_arguments);
(v_str = '');
(v_ii = 10);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (v_str = (string(v_str) + string('  save ' + String.fromCharCode(36) + 'P') + string(v_ii) + string((string(String.fromCharCode(10))))));
(v_ii = add(v_ii, 1));; })(a_[i_]) } })(List_args);
(v_i = 10);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (v_str = (string(v_str) + string(v_arg.emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P') + string(v_i) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })(List_args);
(v_str = (string(v_str) + string(v_self.v_invocant.emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0.') + string(v_meth) + string('(')));
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (function () { if (List_p == null) { List_p = [] }; return (List_p[v_i]  = (string(String.fromCharCode(36) + 'P') + string((add(v_i, 10))))); })();
(v_i = add(v_i, 1));; })(a_[i_]) } })(List_args);
(v_str = (string(v_str) + string(List_p.join(', ')) + string(')') + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (v_ii = (v_ii - 1));
(v_str = (string(v_str) + string('  restore ' + String.fromCharCode(36) + 'P') + string(v_ii) + string((string(String.fromCharCode(10))))));; })(a_[i_]) } })(List_args);
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_parrot;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  var v_label = null;
  // method emit_parrot
  Apply.emit_parrot = function () {
    var v_self = this;
        try {
            var v_code = null;

            var List_args = [];

            var v_str = null;

            var v_ii = null;

            var v_arg = null;

            var v_i = null;

            var List_p = [];

(v_code = v_self.v_code);
            if ( bool((v_code == 'die')) ) { (function () {
                throw((string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' new .Exception') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0[') + string(String.fromCharCode(34)) + string('_message') + string(String.fromCharCode(34)) + string('] ' + String.fromCharCode(61) + ' ') + string(String.fromCharCode(34)) + string('something broke') + string(String.fromCharCode(34)) + string((string(String.fromCharCode(10)))) + string('  throw ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'say')) ) { (function () {
                throw((string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_arguments)).join((string('  print ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))))) + string('  print ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  print ') + string(String.fromCharCode(34)) + string(String.fromCharCode(92)) + string('n') + string(String.fromCharCode(34)) + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'print')) ) { (function () {
                throw((string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_arguments)).join((string('  print ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))))) + string('  print ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'array')) ) { (function () {
                throw((string('  ' + String.fromCharCode(35) + ' TODO - array() is no-op') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(33) + '>')) ) { (function () {
                throw(((function () { var tmp = {v_cond: v_self.v_arguments[0],v_body: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_bit: 0}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})(),v_otherwise: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_bit: 1}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = If; return tmp; })()).emit_parrot());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(63) + '>')) ) { (function () {
                throw(((function () { var tmp = {v_cond: v_self.v_arguments[0],v_body: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_bit: 1}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})(),v_otherwise: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_bit: 0}; tmp.__proto__ = Val$Bit; return tmp; })());
    return(List_a);
})()}; tmp.__proto__ = If; return tmp; })()).emit_parrot());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string('  ' + String.fromCharCode(35) + ' TODO - prefix:<' + String.fromCharCode(36) + '> is no-op') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw((string('  ' + String.fromCharCode(35) + ' TODO - prefix:<' + String.fromCharCode(64) + '> is no-op') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw((string('  ' + String.fromCharCode(35) + ' TODO - prefix:<' + String.fromCharCode(37) + '> is no-op') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + ' concat ' + String.fromCharCode(36) + 'S0, ' + String.fromCharCode(36) + 'S1') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<+>')) ) { (function () {
                throw((string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1 + ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<->')) ) { (function () {
                throw((string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1 - ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>')) ) { (function () {
                throw(((function () { var tmp = {v_cond: v_self.v_arguments[0],v_body: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[1]);
    return(List_a);
})(),v_otherwise: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})()}; tmp.__proto__ = If; return tmp; })()).emit_parrot());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>')) ) { (function () {
                throw(((function () { var tmp = {v_cond: v_self.v_arguments[0],v_body: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_otherwise: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[1]);
    return(List_a);
})()}; tmp.__proto__ = If; return tmp; })()).emit_parrot());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<eq>')) ) { (function () {
                var v_id = null;

(v_label = add(v_label, 1));
(v_id = v_label);
                throw((string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string('  if ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'S1 goto eq') + string(v_id) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 0') + string((string(String.fromCharCode(10)))) + string('  goto eq_end') + string(v_id) + string((string(String.fromCharCode(10)))) + string('eq') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 1') + string((string(String.fromCharCode(10)))) + string('eq_end') + string(v_id) + string(':') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<ne>')) ) { (function () {
                var v_id = null;

(v_label = add(v_label, 1));
(v_id = v_label);
                throw((string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string('  if ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'S1 goto eq') + string(v_id) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 1') + string((string(String.fromCharCode(10)))) + string('  goto eq_end') + string(v_id) + string((string(String.fromCharCode(10)))) + string('eq') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 0') + string((string(String.fromCharCode(10)))) + string('eq_end') + string(v_id) + string(':') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                var v_id = null;

(v_label = add(v_label, 1));
(v_id = v_label);
                throw((string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  if ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1 goto eq') + string(v_id) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 0') + string((string(String.fromCharCode(10)))) + string('  goto eq_end') + string(v_id) + string((string(String.fromCharCode(10)))) + string('eq') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 1') + string((string(String.fromCharCode(10)))) + string('eq_end') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>')) ) { (function () {
                var v_id = null;

(v_label = add(v_label, 1));
(v_id = v_label);
                throw((string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  if ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P1 goto eq') + string(v_id) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 1') + string((string(String.fromCharCode(10)))) + string('  goto eq_end') + string(v_id) + string((string(String.fromCharCode(10)))) + string('eq') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' 0') + string((string(String.fromCharCode(10)))) + string('eq_end') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                throw(((function () { var tmp = {v_cond: v_self.v_arguments[0],v_body: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[1]);
    return(List_a);
})(),v_otherwise: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[2]);
    return(List_a);
})()}; tmp.__proto__ = If; return tmp; })()).emit_parrot());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'defined')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'I0 ' + String.fromCharCode(61) + ' defined ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'I0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[1]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'I0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'I0') + string((string(String.fromCharCode(10)))) + string((v_self.v_arguments[2]).emit_parrot()) + string('  ' + String.fromCharCode(36) + 'I1 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'I0') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'S0 ' + String.fromCharCode(61) + ' substr ' + String.fromCharCode(36) + 'S0, ' + String.fromCharCode(36) + 'I0, ' + String.fromCharCode(36) + 'I1') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'S0') + string((string(String.fromCharCode(10))))));;
            })(); }
            else { (function () {
                null;
            })(); };
(List_args = v_self.v_arguments);
(v_str = '');
(v_ii = 10);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (v_str = (string(v_str) + string('  save ' + String.fromCharCode(36) + 'P') + string(v_ii) + string((string(String.fromCharCode(10))))));
(v_ii = add(v_ii, 1));; })(a_[i_]) } })(List_args);
(v_i = 10);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (v_str = (string(v_str) + string(v_arg.emit_parrot()) + string('  ' + String.fromCharCode(36) + 'P') + string(v_i) + string(' ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })(List_args);
(v_str = (string(v_str) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' ') + string(v_self.v_code) + string('(')));
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (function () { if (List_p == null) { List_p = [] }; return (List_p[v_i]  = (string(String.fromCharCode(36) + 'P') + string((add(v_i, 10))))); })();
(v_i = add(v_i, 1));; })(a_[i_]) } })(List_args);
(v_str = (string(v_str) + string(List_p.join(', ')) + string(')') + string((string(String.fromCharCode(10))))));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_arg) { (v_ii = (v_ii - 1));
(v_str = (string(v_str) + string('  restore ' + String.fromCharCode(36) + 'P') + string(v_ii) + string((string(String.fromCharCode(10))))));; })(a_[i_]) } })(List_args);
            throw(v_str);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_parrot;  // v8 bug workaround
(v_label = 100);})()
;// class Return
if (typeof Return !== 'object') {
  Return = function() {};
  Return = new Return;
  Return.isa = function (s) { return s == 'Return'; };
  Return.perl = function () { return 'Return.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Return;
  // method emit_parrot
  Return.emit_parrot = function () {
    var v_self = this;
        try {
            return((string(v_self.v_result.emit_parrot()) + string('  .return( ' + String.fromCharCode(36) + 'P0 )') + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_parrot;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  var v_label = null;
  // method emit_parrot
  If.emit_parrot = function () {
    var v_self = this;
        try {
            var v_id = null;

(v_label = add(v_label, 1));
(v_id = v_label);
            throw((string(v_self.v_cond.emit_parrot()) + string('  unless ' + String.fromCharCode(36) + 'P0 goto ifelse') + string(v_id) + string((string(String.fromCharCode(10)))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_body)).join('')) + string('  goto ifend') + string(v_id) + string((string(String.fromCharCode(10)))) + string('ifelse') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_otherwise)).join('')) + string('ifend') + string(v_id) + string(':') + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_parrot;  // v8 bug workaround
(v_label = 100);})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  var v_label = null;
  // method emit_parrot
  For.emit_parrot = function () {
    var v_self = this;
        try {
            var v_cond = null;

            var v_id = null;

(v_cond = v_self.v_cond);
(v_label = add(v_label, 1));
(v_id = v_label);
            if ( bool(and(isa(v_cond, 'Var'), function () { return (v_cond.sigil() != String.fromCharCode(64)); })) ) { (function () {
(v_cond = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string('') + string(v_cond.emit_parrot()) + string('  save ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  save ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P1 ' + String.fromCharCode(61) + ' new .Iterator, ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10)))) + string(' test_iter') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  unless ' + String.fromCharCode(36) + 'P1 goto iter_done') + string(v_id) + string((string(String.fromCharCode(10)))) + string('  ' + String.fromCharCode(36) + 'P2 ' + String.fromCharCode(61) + ' shift ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('  store_lex ' + String.fromCharCode(39)) + string(v_self.v_topic.full_name()) + string(String.fromCharCode(39) + ', ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_body)).join('')) + string('  goto test_iter') + string(v_id) + string((string(String.fromCharCode(10)))) + string(' iter_done') + string(v_id) + string(':') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P2') + string((string(String.fromCharCode(10)))) + string('  restore ' + String.fromCharCode(36) + 'P1') + string((string(String.fromCharCode(10)))) + string('')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_parrot;  // v8 bug workaround
(v_label = 100);})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_parrot
  Decl.emit_parrot = function () {
    var v_self = this;
        try {
            var v_decl = null;

            var v_name = null;

(v_decl = v_self.v_decl);
(v_name = v_self.v_var.name());
            return(( bool(((v_decl == 'has'))) ? ((string('  addattribute self, ') + string(String.fromCharCode(34)) + string(v_name) + string(String.fromCharCode(34)) + string((string(String.fromCharCode(10)))))) : ((string('  .local pmc ') + string((v_self.v_var).full_name()) + string(' ') + string((string(String.fromCharCode(10)))) + string('  .lex ' + String.fromCharCode(39)) + string((v_self.v_var).full_name()) + string(String.fromCharCode(39) + ', ') + string((v_self.v_var).full_name()) + string(' ') + string((string(String.fromCharCode(10))))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_parrot;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_parrot
  Method.emit_parrot = function () {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_str = null;

            var v_i = null;

            var v_field = null;

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str = '');
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = (string(v_str) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' params[') + string(v_i) + string(']') + string((string(String.fromCharCode(10)))) + string('  .lex ' + String.fromCharCode(39)) + string(v_field.full_name()) + string(String.fromCharCode(39) + ', ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_pos));
            throw((string('.sub ') + string(String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34)) + string(' :method :outer(') + string(String.fromCharCode(34)) + string('_class_vars_') + string(String.fromCharCode(34)) + string(')') + string((string(String.fromCharCode(10)))) + string('  .param pmc params  :slurpy') + string((string(String.fromCharCode(10)))) + string('  .lex ' + String.fromCharCode(39)) + string(v_invocant.full_name()) + string(String.fromCharCode(39) + ', self') + string((string(String.fromCharCode(10)))) + string(v_str) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_block)).join('')) + string('.end') + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_parrot;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_parrot
  Sub.emit_parrot = function () {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_str = null;

            var v_i = null;

            var v_field = null;

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_str = '');
(v_i = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { (v_str = (string(v_str) + string('  ' + String.fromCharCode(36) + 'P0 ' + String.fromCharCode(61) + ' params[') + string(v_i) + string(']') + string((string(String.fromCharCode(10)))) + string('  .lex ' + String.fromCharCode(39)) + string(v_field.full_name()) + string(String.fromCharCode(39) + ', ' + String.fromCharCode(36) + 'P0') + string((string(String.fromCharCode(10))))));
(v_i = add(v_i, 1));; })(a_[i_]) } })((v_pos));
            throw((string('.sub ') + string(String.fromCharCode(34)) + string(v_self.v_name) + string(String.fromCharCode(34)) + string(' :outer(') + string(String.fromCharCode(34)) + string('_class_vars_') + string(String.fromCharCode(34)) + string(')') + string((string(String.fromCharCode(10)))) + string('  .param pmc params  :slurpy') + string((string(String.fromCharCode(10)))) + string(v_str) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_block)).join('')) + string('.end') + string((string(String.fromCharCode(10)))) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_parrot;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_parrot
  Do.emit_parrot = function () {
    var v_self = this;
        try {
            return(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_parrot() ) }; return out; })(v_self.v_block)).join(''));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_parrot;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_parrot
  Use.emit_parrot = function () {
    var v_self = this;
        try {
            return((string('  .include ') + string(String.fromCharCode(34)) + string(v_self.v_mod) + string(String.fromCharCode(34)) + string((string(String.fromCharCode(10))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_parrot;  // v8 bug workaround
})()
;    // use v6
;    // use Perlito6::AST
;// class Python
if (typeof Python !== 'object') {
  Python = function() {};
  Python = new Python;
  Python.isa = function (s) { return s == 'Python'; };
  Python.perl = function () { return 'Python.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Python;
  var Hash_safe_char = {};
  // sub tab
  Python.tab = function (v_level) {
        try {
            return(str_replicate((string('    ')), v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Python.tab;  // v8 bug workaround
  // sub escape_string
  Python.escape_string = function (v_s) {
        try {
            var List_out = [];

            var v_tmp = null;

(v_tmp = '');
            if ( bool((v_s == '')) ) { (function () {
                throw((string('u' + String.fromCharCode(39) + String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_i) {                 var v_c = null;

(v_c = (v_s || "").substr(v_i, 1));
                if ( bool(or(or(or((and(((v_c >= 'a')), function () { return ((v_c <= 'z')); })), function () { return (and(((v_c >= 'A')), function () { return ((v_c <= 'Z')); })); }), function () { return (and(((v_c >= '0')), function () { return ((v_c <= '9')); })); }), function () { return (Hash_safe_char).hasOwnProperty(v_c); })) ) { (function () {
(v_tmp = (string(v_tmp) + string(v_c)));;
                })(); }
                else { (function () {
                    if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string('u' + String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
List_out.push((string('unichr(') + string((function () { 
    return((v_c).charCodeAt(0));
})()) + string(')')));
(v_tmp = '');;
                })(); };; })(a_[i_]) } })((function (a) { for (var i=0, l=(chars(v_s) - 1); i<=l; ++i){ a.push(i) }; return a })([]));
            if ( bool((v_tmp != '')) ) { (function () {
List_out.push((string('u' + String.fromCharCode(39)) + string(v_tmp) + string(String.fromCharCode(39))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(List_out.join(' + '));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Python.escape_string;  // v8 bug workaround
(Hash_safe_char = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['_']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[',']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['.']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[':']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['-']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['+']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['*']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[' ']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['(']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[')']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['<']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['>']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['[']  = 1); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[']']  = 1); })();
    return(Hash_a);
})());})()
;// class Perlito6::Python::AnonSub
if (typeof Perlito6$Python$AnonSub !== 'object') {
  Perlito6$Python$AnonSub = function() {};
  Perlito6$Python$AnonSub = new Perlito6$Python$AnonSub;
  Perlito6$Python$AnonSub.isa = function (s) { return s == 'Perlito6::Python::AnonSub'; };
  Perlito6$Python$AnonSub.perl = function () { return 'Perlito6::Python::AnonSub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Python$AnonSub;
  // accessor name
  Perlito6$Python$AnonSub.v_name = null;
  Perlito6$Python$AnonSub.name = function () { return this.v_name; };
  // accessor sig
  Perlito6$Python$AnonSub.v_sig = null;
  Perlito6$Python$AnonSub.sig = function () { return this.v_sig; };
  // accessor block
  Perlito6$Python$AnonSub.v_block = null;
  Perlito6$Python$AnonSub.block = function () { return this.v_block; };
  // accessor handles_return_exception
  Perlito6$Python$AnonSub.v_handles_return_exception = null;
  Perlito6$Python$AnonSub.handles_return_exception = function () { return this.v_handles_return_exception; };
  // method emit_python
  Perlito6$Python$AnonSub.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Python$AnonSub.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Perlito6$Python$AnonSub.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_pos = null;

            var v_args = null;

            var v_block = null;

            var List_s = [];

(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { v_args.push(v_field.emit_python_name());; })(a_[i_]) } })((v_pos));
(v_block = (function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
            push(List_s, (string(Python.tab(v_level)) + string((string('def f_'))) + string(v_self.v_name) + string((string('('))) + string(v_args.join((string(', ')))) + string((string('):')))));
            if ( bool(v_self.v_handles_return_exception) ) { (function () {
                push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('try:')))));
                push(List_s, v_block.emit_python_indented(add(v_level, 2)));
                push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('except mp6_Return, r:')))));
                push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('return r.value')))));;
            })(); }
            else { (function () {
                push(List_s, v_block.emit_python_indented(add(v_level, 1)));;
            })(); };
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Python$AnonSub.emit_python_indented;  // v8 bug workaround
})()
;// class Perlito6::Python::LexicalBlock
if (typeof Perlito6$Python$LexicalBlock !== 'object') {
  Perlito6$Python$LexicalBlock = function() {};
  Perlito6$Python$LexicalBlock = new Perlito6$Python$LexicalBlock;
  Perlito6$Python$LexicalBlock.isa = function (s) { return s == 'Perlito6::Python::LexicalBlock'; };
  Perlito6$Python$LexicalBlock.perl = function () { return 'Perlito6::Python::LexicalBlock.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Python$LexicalBlock;
  var v_ident = null;
  var List_anon_block = [];
  // accessor block
  Perlito6$Python$LexicalBlock.v_block = null;
  Perlito6$Python$LexicalBlock.block = function () { return this.v_block; };
  // accessor needs_return
  Perlito6$Python$LexicalBlock.v_needs_return = null;
  Perlito6$Python$LexicalBlock.needs_return = function () { return this.v_needs_return; };
  // accessor top_level
  Perlito6$Python$LexicalBlock.v_top_level = null;
  Perlito6$Python$LexicalBlock.top_level = function () { return this.v_top_level; };
  // sub push_stmt_python
  Perlito6$Python$LexicalBlock.push_stmt_python = function (v_block) {
        try {
            return(push(List_anon_block, v_block));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Python$LexicalBlock.push_stmt_python;  // v8 bug workaround
  // sub get_ident_python
  Perlito6$Python$LexicalBlock.get_ident_python = function () {
        try {
(v_ident = add(v_ident, 1));
            throw(v_ident);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Python$LexicalBlock.get_ident_python;  // v8 bug workaround
  // method has_my_decl
  Perlito6$Python$LexicalBlock.has_my_decl = function () {
    var v_self = this;
        try {
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    throw(1);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'my'); })) ) { (function () {
                    throw(1);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            throw(0);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Python$LexicalBlock.has_my_decl;  // v8 bug workaround
  // method emit_python
  Perlito6$Python$LexicalBlock.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Python$LexicalBlock.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Perlito6$Python$LexicalBlock.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var List_block = [];

            var List_s = [];

            var List_tmp = [];

            var v_has_decl = null;

            var v_block = null;

            var v_last_statement = null;

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v__) {                 if ( bool((v__ != null)) ) { (function () {
                    push(List_block, v__);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(( bool((List_block)) ? false : true)) ) { (function () {
                push(List_block, (function () { var tmp = {v_code: 'Mu'}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) { List_tmp.push(v_stmt);; })(a_[i_]) } })(List_anon_block);
(v_has_decl = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_block = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
                    push(v_has_decl, v_decl);;
                })(); }
                else { (function () {
                    if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'has'); })) ) { (function () {
                        push(v_has_decl, v_decl);;
                    })(); }
                    else { (function () {
                        push(((v_block)), v_decl);;
                    })(); };;
                })(); };; })(a_[i_]) } })(List_block);
            if ( bool(((v_has_decl))) ) { (function () {
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                     if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
                        var v_label = null;

(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
                        push(List_s, (string(Python.tab(v_level)) + string('def f_') + string(v_label) + string('(v_self):')));
                        push(List_s, (string(Python.tab(add(v_level, 1))) + string('return v_self.v_') + string((v_decl.var()).name())));
                        push(List_s, (string(Python.tab(v_level)) + string((string('self.__dict__.update(') + string(String.fromCharCode(123)) + string(String.fromCharCode(39) + 'f_'))) + string(v_decl.var().name()) + string((string(String.fromCharCode(39) + ':f_'))) + string(v_label) + string((string(String.fromCharCode(125) + ')')))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'has'); })) ) { (function () {
                        var v_label = null;

(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
                        push(List_s, (string(Python.tab(v_level)) + string('def f_') + string(v_label) + string('(v_self):')));
                        push(List_s, (string(Python.tab(add(v_level, 1))) + string('return v_self.v_') + string(v_decl.arguments()[0].var().name())));
                        push(List_s, (string(Python.tab(v_level)) + string((string('self.__dict__.update(') + string(String.fromCharCode(123)) + string(String.fromCharCode(39) + 'f_'))) + string(v_decl.arguments()[0].var().name()) + string((string(String.fromCharCode(39) + ':f_'))) + string(v_label) + string((string(String.fromCharCode(125) + ')')))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_has_decl)));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    push(List_s, (string(Python.tab(v_level)) + string((v_decl.var()).emit_python_name()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_decl.emit_python_init()) + string('')));;
                })(); }
                else { (function () {
                    if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'my'); })) ) { (function () {
                        push(List_s, (string(Python.tab(v_level)) + string(v_decl.arguments()[0].var().emit_python_name()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_decl.arguments()[0].emit_python_init()) + string('')));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); };; })(a_[i_]) } })(((v_block)));
            if ( bool(v_self.v_needs_return) ) { (function () {
(v_last_statement = pop(((v_block))));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                 var v_s2 = null;

(List_anon_block = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_s2 = v_stmt.emit_python_indented(v_level));
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) { List_s.push(v_stmt.emit_python_indented(v_level));; })(a_[i_]) } })(List_anon_block);
                push(List_s, v_s2);; })(a_[i_]) } })(((v_block)));
            if ( bool(and(v_self.v_needs_return, function () { return v_last_statement; })) ) { (function () {
                var v_s2 = null;

(List_anon_block = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                if ( bool(isa(v_last_statement, 'If')) ) { (function () {
                    var v_cond = null;

                    var v_has_otherwise = null;

                    var v_body_block = null;

(v_cond = v_last_statement.cond());
(v_has_otherwise = ( bool(v_last_statement.otherwise()) ? 1 : 0));
(v_s2 = (string(Python.tab(v_level)) + string('if mp6_to_bool(') + string(v_cond.emit_python()) + string((string('):') + string(String.fromCharCode(10))))));
(v_body_block = (function () { var tmp = {v_block: (v_last_statement.body().stmts()),v_needs_return: 1}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
                    if ( bool(v_body_block.has_my_decl()) ) { (function () {
(v_body_block = (function () { var tmp = {v_block: (v_last_statement.body())}; tmp.__proto__ = Do; return tmp; })());
(v_s2 = (string(v_s2) + string(Python.tab(add(v_level, 1))) + string('return ') + string(v_body_block.emit_python())));;
                    })(); }
                    else { (function () {
(v_s2 = (string(v_s2) + string(v_body_block.emit_python_indented(add(v_level, 1)))));;
                    })(); };
                    if ( bool((v_has_otherwise)) ) { (function () {
                        var v_otherwise_block = null;

(v_s2 = (string(v_s2) + string((string(String.fromCharCode(10)))) + string(Python.tab(v_level)) + string((string('else:') + string(String.fromCharCode(10))))));
(v_otherwise_block = (function () { var tmp = {v_block: (v_last_statement.otherwise().stmts()),v_needs_return: 1}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
                        if ( bool(v_otherwise_block.has_my_decl()) ) { (function () {
(v_otherwise_block = (function () { var tmp = {v_block: (v_last_statement.otherwise())}; tmp.__proto__ = Do; return tmp; })());
(v_s2 = (string(v_s2) + string(Python.tab(add(v_level, 1))) + string('return ') + string(v_otherwise_block.emit_python())));;
                        })(); }
                        else { (function () {
(v_s2 = (string(v_s2) + string(v_otherwise_block.emit_python_indented(add(v_level, 1)))));;
                        })(); };;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    if ( bool(and(isa(v_last_statement, 'Apply'), function () { return (v_last_statement.code() == 'infix:<' + String.fromCharCode(61) + '>'); })) ) { (function () {
(v_s2 = v_last_statement.emit_python_indented(v_level));
(v_s2 = (string(v_s2) + string((string(String.fromCharCode(10)))) + string(Python.tab(v_level)) + string((string('return '))) + string(v_last_statement.arguments()[0].emit_python())));;
                    })(); }
                    else { (function () {
                        if ( bool(or(and(isa(v_last_statement, 'Apply'), function () { return (v_last_statement.code() == 'return'); }), function () { return isa(v_last_statement, 'For'); })) ) { (function () {
(v_s2 = v_last_statement.emit_python_indented(v_level));;
                        })(); }
                        else { (function () {
(v_s2 = (string(Python.tab(v_level)) + string((string('return '))) + string(v_last_statement.emit_python())));;
                        })(); };;
                    })(); };;
                })(); };
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) { List_s.push(v_stmt.emit_python_indented(v_level));; })(a_[i_]) } })(List_anon_block);
List_s.push(v_s2);;
            })(); }
            else { (function () {
                null;
            })(); };
(List_anon_block = List_tmp);
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Python$LexicalBlock.emit_python_indented;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // method emit_python
  CompUnit.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_python;  // v8 bug workaround
  // method emit_python_indented
  CompUnit.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var List_s = [];

            var v_block = null;

            var v_label = null;

            var v_name = null;

(v_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
(v_name = Main.to_go_namespace(v_self.v_name));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Use')) ) { (function () {
                    if ( bool((v_decl.mod() != 'v6')) ) { (function () {
                        push(List_s, (string(Python.tab(v_level)) + string('import ') + string(Main.to_go_namespace(v_decl.mod()))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            push(List_s, (string(Python.tab(v_level)) + string('try:')));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string('type(') + string(v_name) + string((string(')')))));
            push(List_s, (string(Python.tab(v_level)) + string('except NameError:')));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string('class ') + string(v_name) + string((string(':')))));
            push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('def __init__(self, **arg):')))));
            push(List_s, (string(Python.tab(add(v_level, 3))) + string((string('for k in arg:')))));
            push(List_s, (string(Python.tab(add(v_level, 4))) + string((string('self.__dict__[k] ' + String.fromCharCode(61) + ' mp6_Scalar()')))));
            push(List_s, (string(Python.tab(add(v_level, 4))) + string((string('self.__dict__[k].f_set(arg[k])')))));
            push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('def f__setattr__(self, k, v):')))));
            push(List_s, (string(Python.tab(add(v_level, 3))) + string((string('return self.__dict__[k].f_set(v)')))));
            push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('def f_isa(self, name):')))));
            push(List_s, (string(Python.tab(add(v_level, 3))) + string((string('return name ' + String.fromCharCode(61) + String.fromCharCode(61) + ' u' + String.fromCharCode(39)))) + string(v_self.v_name) + string((string(String.fromCharCode(39))))));
            push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('def f_bool(self):')))));
            push(List_s, (string(Python.tab(add(v_level, 3))) + string((string('return 1')))));
            push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('def __getattr__(self, attr):')))));
            push(List_s, (string(Python.tab(add(v_level, 3))) + string((string('if attr[0:2] ' + String.fromCharCode(61) + String.fromCharCode(61) + ' u' + String.fromCharCode(39) + 'v_' + String.fromCharCode(39) + ':')))));
            push(List_s, (string(Python.tab(add(v_level, 4))) + string((string('self.__dict__[attr] ' + String.fromCharCode(61) + ' mp6_Scalar()')))));
            push(List_s, (string(Python.tab(add(v_level, 4))) + string((string('return self.__dict__[attr]')))));
            push(List_s, (string(Python.tab(add(v_level, 3))) + string((string('raise AttributeError(attr)')))));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string(v_name) + string((string('_proto ' + String.fromCharCode(61) + ' '))) + string(v_name) + string((string('()')))));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('__builtin__.'))) + string(v_name) + string((string(' ' + String.fromCharCode(61) + ' '))) + string(v_name) + string('')));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('__builtin__.'))) + string(v_name) + string((string('_proto ' + String.fromCharCode(61) + ' '))) + string(v_name) + string((string('_proto')))));
            if ( bool((v_name == 'GLOBAL')) ) { (function () {
                push(List_s, (string(Python.tab(v_level)) + string('self ' + String.fromCharCode(61) + ' ') + string(v_name)));
                push(List_s, v_block.emit_python_indented(v_level));;
            })(); }
            else { (function () {
                push(List_s, (string(Python.tab(v_level)) + string('def ') + string(v_label) + string((string('():')))));
                push(List_s, (string(Python.tab(add(v_level, 1))) + string('self ' + String.fromCharCode(61) + ' ') + string(v_name)));
                push(List_s, v_block.emit_python_indented(add(v_level, 1)));
                push(List_s, (string(Python.tab(v_level)) + string(v_label) + string((string('()')))));;
            })(); };
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_python_indented;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_python
  Val$Int.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.v_int);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Val$Int.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(v_self.v_int)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_python_indented;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_python
  Val$Bit.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.v_bit);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Val$Bit.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(v_self.v_bit)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_python_indented;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_python
  Val$Num.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.v_num);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Val$Num.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(v_self.v_num)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_python_indented;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_python
  Val$Buf.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Val$Buf.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(Python.escape_string(v_self.v_buf))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_python_indented;  // v8 bug workaround
})()
;// class Lit::Block
if (typeof Lit$Block !== 'object') {
  Lit$Block = function() {};
  Lit$Block = new Lit$Block;
  Lit$Block.isa = function (s) { return s == 'Lit::Block'; };
  Lit$Block.perl = function () { return 'Lit::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Block;
  // method emit_python
  Lit$Block.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Lit$Block.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_label = null;

            var v_anon_var = null;

            var v_anon_sig = null;

(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
(v_anon_var = or(v_self.v_sig, function () { return (function () { var tmp = {v_name: '_',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(); }));
(v_anon_sig = (function () { var tmp = {v_invocant: null,v_positional: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_anon_var);
    return(List_a);
})(),v_named: (function () { 
    var Hash_a = {};

    return(Hash_a);
})()}; tmp.__proto__ = Sig; return tmp; })());
            Perlito6$Python$LexicalBlock.push_stmt_python((function () { var tmp = {v_name: v_label,v_block: v_self.v_stmts,v_sig: v_anon_sig,v_handles_return_exception: 0}; tmp.__proto__ = Perlito6$Python$AnonSub; return tmp; })());
            throw((string(Python.tab(v_level)) + string((string('f_'))) + string(v_label) + string('')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_python_indented;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_python
  Lit$Array.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Lit$Array.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_python_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_python_indented;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_python
  Lit$Hash.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Lit$Hash.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_python_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_python_indented;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_python
  Index.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Index.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(v_self.v_obj.emit_python()) + string('.f_index(') + string(v_self.v_index_exp.emit_python()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_python_indented;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_python
  Lookup.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Lookup.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(v_self.v_obj.emit_python()) + string('.f_lookup(') + string(v_self.v_index_exp.emit_python()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_python_indented;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  var v_table = null;
  // method emit_python
  Var.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Var.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            throw((string(Python.tab(v_level)) + string((( bool(((v_self.v_twigil == '.'))) ? ((string('v_self.v_') + string(v_self.v_name) + string(''))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH'))) : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_self.v_name) + string(''))))))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_python_indented;  // v8 bug workaround
  // method emit_python_name
  Var.emit_python_name = function () {
    var v_self = this;
        try {
            throw((( bool(((v_self.v_twigil == '.'))) ? ((string('v_self.v_') + string(v_self.v_name))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH'))) : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_self.v_name))))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_python_name;  // v8 bug workaround
(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = 'v_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = 'List_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = 'Hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = 'Code_'); })();
    return(Hash_a);
})());})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_python
  Proto.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Proto.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            if ( bool((v_self.v_name == 'self')) ) { (function () {
                throw((string(Python.tab(v_level)) + string('v_self')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Python.tab(v_level)) + string(Main.to_go_namespace(v_self.v_name)) + string('_proto')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_python_indented;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  var Hash_method_python = {};
  // method emit_python
  Call.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Call.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

            var v_call = null;

(v_invocant = v_self.v_invocant.emit_python());
            if ( bool((v_self.v_method == 'new')) ) { (function () {
                var List_str = [];

                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) {                     if ( bool(and(isa(v_field, 'Apply'), function () { return (v_field.code() == 'infix:<' + String.fromCharCode(61) + '>>'); })) ) { (function () {
List_str.push((string('v_') + string(v_field.arguments()[0].buf()) + string(String.fromCharCode(61)) + string(v_field.arguments()[1].emit_python())));;
                    })(); }
                    else { (function () {
                        die('Error in constructor, field: ', perl(v_field));;
                    })(); };; })(a_[i_]) } })(v_self.v_arguments);
                throw((string(Python.tab(v_level)) + string('__builtin__.') + string(Main.to_go_namespace(v_self.v_invocant.name())) + string('(') + string(List_str.join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((Hash_method_python).hasOwnProperty(v_self.v_method)) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string(Python.tab(v_level)) + string('f_map(') + string(v_invocant) + string(', lambda x: Main.') + string(v_self.v_method) + string('(x, ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string('))')));;
                })(); }
                else { (function () {
                    throw((string(Python.tab(v_level)) + string((string('f_'))) + string(v_self.v_method) + string('(') + string(v_invocant) + string(', ') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_meth == 'postcircumfix:<( )>')) ) { (function () {
                throw((string(Python.tab(v_level)) + string(v_invocant) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(((v_meth == 'values')), function () { return ((v_meth == 'keys')); })) ) { (function () {
                throw((string(Python.tab(v_level)) + string(v_invocant) + string('.') + string(v_meth) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_meth == 'chars')) ) { (function () {
                throw((string(Python.tab(v_level)) + string((string('len('))) + string(v_invocant) + string((string(')')))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_call = (string('f_') + string(v_meth) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));
            if ( bool((v_self.v_hyper)) ) { return (function () {
                throw((string(Python.tab(v_level)) + string('f_map(') + string(v_invocant) + string(', lambda x: x.') + string(v_call) + string(')')));
            })(); }
            else { return (function () {
                throw((string(Python.tab(v_level)) + string(v_invocant) + string('.') + string(v_call)));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_python_indented;  // v8 bug workaround
(Hash_method_python = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['id']  = 'id'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['yaml']  = 'yaml'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['join']  = 'join'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['split']  = 'split'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['isa']  = 'isa'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a['say']  = 'say'); })();
    return(Hash_a);
})());})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // method emit_python_indented
  Apply.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(v_self.emit_python())));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_python_indented;  // v8 bug workaround
  // method emit_python
  Apply.emit_python = function () {
    var v_self = this;
        try {
            var v_apply = null;

            var v_code = null;

(v_apply = v_self.op_assign());
            if ( bool(v_apply) ) { (function () {
                throw(v_apply.emit_python());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_code = v_self.v_code);
            if ( bool(isa((v_self.v_arguments[0]), 'Apply')) ) { (function () {
                var v_args2 = null;

(v_args2 = v_self.v_arguments[0].arguments());
                if ( bool(and(isa((v_args2[0]), 'Apply'), function () { return (or((v_args2[0].code() == 'infix:<or>'), function () { return (v_args2[0].code() == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>'); })); })) ) { (function () {
(function () { if (v_args2 == null) { v_args2 = [] }; return (v_args2[0]  = (function () { var tmp = {v_block: v_args2[0]}; tmp.__proto__ = Do; return tmp; })()); })();;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa((v_self.v_arguments[0]), 'Apply')) ) { (function () {
                var v_args2 = null;

(v_args2 = v_self.v_arguments[0].arguments());
                if ( bool(and(isa((v_args2[1]), 'Apply'), function () { return (v_args2[1].code() != 'infix:<' + String.fromCharCode(61) + '>>'); })) ) { (function () {
(function () { if (v_args2 == null) { v_args2 = [] }; return (v_args2[1]  = (function () { var tmp = {v_block: v_args2[1]}; tmp.__proto__ = Do; return tmp; })()); })();;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa((v_self.v_arguments[1]), 'Apply')) ) { (function () {
                var v_args2 = null;

(v_args2 = v_self.v_arguments[1].arguments());
                if ( bool(and(isa((v_args2[1]), 'Apply'), function () { return (v_args2[1].code() != 'infix:<' + String.fromCharCode(61) + '>>'); })) ) { (function () {
(function () { if (v_args2 == null) { v_args2 = [] }; return (v_args2[1]  = (function () { var tmp = {v_block: v_args2[1]}; tmp.__proto__ = Do; return tmp; })()); })();;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string('(') + string(v_self.v_code.emit_python()) + string(').(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw('v_self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Mu')) ) { (function () {
                throw('mp6_Mu()');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string('v_MATCH.f__setattr__(' + String.fromCharCode(39) + 'v_capture' + String.fromCharCode(39) + ', ') + string((v_self.v_arguments[0]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'False')) ) { (function () {
                throw('False');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'True')) ) { (function () {
                throw('True');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'array')) ) { (function () {
                throw((string('[') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(']')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Int')) ) { (function () {
                throw((string('mp6_to_num(') + string((v_self.v_arguments[0]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Num')) ) { (function () {
                throw((string('mp6_to_num(') + string((v_self.v_arguments[0]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string('unicode(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('not mp6_to_bool(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(63) + '>')) ) { (function () {
                throw((string('not (not mp6_to_bool(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string('mp6_to_scalar(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw((string(String.fromCharCode(37) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<x>')) ) { (function () {
                throw((string('(unicode(') + string(v_self.v_arguments[0].emit_python()) + string(')') + string(' * mp6_to_num(') + string(v_self.v_arguments[1].emit_python()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'list:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw((string('(unicode(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') + unicode(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<+>')) ) { (function () {
                throw((string('(mp6_to_num(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') + mp6_to_num(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<->')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' - ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<*>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' * ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(47) + '>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(' ' + String.fromCharCode(47) + ' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or((v_code == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>'), function () { return (v_code == 'infix:<and>'); })) ) { (function () {
                throw((string('mp6_and(') + string((v_self.v_arguments[0]).emit_python()) + string(', lambda: ') + string((v_self.v_arguments[1]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or((v_code == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>'), function () { return (v_code == 'infix:<or>'); })) ) { (function () {
                throw((string('mp6_or(') + string((v_self.v_arguments[0]).emit_python()) + string(', lambda: ') + string((v_self.v_arguments[1]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(47) + String.fromCharCode(47) + '>')) ) { (function () {
                throw((string('mp6_defined_or(') + string((v_self.v_arguments[0]).emit_python()) + string(', lambda: ') + string((v_self.v_arguments[1]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<eq>')) ) { (function () {
                throw((string('(unicode(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' unicode(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<ne>')) ) { (function () {
                throw((string('(unicode(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') ' + String.fromCharCode(33) + String.fromCharCode(61) + ' unicode(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<ge>')) ) { (function () {
                throw((string('(unicode(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') >' + String.fromCharCode(61) + ' unicode(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<le>')) ) { (function () {
                throw((string('(unicode(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') <' + String.fromCharCode(61) + ' unicode(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(mp6_to_num(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' mp6_to_num(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(mp6_to_num(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') ' + String.fromCharCode(33) + String.fromCharCode(61) + ' mp6_to_num(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<>')) ) { (function () {
                throw((string('(mp6_to_num(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') < mp6_to_num(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>>')) ) { (function () {
                throw((string('(mp6_to_num(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') > mp6_to_num(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(mp6_to_num(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') <' + String.fromCharCode(61) + ' mp6_to_num(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>' + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(mp6_to_num(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(') >' + String.fromCharCode(61) + ' mp6_to_num(')) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<..>')) ) { (function () {
                throw((string('mp6_Array(range(') + string((v_self.v_arguments[0]).emit_python()) + string(', 1 + ') + string((v_self.v_arguments[1]).emit_python()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw((string('(f_id(') + string((v_self.v_arguments[0]).emit_python()) + string(') ' + String.fromCharCode(61) + String.fromCharCode(61) + ' f_id(') + string((v_self.v_arguments[1]).emit_python()) + string('))')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'exists')) ) { (function () {
                var v_arg = null;

(v_arg = v_self.v_arguments[0]);
                if ( bool(isa(v_arg, 'Lookup')) ) { (function () {
                    throw((string('(') + string((v_arg.obj()).emit_python()) + string(').has_key(') + string((v_arg.index_exp()).emit_python()) + string(')')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                var v_ast = null;

(v_ast = (function () { var tmp = {v_block: (function () { var tmp = {v_cond: (v_self.v_arguments[0]),v_body: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[1]);
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })(),v_otherwise: (function () { var tmp = {v_stmts: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[2]);
    return(List_a);
})()}; tmp.__proto__ = Lit$Block; return tmp; })()}; tmp.__proto__ = If; return tmp; })()}; tmp.__proto__ = Do; return tmp; })());
                throw(v_ast.emit_python());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'circumfix:<( )>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw(v__NAMESPACE.emit_python_bind(v_self.v_arguments[0], v_self.v_arguments[1]));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'return')) ) { (function () {
                throw((string('raise mp6_Return(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_python()) + string('[') + string('mp6_to_num(') + string((v_self.v_arguments[1]).emit_python()) + string(')') + string(':') + string((( bool((v_self.v_arguments[2] != null)) ? (string('mp6_to_num(') + string((v_self.v_arguments[1]).emit_python()) + string(') ') + string('+ mp6_to_num(') + string((v_self.v_arguments[2]).emit_python()) + string(')')) : ''))) + string(']')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'index')) ) { (function () {
                throw((string('mp6_index(') + string((v_self.v_arguments[0]).emit_python()) + string(', ') + string((v_self.v_arguments[1]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'defined')) ) { (function () {
                throw((string('not f_isa(') + string((v_self.v_arguments[0]).emit_python()) + string((string(',' + String.fromCharCode(39) + 'Mu' + String.fromCharCode(39) + ')')))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'shift')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_python()) + string('.f_shift()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'pop')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_python()) + string('.f_pop()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'push')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_python()) + string('.f_push(') + string((v_self.v_arguments[1]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'unshift')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_python()) + string('.f_unshift(') + string((v_self.v_arguments[1]).emit_python()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(Main.to_go_namespace(v_self.v_namespace)) + string('_proto.f_') + string(v_self.v_code) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('f_') + string(v_self.v_code) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_python() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Apply.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Python.tab(v_level)) + string(v_self.emit_python())));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_python_indented;  // v8 bug workaround
  // sub emit_python_bind
  Apply.emit_python_bind = function (v_parameters, v_arguments) {
        try {
            if ( bool(isa(v_parameters, 'Call')) ) { (function () {
                throw((string((v_parameters.invocant()).emit_python()) + string((string('.f__setattr__(' + String.fromCharCode(39) + 'v_'))) + string(v_parameters.method()) + string((string(String.fromCharCode(39) + ', '))) + string(v_arguments.emit_python()) + string((string(')')))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(64)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(37)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            throw((string(v_parameters.emit_python()) + string('.f_set(') + string(v_arguments.emit_python()) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_python_bind;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // method emit_python
  If.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_python;  // v8 bug workaround
  // method emit_python_indented
  If.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_has_body = null;

            var v_has_otherwise = null;

            var v_body_block = null;

            var v_s = null;

(v_has_body = ( bool(v_self.v_body) ? 1 : 0));
(v_has_otherwise = ( bool(v_self.v_otherwise) ? 1 : 0));
(v_body_block = (function () { var tmp = {v_block: v_self.v_body.stmts()}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
            if ( bool(v_body_block.has_my_decl()) ) { (function () {
(v_body_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Do; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_s = (string(Python.tab(v_level)) + string('if mp6_to_bool(') + string(v_self.v_cond.emit_python()) + string((string('):') + string(String.fromCharCode(10)))) + string(v_body_block.emit_python_indented(add(v_level, 1)))));
            if ( bool((v_has_otherwise)) ) { (function () {
                var v_otherwise_block = null;

(v_otherwise_block = (function () { var tmp = {v_block: v_self.v_otherwise.stmts()}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
                if ( bool(v_otherwise_block.has_my_decl()) ) { (function () {
(v_otherwise_block = (function () { var tmp = {v_block: v_self.v_otherwise}; tmp.__proto__ = Do; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_s = (string(v_s) + string((string(String.fromCharCode(10)))) + string(Python.tab(v_level)) + string((string('else:') + string(String.fromCharCode(10)))) + string(v_otherwise_block.emit_python_indented(add(v_level, 1)))));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_python_indented;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // method emit_python
  While.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_python;  // v8 bug workaround
  // method emit_python_indented
  While.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_body_block = null;

(v_body_block = (function () { var tmp = {v_block: v_self.v_body.stmts()}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
            if ( bool(v_body_block.has_my_decl()) ) { (function () {
(v_body_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Do; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(v_self.v_init, function () { return v_self.v_continue; })) ) { (function () {
                die((string('not implemented (While)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Python.tab(v_level)) + string('while mp6_to_bool(') + string(v_self.v_cond.emit_python()) + string((string('):') + string(String.fromCharCode(10)))) + string(v_body_block.emit_python_indented(add(v_level, 1)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_python_indented;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // method emit_python
  For.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_python;  // v8 bug workaround
  // method emit_python_indented
  For.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_body_block = null;

            var v_sig = null;

(v_body_block = (function () { var tmp = {v_block: v_self.v_body.stmts()}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
(v_sig = 'v__');
            if ( bool(v_self.v_body.sig()) ) { (function () {
(v_sig = v_self.v_body.sig().emit_python_name());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_body_block.has_my_decl()) ) { (function () {
                var v_label = null;

                var v_anon_var = null;

                var v_anon_sig = null;

(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
(v_anon_var = or(v_self.v_body.sig(), function () { return (function () { var tmp = {v_name: '_',v_namespace: '',v_sigil: String.fromCharCode(36),v_twigil: ''}; tmp.__proto__ = Var; return tmp; })(); }));
(v_anon_sig = (function () { var tmp = {v_invocant: null,v_positional: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_anon_var);
    return(List_a);
})(),v_named: (function () { 
    var Hash_a = {};

    return(Hash_a);
})()}; tmp.__proto__ = Sig; return tmp; })());
                Perlito6$Python$LexicalBlock.push_stmt_python((function () { var tmp = {v_name: v_label,v_block: v_self.v_body.stmts(),v_sig: v_anon_sig,v_handles_return_exception: 0}; tmp.__proto__ = Perlito6$Python$AnonSub; return tmp; })());
                throw((string(Python.tab(v_level)) + string('for ') + string(v_sig) + string((string(' in '))) + string(v_self.v_cond.emit_python()) + string((string(':') + string(String.fromCharCode(10)))) + string(Python.tab(add(v_level, 1))) + string((string('f_'))) + string(v_label) + string((string('('))) + string(v_sig) + string((string(')')))));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Python.tab(v_level)) + string('for ') + string(v_sig) + string((string(' in '))) + string(v_self.v_cond.emit_python()) + string((string(':') + string(String.fromCharCode(10)))) + string(v_body_block.emit_python_indented(add(v_level, 1)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_python_indented;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_python
  Decl.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Decl.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_decl = null;

            var v_name = null;

(v_decl = v_self.v_decl);
(v_name = v_self.v_var.name());
            return((string(Python.tab(v_level)) + string((( bool(((v_decl == 'has'))) ? ('') : v_self.v_var.emit_python())))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_python_indented;  // v8 bug workaround
  // method emit_python_init
  Decl.emit_python_init = function () {
    var v_self = this;
        try {
            if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
                throw('mp6_Hash(' + String.fromCharCode(123) + String.fromCharCode(125) + ')');;
            })(); }
            else { (function () {
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
                    throw('mp6_Array([])');;
                })(); }
                else { (function () {
                    throw('mp6_Scalar()');;
                })(); };;
            })(); };
            throw('');;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_python_init;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_python
  Method.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Method.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_args = null;

            var v_default_args = null;

            var v_meth_args = null;

            var v_label = null;

            var v_block = null;

            var List_s = [];

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_default_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_meth_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
v_meth_args.push(v_invocant.emit_python_name());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) {                 var v_arg = null;

(v_arg = v_field.emit_python_name());
v_args.push(v_arg);
v_default_args.push((string(v_arg) + string(String.fromCharCode(61) + 'mp6_Scalar()')));
v_meth_args.push((string(v_arg) + string(String.fromCharCode(61) + 'mp6_Scalar()')));; })(a_[i_]) } })((v_pos));
(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
(v_block = (function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
            push(List_s, (string(Python.tab(v_level)) + string('def f_') + string(v_label) + string((string('('))) + string(v_meth_args.join((string(', ')))) + string((string('):')))));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('try:')))));
            push(List_s, v_block.emit_python_indented(add(v_level, 2)));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('except mp6_Return, r:')))));
            push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('return r.value')))));
            push(List_s, (string(Python.tab(v_level)) + string((string('self.__dict__.update(') + string(String.fromCharCode(123)) + string(String.fromCharCode(39) + 'f_'))) + string(v_self.v_name) + string((string(String.fromCharCode(39) + ':f_'))) + string(v_label) + string((string(String.fromCharCode(125) + ')')))));
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_python_indented;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_python
  Sub.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Sub.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_label = null;

            var v_sig = null;

            var v_pos = null;

            var v_args = null;

            var v_default_args = null;

            var v_meth_args = null;

            var v_block = null;

            var v_label2 = null;

            var List_s = [];

(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
            if ( bool(((v_self.v_name == ''))) ) { (function () {
                Perlito6$Python$LexicalBlock.push_stmt_python((function () { var tmp = {v_name: v_label,v_block: v_self.v_block,v_sig: v_self.v_sig,v_handles_return_exception: 1}; tmp.__proto__ = Perlito6$Python$AnonSub; return tmp; })());
                throw((string(Python.tab(v_level)) + string('f_') + string(v_label)));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_default_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_meth_args = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('self');
    return(List_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) {                 var v_arg = null;

(v_arg = v_field.emit_python_name());
v_args.push(v_arg);
v_default_args.push((string(v_arg) + string(String.fromCharCode(61) + 'mp6_Scalar()')));
v_meth_args.push((string(v_arg) + string(String.fromCharCode(61) + 'mp6_Scalar()')));; })(a_[i_]) } })((v_pos));
(v_block = (function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Python$LexicalBlock; return tmp; })());
(v_label2 = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
            push(List_s, (string(Python.tab(v_level)) + string((string('def f_'))) + string(v_self.v_name) + string((string('('))) + string(v_default_args.join((string(', ')))) + string((string('):')))));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('try:')))));
            push(List_s, v_block.emit_python_indented(add(v_level, 2)));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('except mp6_Return, r:')))));
            push(List_s, (string(Python.tab(add(v_level, 2))) + string((string('return r.value')))));
            push(List_s, (string(Python.tab(v_level)) + string((string('global '))) + string(v_label2)));
            push(List_s, (string(Python.tab(v_level)) + string(v_label2) + string((string(' ' + String.fromCharCode(61) + ' f_'))) + string(v_self.v_name)));
            push(List_s, (string(Python.tab(v_level)) + string((string('def f_'))) + string(v_label) + string((string('('))) + string(v_meth_args.join((string(', ')))) + string((string('):')))));
            push(List_s, (string(Python.tab(add(v_level, 1))) + string((string('return '))) + string(v_label2) + string((string('('))) + string(v_args.join((string(', ')))) + string((string(')')))));
            push(List_s, (string(Python.tab(v_level)) + string((string('self.__dict__.update(') + string(String.fromCharCode(123)) + string(String.fromCharCode(39) + 'f_'))) + string(v_self.v_name) + string((string(String.fromCharCode(39) + ':f_'))) + string(v_label) + string((string(String.fromCharCode(125) + ')')))));
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_python_indented;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_python
  Do.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Do.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            var v_label = null;

            var v_block = null;

(v_label = (string('_anon_') + string(Perlito6$Python$LexicalBlock.get_ident_python())));
(v_block = v_self.simplify().block());
            Perlito6$Python$LexicalBlock.push_stmt_python((function () { var tmp = {v_name: v_label,v_block: v_block,v_sig: (function () { var tmp = {v_invocant: null,v_positional: (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})(),v_named: (function () { 
    var Hash_a = {};

    return(Hash_a);
})()}; tmp.__proto__ = Sig; return tmp; })(),v_handles_return_exception: 0}; tmp.__proto__ = Perlito6$Python$AnonSub; return tmp; })());
            throw((string(Python.tab(v_level)) + string((string('f_'))) + string(v_label) + string((string('()')))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_python_indented;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_python
  Use.emit_python = function () {
    var v_self = this;
        try {
            return(v_self.emit_python_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_python;  // v8 bug workaround
  // method emit_python_indented
  Use.emit_python_indented = function (v_level) {
    var v_self = this;
        try {
            throw('');;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_python_indented;  // v8 bug workaround
})()
;    // use v6
;    // use Perlito6::AST
;// class Ruby
if (typeof Ruby !== 'object') {
  Ruby = function() {};
  Ruby = new Ruby;
  Ruby.isa = function (s) { return s == 'Ruby'; };
  Ruby.perl = function () { return 'Ruby.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Ruby;
  // sub to_str
  Ruby.to_str = function (v_op, v_args) {
        try {
            var List_s = [];

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_cond) {                 if ( bool(isa(v_cond, 'Val::Buf')) ) { (function () {
                    push(List_s, v_cond.emit_ruby());;
                })(); }
                else { (function () {
                    push(List_s, (string('(') + string(v_cond.emit_ruby()) + string(').to_s')));;
                })(); };; })(a_[i_]) } })(((v_args)));
            throw((string('(') + string(List_s.join(v_op)) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Ruby.to_str;  // v8 bug workaround
  // sub to_num
  Ruby.to_num = function (v_op, v_args) {
        try {
            var List_s = [];

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_cond) {                 if ( bool(or((isa(v_cond, 'Val::Int')), function () { return (isa(v_cond, 'Val::Num')); })) ) { (function () {
                    push(List_s, v_cond.emit_ruby());;
                })(); }
                else { (function () {
                    push(List_s, (string('mp6_to_num(') + string(v_cond.emit_ruby()) + string(')')));;
                })(); };; })(a_[i_]) } })(((v_args)));
            throw((string('(') + string(List_s.join(v_op)) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Ruby.to_num;  // v8 bug workaround
  // sub to_bool
  Ruby.to_bool = function (v_op, v_args) {
        try {
            var List_s = [];

            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_cond) {                 if ( bool(or((isa(v_cond, 'Val::Int')), function () { return (isa(v_cond, 'Val::Num')); })) ) { (function () {
                    push(List_s, (string('(') + string(v_cond.emit_ruby()) + string(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' 0 )')));;
                })(); }
                else { (function () {
                    if ( bool(or(or(or(or((and((isa(v_cond, 'Apply')), function () { return ((v_cond.code() == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>')); })), function () { return (and((isa(v_cond, 'Apply')), function () { return ((v_cond.code() == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>')); })); }), function () { return (and((isa(v_cond, 'Apply')), function () { return ((v_cond.code() == 'prefix:<' + String.fromCharCode(33) + '>')); })); }), function () { return (and((isa(v_cond, 'Apply')), function () { return ((v_cond.code() == 'prefix:<' + String.fromCharCode(63) + '>')); })); }), function () { return (isa(v_cond, 'Val::Bit')); })) ) { (function () {
                        push(List_s, v_cond.emit_ruby());;
                    })(); }
                    else { (function () {
                        push(List_s, (string('mp6_to_bool(') + string(v_cond.emit_ruby()) + string(')')));;
                    })(); };;
                })(); };; })(a_[i_]) } })(((v_args)));
            throw((string('(') + string(List_s.join(v_op)) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Ruby.to_bool;  // v8 bug workaround
  // sub tab
  Ruby.tab = function (v_level) {
        try {
            return(str_replicate((string('    ')), v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Ruby.tab;  // v8 bug workaround
})()
;// class Perlito6::Ruby::AnonSub
if (typeof Perlito6$Ruby$AnonSub !== 'object') {
  Perlito6$Ruby$AnonSub = function() {};
  Perlito6$Ruby$AnonSub = new Perlito6$Ruby$AnonSub;
  Perlito6$Ruby$AnonSub.isa = function (s) { return s == 'Perlito6::Ruby::AnonSub'; };
  Perlito6$Ruby$AnonSub.perl = function () { return 'Perlito6::Ruby::AnonSub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Ruby$AnonSub;
  // accessor name
  Perlito6$Ruby$AnonSub.v_name = null;
  Perlito6$Ruby$AnonSub.name = function () { return this.v_name; };
  // accessor sig
  Perlito6$Ruby$AnonSub.v_sig = null;
  Perlito6$Ruby$AnonSub.sig = function () { return this.v_sig; };
  // accessor block
  Perlito6$Ruby$AnonSub.v_block = null;
  Perlito6$Ruby$AnonSub.block = function () { return this.v_block; };
  // accessor handles_return_exception
  Perlito6$Ruby$AnonSub.v_handles_return_exception = null;
  Perlito6$Ruby$AnonSub.handles_return_exception = function () { return this.v_handles_return_exception; };
  // method emit_ruby
  Perlito6$Ruby$AnonSub.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Ruby$AnonSub.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Perlito6$Ruby$AnonSub.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_pos = null;

            var v_args = null;

            var v_block = null;

            var List_s = [];

(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) { v_args.push(v_field.emit_ruby_name());; })(a_[i_]) } })((v_pos));
(v_block = (function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
            push(List_s, (string(Ruby.tab(v_level)) + string((( bool(v_self.v_name) ? ((string('f_') + string(v_self.v_name) + string((string(' ' + String.fromCharCode(61) + ' '))))) : ''))) + string((string('lambda') + string(String.fromCharCode(123)) + string(' ' + String.fromCharCode(124)))) + string(v_args.join((string(', ')))) + string((string(String.fromCharCode(124) + ' ')))));
            push(List_s, v_block.emit_ruby_indented(add(v_level, 1)));
            push(List_s, (string(Ruby.tab(v_level)) + string((string(String.fromCharCode(125))))));
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Ruby$AnonSub.emit_ruby_indented;  // v8 bug workaround
})()
;// class Perlito6::Ruby::LexicalBlock
if (typeof Perlito6$Ruby$LexicalBlock !== 'object') {
  Perlito6$Ruby$LexicalBlock = function() {};
  Perlito6$Ruby$LexicalBlock = new Perlito6$Ruby$LexicalBlock;
  Perlito6$Ruby$LexicalBlock.isa = function (s) { return s == 'Perlito6::Ruby::LexicalBlock'; };
  Perlito6$Ruby$LexicalBlock.perl = function () { return 'Perlito6::Ruby::LexicalBlock.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Perlito6$Ruby$LexicalBlock;
  var v_ident = null;
  var List_anon_block = [];
  // accessor block
  Perlito6$Ruby$LexicalBlock.v_block = null;
  Perlito6$Ruby$LexicalBlock.block = function () { return this.v_block; };
  // accessor needs_return
  Perlito6$Ruby$LexicalBlock.v_needs_return = null;
  Perlito6$Ruby$LexicalBlock.needs_return = function () { return this.v_needs_return; };
  // accessor top_level
  Perlito6$Ruby$LexicalBlock.v_top_level = null;
  Perlito6$Ruby$LexicalBlock.top_level = function () { return this.v_top_level; };
  // sub push_stmt_ruby
  Perlito6$Ruby$LexicalBlock.push_stmt_ruby = function (v_block) {
        try {
            return(push(List_anon_block, v_block));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Ruby$LexicalBlock.push_stmt_ruby;  // v8 bug workaround
  // sub get_ident_ruby
  Perlito6$Ruby$LexicalBlock.get_ident_ruby = function () {
        try {
(v_ident = add(v_ident, 1));
            throw(v_ident);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Ruby$LexicalBlock.get_ident_ruby;  // v8 bug workaround
  // method has_my_decl
  Perlito6$Ruby$LexicalBlock.has_my_decl = function () {
    var v_self = this;
        try {
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    throw(1);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'my'); })) ) { (function () {
                    throw(1);;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            throw(0);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Ruby$LexicalBlock.has_my_decl;  // v8 bug workaround
  // method emit_ruby
  Perlito6$Ruby$LexicalBlock.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Ruby$LexicalBlock.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Perlito6$Ruby$LexicalBlock.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var List_s = [];

            var List_tmp = [];

            var v_has_decl = null;

            var v_block = null;

            var v_has_my_decl = null;

            var List_my_decl = [];

            var List_my_init = [];

            var Hash_my_seen = {};

            var v_last_statement = null;

            if ( bool(( bool((v_self.v_block)) ? false : true)) ) { (function () {
                push(v_self.v_block, (function () { var tmp = {v_code: 'Mu'}; tmp.__proto__ = Apply; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) { List_tmp.push(v_stmt);; })(a_[i_]) } })(List_anon_block);
(v_has_decl = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_block = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
                    push(v_has_decl, v_decl);;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'has'); })) ) { (function () {
                    push(v_has_decl, v_decl);;
                })(); }
                else { (function () {
                    push(v_block, v_decl);;
                })(); };; })(a_[i_]) } })(v_self.v_block);
            if ( bool(((v_has_decl))) ) { (function () {
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                     if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'has')); })) ) { (function () {
                        push(List_s, (string(Ruby.tab(v_level)) + string('attr_accessor :v_') + string((v_decl.var()).name())));
                        push(List_s, (string(Ruby.tab(v_level)) + string('def f_') + string((v_decl.var()).name()) + string('()')));
                        push(List_s, (string(Ruby.tab(add(v_level, 1))) + string('return self.v_') + string((v_decl.var()).name())));
                        push(List_s, (string(Ruby.tab(v_level)) + string((string('end')))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'has'); })) ) { (function () {
                        push(List_s, (string(Ruby.tab(v_level)) + string('attr_accessor :v_') + string(((v_decl.arguments()[0]).var()).name())));
                        push(List_s, (string(Ruby.tab(v_level)) + string('def f_') + string(((v_decl.arguments()[0]).var()).name()) + string('()')));
                        push(List_s, (string(Ruby.tab(add(v_level, 1))) + string('return self.v_') + string(((v_decl.arguments()[0]).var()).name())));
                        push(List_s, (string(Ruby.tab(v_level)) + string((string('end')))));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };; })(a_[i_]) } })(((v_has_decl)));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_has_my_decl = 0);
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(and(isa(v_decl, 'Decl'), function () { return ((v_decl.decl() == 'my')); })) ) { (function () {
                    if ( bool(( bool(((function () { if (Hash_my_seen == null) { Hash_my_seen = {} }; return (Hash_my_seen[(v_decl.var()).name()] ); })())) ? false : true)) ) { (function () {
                        push(List_my_decl, (v_decl.var()).emit_ruby_name());
                        push(List_my_init, v_decl.emit_ruby_init());
(v_has_my_decl = 1);
(function () { if (Hash_my_seen == null) { Hash_my_seen = {} }; return (Hash_my_seen[(v_decl.var()).name()]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };
                if ( bool(and(and(and(isa(v_decl, 'Apply'), function () { return (v_decl.code() == 'infix:<' + String.fromCharCode(61) + '>'); }), function () { return isa(v_decl.arguments()[0], 'Decl'); }), function () { return (v_decl.arguments()[0].decl() == 'my'); })) ) { (function () {
                    if ( bool(( bool(((function () { if (Hash_my_seen == null) { Hash_my_seen = {} }; return (Hash_my_seen[((v_decl.arguments()[0]).var()).name()] ); })())) ? false : true)) ) { (function () {
                        push(List_my_decl, ((v_decl.arguments()[0]).var()).emit_ruby_name());
                        push(List_my_init, (v_decl.arguments()[0]).emit_ruby_init());
(v_has_my_decl = 1);
(function () { if (Hash_my_seen == null) { Hash_my_seen = {} }; return (Hash_my_seen[((v_decl.arguments()[0]).var()).name()]  = 1); })();;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(((v_block)));
            if ( bool(v_has_my_decl) ) { (function () {
                push(List_s, (string(Ruby.tab(v_level)) + string((string('Proc.new') + string(String.fromCharCode(123)) + string(' ' + String.fromCharCode(124)))) + string(List_my_decl.join((string(', ')))) + string((string(String.fromCharCode(124))))));
(v_level = add(v_level, 1));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_needs_return) ) { (function () {
(v_last_statement = pop(v_block));;
            })(); }
            else { (function () {
                null;
            })(); };
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                 var v_s2 = null;

(List_anon_block = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_s2 = v_stmt.emit_ruby_indented(v_level));
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) { List_s.push(v_stmt.emit_ruby_indented(v_level));; })(a_[i_]) } })(List_anon_block);
                push(List_s, v_s2);; })(a_[i_]) } })(((v_block)));
            if ( bool(and(v_self.v_needs_return, function () { return v_last_statement; })) ) { (function () {
                var v_s2 = null;

(List_anon_block = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
                if ( bool(isa(v_last_statement, 'If')) ) { (function () {
                    var v_cond = null;

                    var v_has_otherwise = null;

                    var v_body_block = null;

                    var v_otherwise_block = null;

(v_cond = v_last_statement.cond());
(v_has_otherwise = ( bool(v_last_statement.otherwise()) ? 1 : 0));
(v_body_block = (function () { var tmp = {v_block: (v_last_statement.body().stmts()),v_needs_return: 1}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
(v_otherwise_block = (function () { var tmp = {v_block: (v_last_statement.otherwise().stmts()),v_needs_return: 1}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
                    if ( bool(v_body_block.has_my_decl()) ) { (function () {
(v_body_block = (function () { var tmp = {v_result: (function () { var tmp = {v_block: (v_last_statement.body())}; tmp.__proto__ = Do; return tmp; })()}; tmp.__proto__ = Return; return tmp; })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
                    if ( bool(and(v_has_otherwise, function () { return v_otherwise_block.has_my_decl(); })) ) { (function () {
(v_otherwise_block = (function () { var tmp = {v_result: (function () { var tmp = {v_block: (v_last_statement.otherwise())}; tmp.__proto__ = Do; return tmp; })()}; tmp.__proto__ = Return; return tmp; })());;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_s2 = (string(Ruby.tab(v_level)) + string('if ') + string(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_cond);
    return(List_a);
})())) + string((string(String.fromCharCode(10)))) + string(v_body_block.emit_ruby_indented(add(v_level, 1)))));
                    if ( bool((v_has_otherwise)) ) { (function () {
(v_s2 = (string(v_s2) + string((string(String.fromCharCode(10)))) + string(Ruby.tab(v_level)) + string((string('else') + string(String.fromCharCode(10)))) + string(v_otherwise_block.emit_ruby_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Ruby.tab(v_level)) + string((string('end')))));;
                    })(); }
                    else { (function () {
(v_s2 = (string(v_s2) + string((string(String.fromCharCode(10)))) + string(Ruby.tab(v_level)) + string((string('end')))));;
                    })(); };;
                })(); }
                else { (function () {
                    if ( bool(isa(v_last_statement, 'Bind')) ) { (function () {
(v_s2 = v_last_statement.emit_ruby_indented(v_level));
(v_s2 = (string(v_s2) + string((string(String.fromCharCode(10)))) + string(Ruby.tab(v_level)) + string((string('return '))) + string((v_last_statement.parameters()).emit_ruby())));;
                    })(); }
                    else { (function () {
                        if ( bool(or(isa(v_last_statement, 'Return'), function () { return isa(v_last_statement, 'For'); })) ) { (function () {
(v_s2 = v_last_statement.emit_ruby_indented(v_level));;
                        })(); }
                        else { (function () {
(v_s2 = (string(Ruby.tab(v_level)) + string((string('return '))) + string(v_last_statement.emit_ruby())));;
                        })(); };;
                    })(); };;
                })(); };
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) { List_s.push(v_stmt.emit_ruby_indented(v_level));; })(a_[i_]) } })(List_anon_block);
List_s.push(v_s2);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_has_my_decl) ) { (function () {
(v_level = (v_level - 1));
                push(List_s, (string(Ruby.tab(v_level)) + string((string(String.fromCharCode(125) + '.call('))) + string(List_my_init.join((string(', ')))) + string((string(')')))));;
            })(); }
            else { (function () {
                null;
            })(); };
(List_anon_block = List_tmp);
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Perlito6$Ruby$LexicalBlock.emit_ruby_indented;  // v8 bug workaround
})()
;// class CompUnit
if (typeof CompUnit !== 'object') {
  CompUnit = function() {};
  CompUnit = new CompUnit;
  CompUnit.isa = function (s) { return s == 'CompUnit'; };
  CompUnit.perl = function () { return 'CompUnit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = CompUnit;
  // accessor attributes
  CompUnit.v_attributes = null;
  CompUnit.attributes = function () { return this.v_attributes; };
  // accessor methods
  CompUnit.v_methods = null;
  CompUnit.methods = function () { return this.v_methods; };
  // method emit_ruby
  CompUnit.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  CompUnit.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var List_s = [];

            var v_block = null;

            var v_name = null;

(v_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
(v_name = Main.to_go_namespace(v_self.v_name));
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_decl) {                 if ( bool(isa(v_decl, 'Use')) ) { (function () {
                    if ( bool((v_decl.mod() == 'v6')) ) { (function () {
                        null;
                    })(); }
                    else { (function () {
                        push(List_s, (string(Ruby.tab(v_level)) + string((string('require ' + String.fromCharCode(39)))) + string(Main.to_go_namespace(v_decl.mod())) + string((string('.rb' + String.fromCharCode(39))))));;
                    })(); };;
                })(); }
                else { (function () {
                    null;
                })(); };; })(a_[i_]) } })(v_self.v_body);
            push(List_s, (string(Ruby.tab(v_level)) + string('class C_') + string(v_name)));
            push(List_s, (string(Ruby.tab(add(v_level, 1))) + string(String.fromCharCode(36)) + string(v_name) + string(' ' + String.fromCharCode(61) + ' C_') + string(v_name) + string('.new()')));
            push(List_s, (string(Ruby.tab(add(v_level, 1))) + string('namespace ' + String.fromCharCode(61) + ' ' + String.fromCharCode(36)) + string(v_name)));
            push(List_s, v_block.emit_ruby_indented(add(v_level, 1)));
            push(List_s, (string(Ruby.tab(v_level)) + string((string('end')))));
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  CompUnit.emit_ruby_indented;  // v8 bug workaround
})()
;// class Val::Int
if (typeof Val$Int !== 'object') {
  Val$Int = function() {};
  Val$Int = new Val$Int;
  Val$Int.isa = function (s) { return s == 'Val::Int'; };
  Val$Int.perl = function () { return 'Val::Int.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Int;
  // method emit_ruby
  Val$Int.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.v_int);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Val$Int.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(v_self.v_int)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Int.emit_ruby_indented;  // v8 bug workaround
})()
;// class Val::Bit
if (typeof Val$Bit !== 'object') {
  Val$Bit = function() {};
  Val$Bit = new Val$Bit;
  Val$Bit.isa = function (s) { return s == 'Val::Bit'; };
  Val$Bit.perl = function () { return 'Val::Bit.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Bit;
  // method emit_ruby
  Val$Bit.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Val$Bit.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string((( bool(v_self.v_bit) ? 'true' : 'false')))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Bit.emit_ruby_indented;  // v8 bug workaround
})()
;// class Val::Num
if (typeof Val$Num !== 'object') {
  Val$Num = function() {};
  Val$Num = new Val$Num;
  Val$Num.isa = function (s) { return s == 'Val::Num'; };
  Val$Num.perl = function () { return 'Val::Num.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Num;
  // method emit_ruby
  Val$Num.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.v_num);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Val$Num.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(v_self.v_num)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Num.emit_ruby_indented;  // v8 bug workaround
})()
;// class Val::Buf
if (typeof Val$Buf !== 'object') {
  Val$Buf = function() {};
  Val$Buf = new Val$Buf;
  Val$Buf.isa = function (s) { return s == 'Val::Buf'; };
  Val$Buf.perl = function () { return 'Val::Buf.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Val$Buf;
  // method emit_ruby
  Val$Buf.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Val$Buf.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(String.fromCharCode(34)) + string(v_self.v_buf) + string(String.fromCharCode(34))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Val$Buf.emit_ruby_indented;  // v8 bug workaround
})()
;// class Lit::Block
if (typeof Lit$Block !== 'object') {
  Lit$Block = function() {};
  Lit$Block = new Lit$Block;
  Lit$Block.isa = function (s) { return s == 'Lit::Block'; };
  Lit$Block.perl = function () { return 'Lit::Block.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Block;
  // method emit_ruby
  Lit$Block.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Lit$Block.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sub = null;

(v_sub = (function () { var tmp = {v_name: '',v_sig: v_self.v_sig,v_block: v_self.v_stmts}; tmp.__proto__ = Sub; return tmp; })());
            return(v_sub.emit_ruby_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Block.emit_ruby_indented;  // v8 bug workaround
})()
;// class Lit::Array
if (typeof Lit$Array !== 'object') {
  Lit$Array = function() {};
  Lit$Array = new Lit$Array;
  Lit$Array.isa = function (s) { return s == 'Lit::Array'; };
  Lit$Array.perl = function () { return 'Lit::Array.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Array;
  // method emit_ruby
  Lit$Array.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Lit$Array.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_ruby_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Array.emit_ruby_indented;  // v8 bug workaround
})()
;// class Lit::Hash
if (typeof Lit$Hash !== 'object') {
  Lit$Hash = function() {};
  Lit$Hash = new Lit$Hash;
  Lit$Hash.isa = function (s) { return s == 'Lit::Hash'; };
  Lit$Hash.perl = function () { return 'Lit::Hash.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lit$Hash;
  // method emit_ruby
  Lit$Hash.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Lit$Hash.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_ast = null;

(v_ast = v_self.expand_interpolation());
            throw(v_ast.emit_ruby_indented(v_level));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lit$Hash.emit_ruby_indented;  // v8 bug workaround
})()
;// class Index
if (typeof Index !== 'object') {
  Index = function() {};
  Index = new Index;
  Index.isa = function (s) { return s == 'Index'; };
  Index.perl = function () { return 'Index.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Index;
  // method emit_ruby
  Index.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Index.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(v_self.v_obj.emit_ruby()) + string('[') + string(v_self.v_index_exp.emit_ruby()) + string(']')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Index.emit_ruby_indented;  // v8 bug workaround
})()
;// class Lookup
if (typeof Lookup !== 'object') {
  Lookup = function() {};
  Lookup = new Lookup;
  Lookup.isa = function (s) { return s == 'Lookup'; };
  Lookup.perl = function () { return 'Lookup.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Lookup;
  // method emit_ruby
  Lookup.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Lookup.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(v_self.v_obj.emit_ruby()) + string('[') + string(v_self.v_index_exp.emit_ruby()) + string(']')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Lookup.emit_ruby_indented;  // v8 bug workaround
})()
;// class Var
if (typeof Var !== 'object') {
  Var = function() {};
  Var = new Var;
  Var.isa = function (s) { return s == 'Var'; };
  Var.perl = function () { return 'Var.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Var;
  var v_table = null;
  // method emit_ruby
  Var.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Var.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            if ( bool(and(and(((v_self.v_sigil == String.fromCharCode(64))), function () { return ((v_self.v_twigil == '*')); }), function () { return ((v_self.v_name == 'ARGS')); })) ) { (function () {
                throw((string(Ruby.tab(v_level)) + string('ARGV')));;
            })(); }
            else { (function () {
                null;
            })(); };
            throw((string(Ruby.tab(v_level)) + string((( bool(((v_self.v_twigil == '.'))) ? ((string('self.v_') + string(v_self.v_name) + string(''))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH'))) : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_self.v_name) + string(''))))))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_ruby_indented;  // v8 bug workaround
  // method emit_ruby_name
  Var.emit_ruby_name = function () {
    var v_self = this;
        try {
            throw((( bool(((v_self.v_twigil == '.'))) ? ((string('self.v_') + string(v_self.v_name))) : (( bool(((v_self.v_name == String.fromCharCode(47)))) ? ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string('MATCH'))) : ((string((function () { if (v_table == null) { v_table = {} }; return (v_table[v_self.v_sigil] ); })()) + string(v_self.v_name))))))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Var.emit_ruby_name;  // v8 bug workaround
(v_table = (function () { 
    var Hash_a = {};

(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(36)]  = 'v_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(64)]  = 'list_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(37)]  = 'hash_'); })();
(function () { if (Hash_a == null) { Hash_a = {} }; return (Hash_a[String.fromCharCode(38)]  = 'code_'); })();
    return(Hash_a);
})());})()
;// class Proto
if (typeof Proto !== 'object') {
  Proto = function() {};
  Proto = new Proto;
  Proto.isa = function (s) { return s == 'Proto'; };
  Proto.perl = function () { return 'Proto.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Proto;
  // method emit_ruby
  Proto.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Proto.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(String.fromCharCode(36)) + string(Main.to_go_namespace(v_self.v_name))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Proto.emit_ruby_indented;  // v8 bug workaround
})()
;// class Call
if (typeof Call !== 'object') {
  Call = function() {};
  Call = new Call;
  Call.isa = function (s) { return s == 'Call'; };
  Call.perl = function () { return 'Call.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Call;
  // method emit_ruby
  Call.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Call.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_invocant = null;

            var v_meth = null;

            var v_call = null;

(v_invocant = v_self.v_invocant.emit_ruby());
            if ( bool(or(or(or(((v_self.v_method == 'perl')), function () { return ((v_self.v_method == 'yaml')); }), function () { return ((v_self.v_method == 'say')); }), function () { return ((v_self.v_method == 'isa')); })) ) { (function () {
                if ( bool((v_self.v_hyper)) ) { (function () {
                    throw((string(v_invocant) + string((string('.map ') + string(String.fromCharCode(123)) + string(String.fromCharCode(124) + 'x' + String.fromCharCode(124) + ' x.'))) + string(v_self.v_method) + string((string('('))) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string((string(')' + String.fromCharCode(125))))));;
                })(); }
                else { (function () {
                    throw((string('mp6_') + string(v_self.v_method) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })((function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_invocant);
(List_v = v_self.v_arguments);
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
    return(List_a);
})())).join(', ')) + string(')')));;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
(v_meth = v_self.v_method);
            if ( bool((v_meth == 'postcircumfix:<( )>')) ) { (function () {
                throw((string(Ruby.tab(v_level)) + string(v_invocant) + string('.call(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(or(or(or(or(or(((v_meth == 'values')), function () { return ((v_meth == 'keys')); }), function () { return ((v_meth == 'push')); }), function () { return ((v_meth == 'shift')); }), function () { return ((v_meth == 'unshift')); }), function () { return ((v_meth == 'concat')); }), function () { return ((v_meth == 'join')); })) ) { (function () {
                throw((string(Ruby.tab(v_level)) + string(v_invocant) + string('.') + string(v_meth) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_meth == 'chars')) ) { (function () {
                throw((string(Ruby.tab(v_level)) + string(v_invocant) + string((string('.length')))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_meth == 'elems')) ) { (function () {
                throw((string(Ruby.tab(v_level)) + string(v_invocant) + string((string('.length')))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_call = (string('f_') + string(v_meth) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));
            if ( bool((v_self.v_hyper)) ) { return (function () {
                return((string(Ruby.tab(v_level)) + string(v_invocant) + string((string('.map ') + string(String.fromCharCode(123)) + string(String.fromCharCode(124) + 'x' + String.fromCharCode(124) + ' x.'))) + string(v_call) + string((string(String.fromCharCode(125))))));
            })(); }
            else { return (function () {
                return((string(Ruby.tab(v_level)) + string(v_invocant) + string('.') + string(v_call)));
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Call.emit_ruby_indented;  // v8 bug workaround
})()
;// class Apply
if (typeof Apply !== 'object') {
  Apply = function() {};
  Apply = new Apply;
  Apply.isa = function (s) { return s == 'Apply'; };
  Apply.perl = function () { return 'Apply.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Apply;
  // method emit_ruby_indented
  Apply.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(v_self.emit_ruby())));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_ruby_indented;  // v8 bug workaround
  // method emit_ruby
  Apply.emit_ruby = function () {
    var v_self = this;
        try {
            var v_code = null;

(v_code = v_self.v_code);
            if ( bool(isa(v_code, 'Str')) ) { (function () {
                null;
            })(); }
            else { (function () {
                throw((string('(') + string(v_self.v_code.emit_ruby()) + string(').(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); };
            if ( bool((v_code == 'self')) ) { (function () {
                throw('self');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Mu')) ) { (function () {
                throw('nil');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'make')) ) { (function () {
                throw((string('v_MATCH.v_capture ' + String.fromCharCode(61) + ' ') + string((v_self.v_arguments[0]).emit_ruby()) + string('')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'False')) ) { (function () {
                throw('false');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'True')) ) { (function () {
                throw('true');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'say')) ) { (function () {
                throw((string('puts') + string(Ruby.to_str(' + ', v_self.v_arguments))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'print')) ) { (function () {
                throw((string('print') + string(Ruby.to_str(' + ', v_self.v_arguments))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'warn')) ) { (function () {
                throw((string(String.fromCharCode(36) + 'stdout.puts(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'return')) ) { (function () {
                throw((string('return(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'array')) ) { (function () {
                throw((string('[') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(']')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Int')) ) { (function () {
                throw((string('(') + string((v_self.v_arguments[0]).emit_ruby()) + string(').to_i')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'Num')) ) { (function () {
                throw((string('(') + string((v_self.v_arguments[0]).emit_ruby()) + string(').to_f')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw(Ruby.to_str(' + ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string(String.fromCharCode(33)) + string(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', v_self.v_arguments))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(63) + '>')) ) { (function () {
                throw((string(String.fromCharCode(33) + '(' + String.fromCharCode(33)) + string(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', v_self.v_arguments)) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(36) + '>')) ) { (function () {
                throw((string('mp6_to_scalar(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(64) + '>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'prefix:<' + String.fromCharCode(37) + '>')) ) { (function () {
                throw((string(String.fromCharCode(37) + String.fromCharCode(123)) + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(' ')) + string(String.fromCharCode(125))));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'list:<' + String.fromCharCode(126) + '>')) ) { (function () {
                throw(Ruby.to_str(' + ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<+>')) ) { (function () {
                throw(Ruby.to_num(' + ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<->')) ) { (function () {
                throw(Ruby.to_num(' - ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<*>')) ) { (function () {
                throw(Ruby.to_num(' * ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(47) + '>')) ) { (function () {
                throw(Ruby.to_num(' ' + String.fromCharCode(47) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(38) + String.fromCharCode(38) + '>')) ) { (function () {
                throw(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(124) + String.fromCharCode(124) + '>')) ) { (function () {
                throw(Ruby.to_bool(' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<and>')) ) { (function () {
                throw(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<or>')) ) { (function () {
                throw(Ruby.to_bool(' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<eq>')) ) { (function () {
                throw(Ruby.to_str(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<ne>')) ) { (function () {
                throw(Ruby.to_str(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + String.fromCharCode(61) + '>')) ) { (function () {
                throw(Ruby.to_num(' ' + String.fromCharCode(61) + String.fromCharCode(61) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(33) + String.fromCharCode(61) + '>')) ) { (function () {
                throw(Ruby.to_num(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<<>')) ) { (function () {
                throw(Ruby.to_num(' < ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<>>')) ) { (function () {
                throw(Ruby.to_num(' > ', v_self.v_arguments));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<..>')) ) { (function () {
                throw((string('(') + string(v_self.v_arguments[0].emit_ruby()) + string('..') + string(v_self.v_arguments[1].emit_ruby()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'exists')) ) { (function () {
                var v_arg = null;

(v_arg = v_self.v_arguments[0]);
                if ( bool(isa(v_arg, 'Lookup')) ) { (function () {
                    throw((string('(') + string((v_arg.obj()).emit_ruby()) + string(').has_key' + String.fromCharCode(63) + '(') + string((v_arg.index_exp()).emit_ruby()) + string(')')));;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'ternary:<' + String.fromCharCode(63) + String.fromCharCode(63) + ' ' + String.fromCharCode(33) + String.fromCharCode(33) + '>')) ) { (function () {
                throw((string('(') + string(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[0]);
    return(List_a);
})())) + string(' ' + String.fromCharCode(63) + ' ') + string((v_self.v_arguments[1]).emit_ruby()) + string(' : ') + string((v_self.v_arguments[2]).emit_ruby()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'circumfix:<( )>')) ) { (function () {
                throw((string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'infix:<' + String.fromCharCode(61) + '>')) ) { (function () {
                throw(v__NAMESPACE.emit_ruby_bind(v_self.v_arguments[0], v_self.v_arguments[1]));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'substr')) ) { (function () {
                throw((string(Ruby.to_str(' + ', (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_arguments[0]);
    return(List_a);
})())) + string('[') + string((v_self.v_arguments[1]).emit_ruby()) + string(', ') + string((v_self.v_arguments[2]).emit_ruby()) + string(']')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'index')) ) { (function () {
                throw((string('(') + string((v_self.v_arguments[0]).emit_ruby()) + string(').index(') + string((v_self.v_arguments[1]).emit_ruby()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'defined')) ) { (function () {
                throw((string('(') + string((v_self.v_arguments[0]).emit_ruby()) + string(' ' + String.fromCharCode(33) + String.fromCharCode(61) + ' nil)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'shift')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_ruby()) + string('.shift()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'pop')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_ruby()) + string('.pop()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'push')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_ruby()) + string('.push(') + string((v_self.v_arguments[1]).emit_ruby()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'unshift')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_ruby()) + string('.unshift(') + string((v_self.v_arguments[1]).emit_ruby()) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_code == 'elems')) ) { (function () {
                throw((string((v_self.v_arguments[0]).emit_ruby()) + string('.length()')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_self.v_namespace) ) { (function () {
                throw((string(String.fromCharCode(36)) + string(Main.to_go_namespace(v_self.v_namespace)) + string('.f_') + string(v_self.v_code) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string('namespace.f_') + string(v_self.v_code) + string('(') + string(((function (a_) { var out = []; if ( a_ == null ) { return out; }; for(var i = 0; i < a_.length; i++) { out.push( a_[i].emit_ruby() ) }; return out; })(v_self.v_arguments)).join(', ')) + string(')')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Apply.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string(v_self.emit_ruby())));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_ruby_indented;  // v8 bug workaround
  // sub emit_ruby_bind
  Apply.emit_ruby_bind = function (v_parameters, v_arguments) {
        try {
            if ( bool(isa(v_parameters, 'Index')) ) { (function () {
                if ( bool(or(and(isa(v_parameters.obj(), 'Var'), function () { return (v_parameters.obj().sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_parameters.obj(), 'Decl'), function () { return (v_parameters.obj().var().sigil() == String.fromCharCode(64)); }); })) ) { (function () {
                    throw((string((v_parameters.obj()).emit_ruby()) + string('[') + string((v_parameters.index_exp()).emit_ruby()) + string('] ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_ruby())));;
                })(); }
                else { (function () {
                    null;
                })(); };
                throw((string('(') + string(v_parameters.obj().emit_ruby()) + string(' ') + string(String.fromCharCode(63) + ' ') + string((v_parameters.obj()).emit_ruby()) + string('[') + string((v_parameters.index_exp()).emit_ruby()) + string('] ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_ruby()) + string(' ') + string(': Proc.new' + String.fromCharCode(123) + String.fromCharCode(124) + String.fromCharCode(124) + ' ') + string((v_parameters.obj()).emit_ruby()) + string(' ' + String.fromCharCode(61) + ' []' + String.fromCharCode(59)) + string((v_parameters.obj()).emit_ruby()) + string('[') + string((v_parameters.index_exp()).emit_ruby()) + string('] ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_ruby()) + string(' ' + String.fromCharCode(125) + '.call() ') + string(')')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Lookup')) ) { (function () {
                throw((string((v_parameters.obj()).emit_ruby()) + string('[') + string((v_parameters.index_exp()).emit_ruby()) + string('] ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_ruby())));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(isa(v_parameters, 'Call')) ) { (function () {
                throw((string((v_parameters.invocant()).emit_ruby()) + string((string('.v_'))) + string(v_parameters.method()) + string((string(' ' + String.fromCharCode(61) + ' '))) + string(v_arguments.emit_ruby()) + string('')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(64)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(64)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_array1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Array; return tmp; })());;
            })(); }
            else { (function () {
                if ( bool(or(and(isa(v_parameters, 'Var'), function () { return (v_parameters.sigil() == String.fromCharCode(37)); }), function () { return and(isa(v_parameters, 'Decl'), function () { return (v_parameters.var().sigil() == String.fromCharCode(37)); }); })) ) { (function () {
(v_arguments = (function () { var tmp = {v_hash1: (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_arguments);
    return(List_a);
})()}; tmp.__proto__ = Lit$Hash; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };;
            })(); };
            throw((string(v_parameters.emit_ruby()) + string(' ' + String.fromCharCode(61) + ' ') + string(v_arguments.emit_ruby())));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Apply.emit_ruby_bind;  // v8 bug workaround
})()
;// class Return
if (typeof Return !== 'object') {
  Return = function() {};
  Return = new Return;
  Return.isa = function (s) { return s == 'Return'; };
  Return.perl = function () { return 'Return.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Return;
  // method emit_ruby
  Return.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Return.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            return((string(Ruby.tab(v_level)) + string('return ') + string(v_self.v_result.emit_ruby()) + string('')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Return.emit_ruby_indented;  // v8 bug workaround
})()
;// class If
if (typeof If !== 'object') {
  If = function() {};
  If = new If;
  If.isa = function (s) { return s == 'If'; };
  If.perl = function () { return 'If.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = If;
  // method emit_ruby
  If.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  If.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_has_body = null;

            var v_has_otherwise = null;

            var v_body_block = null;

            var v_s = null;

(v_has_body = ( bool(v_self.v_body) ? 1 : 0));
(v_has_otherwise = ( bool(v_self.v_otherwise) ? 1 : 0));
(v_body_block = (function () { var tmp = {v_block: v_self.v_body.stmts()}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
            if ( bool(v_body_block.has_my_decl()) ) { (function () {
(v_body_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Do; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
(v_s = (string(Ruby.tab(v_level)) + string('if ') + string(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_cond);
    return(List_a);
})())) + string((string(String.fromCharCode(10)))) + string(v_body_block.emit_ruby_indented(add(v_level, 1)))));
            if ( bool((v_has_otherwise)) ) { (function () {
                var v_otherwise_block = null;

(v_otherwise_block = (function () { var tmp = {v_block: v_self.v_otherwise.stmts()}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
                if ( bool(v_otherwise_block.has_my_decl()) ) { (function () {
(v_otherwise_block = (function () { var tmp = {v_block: v_self.v_otherwise}; tmp.__proto__ = Do; return tmp; })());;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_s = (string(v_s) + string((string(String.fromCharCode(10)) + string(Ruby.tab(v_level)) + string((string('else') + string(String.fromCharCode(10)))) + string(v_otherwise_block.emit_ruby_indented(add(v_level, 1)))))));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_s = (string(v_s) + string((string(String.fromCharCode(10)) + string(Ruby.tab(v_level)) + string((string('end')))))));
            throw(v_s);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  If.emit_ruby_indented;  // v8 bug workaround
})()
;// class While
if (typeof While !== 'object') {
  While = function() {};
  While = new While;
  While.isa = function (s) { return s == 'While'; };
  While.perl = function () { return 'While.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = While;
  // method emit_ruby
  While.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  While.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_body_block = null;

(v_body_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
            if ( bool(v_body_block.has_my_decl()) ) { (function () {
(v_body_block = (function () { var tmp = {v_block: v_self.v_body}; tmp.__proto__ = Do; return tmp; })());;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(and(v_self.v_init, function () { return v_self.v_continue; })) ) { (function () {
                die((string('not implemented (While)')));;
            })(); }
            else { (function () {
                null;
            })(); };
            return((string(Ruby.tab(v_level)) + string('while ') + string(Ruby.to_bool(' ' + String.fromCharCode(38) + String.fromCharCode(38) + ' ', (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(v_self.v_cond);
    return(List_a);
})())) + string((string(String.fromCharCode(10)))) + string(v_body_block.emit_ruby_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Ruby.tab(v_level)) + string('end')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  While.emit_ruby_indented;  // v8 bug workaround
})()
;// class For
if (typeof For !== 'object') {
  For = function() {};
  For = new For;
  For.isa = function (s) { return s == 'For'; };
  For.perl = function () { return 'For.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = For;
  // method emit_ruby
  For.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  For.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_body_block = null;

            var v_topic = null;

(v_body_block = (function () { var tmp = {v_block: v_self.v_body.stmts()}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
            if ( bool(v_self.v_body.sig()) ) { (function () {
(v_topic = v_self.v_body.sig().emit_ruby_name());;
            })(); }
            else { (function () {
(v_topic = 'v__');;
            })(); };
            return((string(Ruby.tab(v_level)) + string('for ') + string(v_topic) + string((string(' in '))) + string(v_self.v_cond.emit_ruby()) + string((string(String.fromCharCode(10)))) + string(v_body_block.emit_ruby_indented(add(v_level, 1))) + string((string(String.fromCharCode(10)))) + string(Ruby.tab(v_level)) + string('end')));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  For.emit_ruby_indented;  // v8 bug workaround
})()
;// class Decl
if (typeof Decl !== 'object') {
  Decl = function() {};
  Decl = new Decl;
  Decl.isa = function (s) { return s == 'Decl'; };
  Decl.perl = function () { return 'Decl.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Decl;
  // method emit_ruby
  Decl.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Decl.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_decl = null;

            var v_name = null;

(v_decl = v_self.v_decl);
(v_name = v_self.v_var.name());
            return((string(Ruby.tab(v_level)) + string((( bool(((v_decl == 'has'))) ? ('') : v_self.v_var.emit_ruby())))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_ruby_indented;  // v8 bug workaround
  // method emit_ruby_init
  Decl.emit_ruby_init = function () {
    var v_self = this;
        try {
            if ( bool(((v_self.v_var).sigil() == String.fromCharCode(37))) ) { (function () {
                throw(String.fromCharCode(123) + String.fromCharCode(125));;
            })(); }
            else { (function () {
                if ( bool(((v_self.v_var).sigil() == String.fromCharCode(64))) ) { (function () {
                    throw('[]');;
                })(); }
                else { (function () {
                    throw('nil');;
                })(); };;
            })(); };
            throw('');;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Decl.emit_ruby_init;  // v8 bug workaround
})()
;// class Method
if (typeof Method !== 'object') {
  Method = function() {};
  Method = new Method;
  Method.isa = function (s) { return s == 'Method'; };
  Method.perl = function () { return 'Method.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Method;
  // method emit_ruby
  Method.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Method.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_sig = null;

            var v_invocant = null;

            var v_pos = null;

            var v_args = null;

            var v_default_args = null;

            var v_meth_args = null;

            var v_block = null;

            var List_s = [];

(v_sig = v_self.v_sig);
(v_invocant = v_sig.invocant());
(v_pos = v_sig.positional());
(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_default_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_meth_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) {                 var v_arg = null;

(v_arg = v_field.emit_ruby_name());
v_args.push(v_arg);
v_default_args.push((string(v_arg) + string(String.fromCharCode(61) + 'nil')));
v_meth_args.push((string(v_arg) + string(String.fromCharCode(61) + 'nil')));; })(a_[i_]) } })((v_pos));
(v_block = (function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
            push(List_s, (string(Ruby.tab(v_level)) + string('send( :define_method, ' + String.fromCharCode(34) + 'f_') + string(v_self.v_name) + string(String.fromCharCode(34) + '.to_sym, lambda' + String.fromCharCode(123) + ' ' + String.fromCharCode(124)) + string(v_default_args.join((string(', ')))) + string(String.fromCharCode(124))));
            push(List_s, (string(Ruby.tab(add(v_level, 1))) + string(v_invocant.emit_ruby_name()) + string((string(' ' + String.fromCharCode(61) + ' self')))));
            push(List_s, v_block.emit_ruby_indented(add(v_level, 1)));
            push(List_s, (string(Ruby.tab(v_level)) + string((string(String.fromCharCode(125) + ' )')))));
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Method.emit_ruby_indented;  // v8 bug workaround
})()
;// class Sub
if (typeof Sub !== 'object') {
  Sub = function() {};
  Sub = new Sub;
  Sub.isa = function (s) { return s == 'Sub'; };
  Sub.perl = function () { return 'Sub.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Sub;
  // method emit_ruby
  Sub.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Sub.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_label = null;

            var v_sig = null;

            var v_pos = null;

            var v_args = null;

            var v_default_args = null;

            var v_meth_args = null;

            var v_block = null;

            var v_label2 = null;

            var List_s = [];

(v_label = (string('_anon_') + string(Perlito6$Ruby$LexicalBlock.get_ident_ruby())));
            if ( bool(((v_self.v_name == ''))) ) { (function () {
                Perlito6$Ruby$LexicalBlock.push_stmt_ruby((function () { var tmp = {v_name: v_label,v_block: v_self.v_block,v_sig: v_self.v_sig,v_handles_return_exception: 1}; tmp.__proto__ = Perlito6$Ruby$AnonSub; return tmp; })());
                throw((string(Ruby.tab(v_level)) + string('f_') + string(v_label)));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_sig = v_self.v_sig);
(v_pos = v_sig.positional());
(v_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_default_args = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());
(v_meth_args = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push('self');
    return(List_a);
})());
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_field) {                 var v_arg = null;

(v_arg = v_field.emit_ruby_name());
v_args.push(v_arg);
v_default_args.push((string(v_arg) + string(String.fromCharCode(61) + 'nil')));
v_meth_args.push((string(v_arg) + string(String.fromCharCode(61) + 'nil')));; })(a_[i_]) } })((v_pos));
(v_block = (function () { var tmp = {v_block: v_self.v_block,v_needs_return: 1}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })());
(v_label2 = (string('_anon_') + string(Perlito6$Ruby$LexicalBlock.get_ident_ruby())));
            push(List_s, (string(Ruby.tab(v_level)) + string('send( :define_method, ' + String.fromCharCode(34) + 'f_') + string(v_self.v_name) + string(String.fromCharCode(34) + '.to_sym, lambda' + String.fromCharCode(123) + ' ' + String.fromCharCode(124)) + string(v_default_args.join((string(', ')))) + string(String.fromCharCode(124))));
            push(List_s, v_block.emit_ruby_indented(add(v_level, 1)));
            push(List_s, (string(Ruby.tab(v_level)) + string((string(String.fromCharCode(125) + ' )')))));
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Sub.emit_ruby_indented;  // v8 bug workaround
})()
;// class Do
if (typeof Do !== 'object') {
  Do = function() {};
  Do = new Do;
  Do.isa = function (s) { return s == 'Do'; };
  Do.perl = function () { return 'Do.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Do;
  // method emit_ruby
  Do.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Do.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            var v_block = null;

            var List_s = [];

(v_block = v_self.simplify().block());
            push(List_s, (string(Ruby.tab(v_level)) + string((string('Proc.new') + string(String.fromCharCode(123)) + string(' ' + String.fromCharCode(124) + String.fromCharCode(124) + ' ')))));
            push(List_s, ((function () { var tmp = {v_block: v_block,v_needs_return: 0}; tmp.__proto__ = Perlito6$Ruby$LexicalBlock; return tmp; })()).emit_ruby_indented(add(v_level, 1)));
            push(List_s, (string(Ruby.tab(v_level)) + string((string(String.fromCharCode(125) + '.call()')))));
            throw(List_s.join((string(String.fromCharCode(10)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Do.emit_ruby_indented;  // v8 bug workaround
})()
;// class Use
if (typeof Use !== 'object') {
  Use = function() {};
  Use = new Use;
  Use.isa = function (s) { return s == 'Use'; };
  Use.perl = function () { return 'Use.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Use;
  // method emit_ruby
  Use.emit_ruby = function () {
    var v_self = this;
        try {
            return(v_self.emit_ruby_indented(0));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_ruby;  // v8 bug workaround
  // method emit_ruby_indented
  Use.emit_ruby_indented = function (v_level) {
    var v_self = this;
        try {
            throw('');;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Use.emit_ruby_indented;  // v8 bug workaround
})()
;// class Main
if (typeof Main !== 'object') {
  Main = function() {};
  Main = new Main;
  Main.isa = function (s) { return s == 'Main'; };
  Main.perl = function () { return 'Main.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Main;
  // sub _replace
  Main._replace = function (v_s, v_old, v_new) {
        try {
            var v_p = null;

(v_p = index(v_s, v_old));
            return(( bool((v_p >= 0)) ? (string((v_s || "").substr(0, v_p)) + string(v_new) + string(v__NAMESPACE._replace((v_s || "").substr(add(v_p, chars(v_old))), v_old, v_new))) : v_s));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main._replace;  // v8 bug workaround
  // sub to_lisp_identifier
  Main.to_lisp_identifier = function (v_ident) {
        try {
            throw((string('sv-') + string(v_ident)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.to_lisp_identifier;  // v8 bug workaround
  // sub lisp_escape_string
  Main.lisp_escape_string = function (v_s) {
        try {
            return(v__NAMESPACE._replace(v_s, (string(String.fromCharCode(92))), (string(String.fromCharCode(92)) + string(String.fromCharCode(92)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.lisp_escape_string;  // v8 bug workaround
  // sub to_javascript_namespace
  Main.to_javascript_namespace = function (v_s) {
        try {
            return(v__NAMESPACE._replace(v_s, (string('::')), String.fromCharCode(36)));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.to_javascript_namespace;  // v8 bug workaround
  // sub to_lisp_namespace
  Main.to_lisp_namespace = function (v_s) {
        try {
            return(v__NAMESPACE._replace(v_s, (string('::')), (string('-'))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.to_lisp_namespace;  // v8 bug workaround
  // sub to_go_namespace
  Main.to_go_namespace = function (v_s) {
        try {
            return(v__NAMESPACE._replace(v_s, (string('::')), (string('__'))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.to_go_namespace;  // v8 bug workaround
})()
;// class Main
if (typeof Main !== 'object') {
  Main = function() {};
  Main = new Main;
  Main.isa = function (s) { return s == 'Main'; };
  Main.perl = function () { return 'Main.new(' + Main._dump(this) + ')'; };
}
(function () {
  var v__NAMESPACE = Main;
  var v__V6_COMPILER_NAME = null;
  var v__V6_COMPILER_VERSION = null;
  var v_source = null;
  var v_backend = null;
  var v_execute = null;
  var v_verbose = null;
  var v_comp_units = null;
  var v_perl6lib = null;
  var v_expand_use = null;
  var Hash_module_seen = {};
  // method module_name
  Main.module_name = function (v_str, v_pos) {
    var v_grammar = this;
        try {
            var v_MATCH = null;

(v_MATCH = (function () { var tmp = {v_str: v_str,v_from: v_pos,v_to: v_pos,v_bool: 1}; tmp.__proto__ = Perlito6$Match; return tmp; })());
(v_MATCH.v_bool = (((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(((function () { 
    return(and(((function () { 
    var v_m2 = null;

(v_m2 = Perlito6$Grammar.ident(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()), function () { return ((function () { 
    var v_pos1 = null;

(v_pos1 = v_MATCH.to());
    return(or(((function () { 
    return(and(and((and(('::' == (v_str || "").substr(v_MATCH.to(), 2)), function () { return ((v_MATCH.v_to = add(2, v_MATCH.to()))); })), function () { return ((function () { 
    var v_m2 = null;

(v_m2 = v_grammar.module_name(v_str, v_MATCH.to()));
    if ( bool(v_m2) ) { return (function () {
(v_MATCH.v_to = v_m2.to());
(function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['module_name']  = v_m2); })();
        return(1);
    })(); }
    else { return (function () {
        return(false);
    })(); };
})()); }), function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
(List_v = ((scalar((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['module_name'] ); })()))));
    (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_x) { List_a.push(List_v[v_x]);; })(a_[i_]) } })((function (a) { for (var i=0, l=((elems(List_v) - 1)); i<=l; ++i){ a.push(i) }; return a })([]));
    return(List_a);
})()));
})()), function () { return 1; })); }));
})()), function () { return ((function () { 
(v_MATCH.v_to = v_pos1);
    return((and(1, function () { return (or(((function () { 
    return((v_MATCH.v_capture = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push(string((function () { if (v_MATCH == null) { v_MATCH = {} }; return (v_MATCH['Perlito6::Grammar.ident'] ); })()));
    return(List_a);
})()));
})()), function () { return 1; })); })));
})()); }));
})()); }));
})()));
})())));
            return(v_MATCH);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.module_name;  // v8 bug workaround
  // sub modulename_to_filename
  Main.modulename_to_filename = function (v_s) {
        try {
            var v_ident = null;

(v_ident = Main.module_name(v_s, 0));
            throw((scalar(v_ident)).join((string(String.fromCharCode(47)))));;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.modulename_to_filename;  // v8 bug workaround
  // sub expand_use
  Main.expand_use = function (v_stmt) {
        try {
            var v_module_name = null;

(v_module_name = v_stmt.mod());
            if ( bool((v_module_name == 'v6')) ) { (function () {
                throw(null);;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(( bool(((function () { if (Hash_module_seen == null) { Hash_module_seen = {} }; return (Hash_module_seen[v_module_name] ); })())) ? false : true)) ) { return (function () {
(function () { if (Hash_module_seen == null) { Hash_module_seen = {} }; return (Hash_module_seen[v_module_name]  = 1); })();
                if ( bool(or(((v_backend == 'perl5')), function () { return ((v_backend == 'ast-perl6')); })) ) { return (function () {
                    null;
                })(); }
                else { return (function () {
                    var v_filename = null;

                    var v_source = null;

                    var v_m = null;

(v_filename = v_module_name);
(v_filename = (string(v_perl6lib) + string(String.fromCharCode(47)) + string(v__NAMESPACE.modulename_to_filename(v_filename)) + string('.pm')));
                    if ( bool((v_verbose)) ) { (function () {
                        warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' now loading: ')), v_filename);;
                    })(); }
                    else { (function () {
                        null;
                    })(); };
(v_source = IO.slurp(v_filename));
(v_m = Perlito6$Grammar.exp_stmts(v_source, 0));
                    return(v__NAMESPACE.add_comp_unit(scalar(v_m)));
                })(); };
            })(); }
            else { return (function () {
                null;
            })(); };;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.expand_use;  // v8 bug workaround
  // sub add_comp_unit
  Main.add_comp_unit = function (List_parse) {
        try {
            (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_comp_unit) {                 if ( bool(and(v_expand_use, function () { return isa(v_comp_unit, 'Use'); })) ) { (function () {
                    v__NAMESPACE.expand_use(v_comp_unit);;
                })(); }
                else { (function () {
                    if ( bool(isa(v_comp_unit, 'CompUnit')) ) { (function () {
                        if ( bool(v_verbose) ) { (function () {
                            warn((string('parsed comp_unit: ' + String.fromCharCode(39))), v_comp_unit.name(), (string(String.fromCharCode(39))));;
                        })(); }
                        else { (function () {
                            null;
                        })(); };
                        (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_stmt) {                             if ( bool(and(v_expand_use, function () { return isa(v_stmt, 'Use'); })) ) { (function () {
                                v__NAMESPACE.expand_use(v_stmt);;
                            })(); }
                            else { (function () {
                                null;
                            })(); };; })(a_[i_]) } })(((v_comp_unit.body())));;
                    })(); }
                    else { (function () {
                        null;
                    })(); };;
                })(); };
v_comp_units.push(v_comp_unit);; })(a_[i_]) } })(List_parse);;
        }
        catch(err) {
            if ( err instanceof Error ) {
                throw(err);
            }
            else {
                return(err);
            }
        }
  }
  Main.add_comp_unit;  // v8 bug workaround
        // use Perlito6::Emitter::Token
;        // use Perlito6::Expression
;        // use Perlito6::Go::Emitter
;        // use Perlito6::Grammar::Control
;        // use Perlito6::Grammar::Regex
;        // use Perlito6::Grammar
;        // use Perlito6::Java::Emitter
;        // use Perlito6::JavaScript::Emitter
;        // use Perlito6::Lisp::Emitter
;        // use Perlito6::Macro
;        // use Perlito6::Parrot::Emitter
;        // use Perlito6::Perl5::Emitter
;        // use Perlito6::Precedence
;        // use Perlito6::Python::Emitter
;        // use Perlito6::Ruby::Emitter
;        // use Perlito6::Runtime
;(v__V6_COMPILER_NAME = 'Perlito6');(v__V6_COMPILER_VERSION = '9.0');(v_source = '');(v_backend = '');(v_execute = 0);(v_verbose = 0);(v_comp_units = (function () { 
    var List_a = [];

    var List_v = [];

    return(List_a);
})());(v_perl6lib = '.' + String.fromCharCode(47) + 'src6' + String.fromCharCode(47) + 'lib');(v_expand_use = 1);        if ( bool(v_verbose) ) { (function () {
            warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' Perlito Perl6 compiler')));
            warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' ARGS: ')), perl(List_ARGS));;
        })(); }
        else { (function () {
            null;
        })(); };        if ( bool(or(((List_ARGS[0] == '-v')), function () { return ((List_ARGS[0] == '--verbose')); })) ) { (function () {
(v_verbose = 1);
            shift(List_ARGS);;
        })(); }
        else { (function () {
            null;
        })(); };        if ( bool(((List_ARGS[0] || "").substr(0, 2) == '-C')) ) { (function () {
(v_backend = (List_ARGS[0] || "").substr(2, 10));
(v_execute = 0);
            shift(List_ARGS);
            if ( bool(or(or(((v_backend == 'perl5')), function () { return ((v_backend == 'python')); }), function () { return ((v_backend == 'ruby')); })) ) { (function () {
(v_expand_use = 0);;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); }
        else { (function () {
            null;
        })(); };        if ( bool(((List_ARGS[0] || "").substr(0, 2) == '-B')) ) { (function () {
(v_backend = (List_ARGS[0] || "").substr(2, 10));
(v_execute = 1);
            shift(List_ARGS);
            if ( bool(or(or(((v_backend == 'perl5')), function () { return ((v_backend == 'python')); }), function () { return ((v_backend == 'ruby')); })) ) { (function () {
(v_expand_use = 0);;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); }
        else { (function () {
            null;
        })(); };        if ( bool(or(((List_ARGS[0] == '-V')), function () { return ((List_ARGS[0] == '--version')); })) ) { (function () {
(v_backend = '');
            say(v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
            shift(List_ARGS);;
        })(); }
        else { (function () {
            if ( bool(or(or(((List_ARGS[0] == '-h')), function () { return ((List_ARGS[0] == '--help')); }), function () { return ((v_backend == '')); })) ) { (function () {
(v_backend = '');
                say(v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION, (string(String.fromCharCode(10) + 'perlito [switches] [programfile]' + String.fromCharCode(10) + '  switches:' + String.fromCharCode(10) + '    -h --help' + String.fromCharCode(10) + '    -v --verbose' + String.fromCharCode(10) + '    -V --version' + String.fromCharCode(10) + '    -Ctarget        target backend: go, js, lisp, parrot, perl5, python, ruby, ast-perl6, java' + String.fromCharCode(10) + '    --expand_use --noexpand_use' + String.fromCharCode(10) + '                    expand ' + String.fromCharCode(39) + 'use' + String.fromCharCode(39) + ' statements at compile time' + String.fromCharCode(10) + '    -e program      one line of program (omit programfile)' + String.fromCharCode(10))));
                shift(List_ARGS);;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); };        if ( bool((List_ARGS[0] == '--expand_use')) ) { (function () {
(v_expand_use = 1);
            shift(List_ARGS);;
        })(); }
        else { (function () {
            null;
        })(); };        if ( bool((List_ARGS[0] == '--noexpand_use')) ) { (function () {
(v_expand_use = 0);
            shift(List_ARGS);;
        })(); }
        else { (function () {
            null;
        })(); };        if ( bool(and(v_backend, function () { return List_ARGS; })) ) { (function () {
            var v_prelude_filename = null;

            var v_m = null;

            if ( bool((v_backend == 'lisp')) ) { (function () {
(v_prelude_filename = (string(v_perl6lib) + string(String.fromCharCode(47) + 'Perlito6' + String.fromCharCode(47) + 'Lisp' + String.fromCharCode(47) + 'Prelude.pm')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'js')) ) { (function () {
(v_prelude_filename = (string(v_perl6lib) + string(String.fromCharCode(47) + 'Perlito6' + String.fromCharCode(47) + 'JavaScript' + String.fromCharCode(47) + 'Prelude.pm')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'go')) ) { (function () {
(v_prelude_filename = (string(v_perl6lib) + string(String.fromCharCode(47) + 'Perlito6' + String.fromCharCode(47) + 'Go' + String.fromCharCode(47) + 'Prelude.pm')));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool(v_prelude_filename) ) { (function () {
                var v_m = null;

                if ( bool(v_verbose) ) { (function () {
                    warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' loading lib: ')), v_prelude_filename);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_source = IO.slurp(v_prelude_filename));
(v_m = Perlito6$Grammar.exp_stmts(v_source, 0));
                v__NAMESPACE.add_comp_unit(scalar(v_m));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((List_ARGS[0] == '-e')) ) { (function () {
                shift(List_ARGS);
                if ( bool(v_verbose) ) { (function () {
                    warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' source from command line: ')), List_ARGS[0]);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_source = List_ARGS.shift());;
            })(); }
            else { (function () {
                if ( bool(v_verbose) ) { (function () {
                    warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' source from file: ')), List_ARGS[0]);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_source = IO.slurp(List_ARGS.shift()));;
            })(); };
            if ( bool(v_verbose) ) { (function () {
                warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' backend: ')), v_backend);
                warn((string('now parsing')));;
            })(); }
            else { (function () {
                null;
            })(); };
(v_m = Perlito6$Grammar.exp_stmts(v_source, 0));
            v__NAMESPACE.add_comp_unit(scalar(v_m));
(v_comp_units = (function () { 
    var List_a = [];

    var List_v = [];

List_a.push((function () { var tmp = {v_name: 'GLOBAL',v_body: v_comp_units}; tmp.__proto__ = CompUnit; return tmp; })());
    return(List_a);
})());
            if ( bool((v_backend == 'ast-perl6')) ) { (function () {
                say((string(String.fromCharCode(35) + ' AST dump - do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
                say(perl(v_comp_units));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'go')) ) { (function () {
                var v_filename = null;

                var v_source = null;

                say((string(String.fromCharCode(47) + String.fromCharCode(47) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
(v_filename = (string(v_perl6lib) + string(String.fromCharCode(47) + 'Perlito6' + String.fromCharCode(47) + 'Go' + String.fromCharCode(47) + 'Runtime.go')));
                if ( bool((v_verbose)) ) { (function () {
                    warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' now loading: ')), v_filename);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_source = IO.slurp(v_filename));
                say(v_source);
                say(CompUnit.emit_go_program(v_comp_units));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'lisp')) ) { (function () {
                var v_filename = null;

                var v_source = null;

                say((string(String.fromCharCode(59) + String.fromCharCode(59) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
(v_filename = (string(v_perl6lib) + string(String.fromCharCode(47) + 'Perlito6' + String.fromCharCode(47) + 'Lisp' + String.fromCharCode(47) + 'Runtime.lisp')));
                if ( bool((v_verbose)) ) { (function () {
                    warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' now loading: ')), v_filename);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_source = IO.slurp(v_filename));
                say(v_source);
                say(CompUnit.emit_lisp_program(v_comp_units));
                say('(compiler-main)');
                say(String.fromCharCode(59) + String.fromCharCode(59) + ' Note: the line below creates a binary executable:');
                say(String.fromCharCode(59) + String.fromCharCode(59) + ' (sb-ext:save-lisp-and-die ' + String.fromCharCode(34) + 'tmp.out' + String.fromCharCode(34) + ' :toplevel ' + String.fromCharCode(39) + 'compiler-main :executable t )');;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'perl5')) ) { (function () {
                say((string(String.fromCharCode(35) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
                f_print(CompUnit.emit_perl5_program(v_comp_units));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'js')) ) { (function () {
                var v_filename = null;

                var v_source = null;

                say((string(String.fromCharCode(47) + String.fromCharCode(47) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
(v_filename = (string(v_perl6lib) + string(String.fromCharCode(47) + 'Perlito6' + String.fromCharCode(47) + 'JavaScript' + String.fromCharCode(47) + 'Runtime.js')));
                if ( bool((v_verbose)) ) { (function () {
                    warn((string(String.fromCharCode(47) + String.fromCharCode(47) + ' now loading: ')), v_filename);;
                })(); }
                else { (function () {
                    null;
                })(); };
(v_source = IO.slurp(v_filename));
                say(v_source);
                f_print(CompUnit.emit_javascript_program(v_comp_units));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'python')) ) { (function () {
                say((string(String.fromCharCode(35) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
                say((string(String.fromCharCode(35) + '-*- coding: utf-8 -*-')));
                say('');
                say((string('from Perlito6__Python__Runtime import *')));
                say((string('from Perlito6__Python__Prelude import *')));
                say((string('import __builtin__')));
                say((string('__all__ ' + String.fromCharCode(61) + ' []')));
                say('');
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_c) {                     say(v_c.emit_python());; })(a_[i_]) } })(((v_comp_units)));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'ruby')) ) { (function () {
                say((string(String.fromCharCode(35) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
                say('');
                say((string('require ' + String.fromCharCode(39) + 'Perlito6' + String.fromCharCode(47) + 'Ruby' + String.fromCharCode(47) + 'Runtime.rb' + String.fromCharCode(39))));
                say((string('require ' + String.fromCharCode(39) + 'Perlito6__Ruby__Prelude.rb' + String.fromCharCode(39))));
                say('');
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_c) {                     say(v_c.emit_ruby());; })(a_[i_]) } })(((v_comp_units)));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'parrot')) ) { (function () {
                say((string(String.fromCharCode(35) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
                (function (a_) { for (var i_ = 0; i_ < a_.length ; i_++) { (function (v_c) {                     say(v_c.emit_parrot());; })(a_[i_]) } })(((v_comp_units)));;
            })(); }
            else { (function () {
                null;
            })(); };
            if ( bool((v_backend == 'java')) ) { (function () {
                say((string(String.fromCharCode(47) + String.fromCharCode(47) + ' Do not edit this file - Generated by ')), v__V6_COMPILER_NAME, (string(' ')), v__V6_COMPILER_VERSION);
                f_print(CompUnit.emit_java_program(v_comp_units));;
            })(); }
            else { (function () {
                null;
            })(); };;
        })(); }
        else { (function () {
            null;
        })(); };})()
;})()
